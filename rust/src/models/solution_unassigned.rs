/* 
 * GraphHopper Directions API
 *
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SolutionUnassigned {
  /// An array of ids of unassigned services
  #[serde(rename = "services")]
  services: Option<Vec<String>>,
  /// An array of ids of unassigned shipments
  #[serde(rename = "shipments")]
  shipments: Option<Vec<String>>,
  /// An array of ids of unassigned breaks
  #[serde(rename = "breaks")]
  breaks: Option<Vec<String>>,
  /// An array of details, i.e. reason for unassigned services or shipments
  #[serde(rename = "details")]
  details: Option<Vec<::models::Detail>>
}

impl SolutionUnassigned {
  pub fn new() -> SolutionUnassigned {
    SolutionUnassigned {
      services: None,
      shipments: None,
      breaks: None,
      details: None
    }
  }

  pub fn set_services(&mut self, services: Vec<String>) {
    self.services = Some(services);
  }

  pub fn with_services(mut self, services: Vec<String>) -> SolutionUnassigned {
    self.services = Some(services);
    self
  }

  pub fn services(&self) -> Option<&Vec<String>> {
    self.services.as_ref()
  }

  pub fn reset_services(&mut self) {
    self.services = None;
  }

  pub fn set_shipments(&mut self, shipments: Vec<String>) {
    self.shipments = Some(shipments);
  }

  pub fn with_shipments(mut self, shipments: Vec<String>) -> SolutionUnassigned {
    self.shipments = Some(shipments);
    self
  }

  pub fn shipments(&self) -> Option<&Vec<String>> {
    self.shipments.as_ref()
  }

  pub fn reset_shipments(&mut self) {
    self.shipments = None;
  }

  pub fn set_breaks(&mut self, breaks: Vec<String>) {
    self.breaks = Some(breaks);
  }

  pub fn with_breaks(mut self, breaks: Vec<String>) -> SolutionUnassigned {
    self.breaks = Some(breaks);
    self
  }

  pub fn breaks(&self) -> Option<&Vec<String>> {
    self.breaks.as_ref()
  }

  pub fn reset_breaks(&mut self) {
    self.breaks = None;
  }

  pub fn set_details(&mut self, details: Vec<::models::Detail>) {
    self.details = Some(details);
  }

  pub fn with_details(mut self, details: Vec<::models::Detail>) -> SolutionUnassigned {
    self.details = Some(details);
    self
  }

  pub fn details(&self) -> Option<&Vec<::models::Detail>> {
    self.details.as_ref()
  }

  pub fn reset_details(&mut self) {
    self.details = None;
  }

}



