/* 
 * GraphHopper Directions API
 *
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Shipment {
  /// Unique identifier of service
  #[serde(rename = "id")]
  id: Option<String>,
  /// name of shipment
  #[serde(rename = "name")]
  name: Option<String>,
  /// priority of service, i.e. 1 = high, 2 = normal, 3 = low. default is 2.
  #[serde(rename = "priority")]
  priority: Option<i32>,
  #[serde(rename = "pickup")]
  pickup: Option<::models::Stop>,
  #[serde(rename = "delivery")]
  delivery: Option<::models::Stop>,
  /// array of capacity dimensions
  #[serde(rename = "size")]
  size: Option<Vec<i32>>,
  /// array of required skills
  #[serde(rename = "required_skills")]
  required_skills: Option<Vec<String>>,
  /// array of allowed vehicle ids
  #[serde(rename = "allowed_vehicles")]
  allowed_vehicles: Option<Vec<String>>
}

impl Shipment {
  pub fn new() -> Shipment {
    Shipment {
      id: None,
      name: None,
      priority: None,
      pickup: None,
      delivery: None,
      size: None,
      required_skills: None,
      allowed_vehicles: None
    }
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> Shipment {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> Shipment {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_priority(&mut self, priority: i32) {
    self.priority = Some(priority);
  }

  pub fn with_priority(mut self, priority: i32) -> Shipment {
    self.priority = Some(priority);
    self
  }

  pub fn priority(&self) -> Option<&i32> {
    self.priority.as_ref()
  }

  pub fn reset_priority(&mut self) {
    self.priority = None;
  }

  pub fn set_pickup(&mut self, pickup: ::models::Stop) {
    self.pickup = Some(pickup);
  }

  pub fn with_pickup(mut self, pickup: ::models::Stop) -> Shipment {
    self.pickup = Some(pickup);
    self
  }

  pub fn pickup(&self) -> Option<&::models::Stop> {
    self.pickup.as_ref()
  }

  pub fn reset_pickup(&mut self) {
    self.pickup = None;
  }

  pub fn set_delivery(&mut self, delivery: ::models::Stop) {
    self.delivery = Some(delivery);
  }

  pub fn with_delivery(mut self, delivery: ::models::Stop) -> Shipment {
    self.delivery = Some(delivery);
    self
  }

  pub fn delivery(&self) -> Option<&::models::Stop> {
    self.delivery.as_ref()
  }

  pub fn reset_delivery(&mut self) {
    self.delivery = None;
  }

  pub fn set_size(&mut self, size: Vec<i32>) {
    self.size = Some(size);
  }

  pub fn with_size(mut self, size: Vec<i32>) -> Shipment {
    self.size = Some(size);
    self
  }

  pub fn size(&self) -> Option<&Vec<i32>> {
    self.size.as_ref()
  }

  pub fn reset_size(&mut self) {
    self.size = None;
  }

  pub fn set_required_skills(&mut self, required_skills: Vec<String>) {
    self.required_skills = Some(required_skills);
  }

  pub fn with_required_skills(mut self, required_skills: Vec<String>) -> Shipment {
    self.required_skills = Some(required_skills);
    self
  }

  pub fn required_skills(&self) -> Option<&Vec<String>> {
    self.required_skills.as_ref()
  }

  pub fn reset_required_skills(&mut self) {
    self.required_skills = None;
  }

  pub fn set_allowed_vehicles(&mut self, allowed_vehicles: Vec<String>) {
    self.allowed_vehicles = Some(allowed_vehicles);
  }

  pub fn with_allowed_vehicles(mut self, allowed_vehicles: Vec<String>) -> Shipment {
    self.allowed_vehicles = Some(allowed_vehicles);
    self
  }

  pub fn allowed_vehicles(&self) -> Option<&Vec<String>> {
    self.allowed_vehicles.as_ref()
  }

  pub fn reset_allowed_vehicles(&mut self) {
    self.allowed_vehicles = None;
  }

}



