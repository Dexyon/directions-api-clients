/* 
 * GraphHopper Directions API
 *
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Address {
  /// Unique identifier of location
  #[serde(rename = "location_id")]
  location_id: Option<String>,
  /// name of location, e.g. street name plus house number
  #[serde(rename = "name")]
  name: Option<String>,
  /// longitude
  #[serde(rename = "lon")]
  lon: Option<f64>,
  /// latitude
  #[serde(rename = "lat")]
  lat: Option<f64>,
  /// Optional parameter. Specifies a hint for each address to better snap the coordinates (lon,lat) to road network. E.g. if there is an address or house with two or more neighboring streets you can control for which street the closest location is looked up.
  #[serde(rename = "street_hint")]
  street_hint: Option<String>
}

impl Address {
  pub fn new() -> Address {
    Address {
      location_id: None,
      name: None,
      lon: None,
      lat: None,
      street_hint: None
    }
  }

  pub fn set_location_id(&mut self, location_id: String) {
    self.location_id = Some(location_id);
  }

  pub fn with_location_id(mut self, location_id: String) -> Address {
    self.location_id = Some(location_id);
    self
  }

  pub fn location_id(&self) -> Option<&String> {
    self.location_id.as_ref()
  }

  pub fn reset_location_id(&mut self) {
    self.location_id = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> Address {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_lon(&mut self, lon: f64) {
    self.lon = Some(lon);
  }

  pub fn with_lon(mut self, lon: f64) -> Address {
    self.lon = Some(lon);
    self
  }

  pub fn lon(&self) -> Option<&f64> {
    self.lon.as_ref()
  }

  pub fn reset_lon(&mut self) {
    self.lon = None;
  }

  pub fn set_lat(&mut self, lat: f64) {
    self.lat = Some(lat);
  }

  pub fn with_lat(mut self, lat: f64) -> Address {
    self.lat = Some(lat);
    self
  }

  pub fn lat(&self) -> Option<&f64> {
    self.lat.as_ref()
  }

  pub fn reset_lat(&mut self) {
    self.lat = None;
  }

  pub fn set_street_hint(&mut self, street_hint: String) {
    self.street_hint = Some(street_hint);
  }

  pub fn with_street_hint(mut self, street_hint: String) -> Address {
    self.street_hint = Some(street_hint);
    self
  }

  pub fn street_hint(&self) -> Option<&String> {
    self.street_hint.as_ref()
  }

  pub fn reset_street_hint(&mut self) {
    self.street_hint = None;
  }

}



