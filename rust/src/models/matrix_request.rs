/* 
 * GraphHopper Directions API
 *
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct MatrixRequest {
  /// Specifiy multiple points for which the weight-, route-, time- or distance-matrix should be calculated. In this case the starts are identical to the destinations. If there are N points, then NxN entries will be calculated. The order of the point parameter is important. Specify at least three points. Cannot be used together with from_point or to_point. Is a string with the format longitude,latitude.
  #[serde(rename = "points")]
  points: Option<Vec<Vec<f64>>>,
  /// The starting points for the routes. E.g. if you want to calculate the three routes A-&gt;1, A-&gt;2, A-&gt;3 then you have one from_point parameter and three to_point parameters. Is a string with the format longitude,latitude.
  #[serde(rename = "from_points")]
  from_points: Option<Vec<Vec<f64>>>,
  /// The destination points for the routes. Is a string with the format longitude,latitude.
  #[serde(rename = "to_points")]
  to_points: Option<Vec<Vec<f64>>>,
  /// Optional parameter. Specifies a hint for each point in the `points` array to prefer a certain street for the closest location lookup. E.g. if there is an address or house with two or more neighboring streets you can control for which street the closest location is looked up.
  #[serde(rename = "point_hints")]
  point_hints: Option<Vec<String>>,
  /// More information for the `from_points` array. See `point_hints`
  #[serde(rename = "from_point_hints")]
  from_point_hints: Option<Vec<String>>,
  /// More information for the `to_points` array. See `point_hints`
  #[serde(rename = "to_point_hints")]
  to_point_hints: Option<Vec<String>>,
  /// Specifies which arrays should be included in the response. Specify one or more of the following options 'weights', 'times', 'distances'. To specify more than one array use e.g. out_array=times&amp;out_array=distances. The units of the entries of distances are meters, of times are seconds and of weights is arbitrary and it can differ for different vehicles or versions of this API.
  #[serde(rename = "out_arrays")]
  out_arrays: Option<Vec<String>>,
  /// The vehicle for which the route should be calculated. Other vehicles are foot, small_truck etc, see here for the details.
  #[serde(rename = "vehicle")]
  vehicle: Option<String>
}

impl MatrixRequest {
  pub fn new() -> MatrixRequest {
    MatrixRequest {
      points: None,
      from_points: None,
      to_points: None,
      point_hints: None,
      from_point_hints: None,
      to_point_hints: None,
      out_arrays: None,
      vehicle: None
    }
  }

  pub fn set_points(&mut self, points: Vec<Vec<f64>>) {
    self.points = Some(points);
  }

  pub fn with_points(mut self, points: Vec<Vec<f64>>) -> MatrixRequest {
    self.points = Some(points);
    self
  }

  pub fn points(&self) -> Option<&Vec<Vec<f64>>> {
    self.points.as_ref()
  }

  pub fn reset_points(&mut self) {
    self.points = None;
  }

  pub fn set_from_points(&mut self, from_points: Vec<Vec<f64>>) {
    self.from_points = Some(from_points);
  }

  pub fn with_from_points(mut self, from_points: Vec<Vec<f64>>) -> MatrixRequest {
    self.from_points = Some(from_points);
    self
  }

  pub fn from_points(&self) -> Option<&Vec<Vec<f64>>> {
    self.from_points.as_ref()
  }

  pub fn reset_from_points(&mut self) {
    self.from_points = None;
  }

  pub fn set_to_points(&mut self, to_points: Vec<Vec<f64>>) {
    self.to_points = Some(to_points);
  }

  pub fn with_to_points(mut self, to_points: Vec<Vec<f64>>) -> MatrixRequest {
    self.to_points = Some(to_points);
    self
  }

  pub fn to_points(&self) -> Option<&Vec<Vec<f64>>> {
    self.to_points.as_ref()
  }

  pub fn reset_to_points(&mut self) {
    self.to_points = None;
  }

  pub fn set_point_hints(&mut self, point_hints: Vec<String>) {
    self.point_hints = Some(point_hints);
  }

  pub fn with_point_hints(mut self, point_hints: Vec<String>) -> MatrixRequest {
    self.point_hints = Some(point_hints);
    self
  }

  pub fn point_hints(&self) -> Option<&Vec<String>> {
    self.point_hints.as_ref()
  }

  pub fn reset_point_hints(&mut self) {
    self.point_hints = None;
  }

  pub fn set_from_point_hints(&mut self, from_point_hints: Vec<String>) {
    self.from_point_hints = Some(from_point_hints);
  }

  pub fn with_from_point_hints(mut self, from_point_hints: Vec<String>) -> MatrixRequest {
    self.from_point_hints = Some(from_point_hints);
    self
  }

  pub fn from_point_hints(&self) -> Option<&Vec<String>> {
    self.from_point_hints.as_ref()
  }

  pub fn reset_from_point_hints(&mut self) {
    self.from_point_hints = None;
  }

  pub fn set_to_point_hints(&mut self, to_point_hints: Vec<String>) {
    self.to_point_hints = Some(to_point_hints);
  }

  pub fn with_to_point_hints(mut self, to_point_hints: Vec<String>) -> MatrixRequest {
    self.to_point_hints = Some(to_point_hints);
    self
  }

  pub fn to_point_hints(&self) -> Option<&Vec<String>> {
    self.to_point_hints.as_ref()
  }

  pub fn reset_to_point_hints(&mut self) {
    self.to_point_hints = None;
  }

  pub fn set_out_arrays(&mut self, out_arrays: Vec<String>) {
    self.out_arrays = Some(out_arrays);
  }

  pub fn with_out_arrays(mut self, out_arrays: Vec<String>) -> MatrixRequest {
    self.out_arrays = Some(out_arrays);
    self
  }

  pub fn out_arrays(&self) -> Option<&Vec<String>> {
    self.out_arrays.as_ref()
  }

  pub fn reset_out_arrays(&mut self) {
    self.out_arrays = None;
  }

  pub fn set_vehicle(&mut self, vehicle: String) {
    self.vehicle = Some(vehicle);
  }

  pub fn with_vehicle(mut self, vehicle: String) -> MatrixRequest {
    self.vehicle = Some(vehicle);
    self
  }

  pub fn vehicle(&self) -> Option<&String> {
    self.vehicle.as_ref()
  }

  pub fn reset_vehicle(&mut self) {
    self.vehicle = None;
  }

}



