/* 
 * GraphHopper Directions API
 *
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct RoutePoint {
  #[serde(rename = "type")]
  _type: Option<String>,
  #[serde(rename = "coordinates")]
  coordinates: Option<Vec<Value>>
}

impl RoutePoint {
  pub fn new() -> RoutePoint {
    RoutePoint {
      _type: None,
      coordinates: None
    }
  }

  pub fn set__type(&mut self, _type: String) {
    self._type = Some(_type);
  }

  pub fn with__type(mut self, _type: String) -> RoutePoint {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&String> {
    self._type.as_ref()
  }

  pub fn reset__type(&mut self) {
    self._type = None;
  }

  pub fn set_coordinates(&mut self, coordinates: Vec<Value>) {
    self.coordinates = Some(coordinates);
  }

  pub fn with_coordinates(mut self, coordinates: Vec<Value>) -> RoutePoint {
    self.coordinates = Some(coordinates);
    self
  }

  pub fn coordinates(&self) -> Option<&Vec<Value>> {
    self.coordinates.as_ref()
  }

  pub fn reset_coordinates(&mut self) {
    self.coordinates = None;
  }

}



