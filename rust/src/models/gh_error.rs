/* 
 * GraphHopper Directions API
 *
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GhError {
  #[serde(rename = "code")]
  code: Option<i32>,
  #[serde(rename = "message")]
  message: Option<String>,
  #[serde(rename = "hints")]
  hints: Option<Vec<Value>>
}

impl GhError {
  pub fn new() -> GhError {
    GhError {
      code: None,
      message: None,
      hints: None
    }
  }

  pub fn set_code(&mut self, code: i32) {
    self.code = Some(code);
  }

  pub fn with_code(mut self, code: i32) -> GhError {
    self.code = Some(code);
    self
  }

  pub fn code(&self) -> Option<&i32> {
    self.code.as_ref()
  }

  pub fn reset_code(&mut self) {
    self.code = None;
  }

  pub fn set_message(&mut self, message: String) {
    self.message = Some(message);
  }

  pub fn with_message(mut self, message: String) -> GhError {
    self.message = Some(message);
    self
  }

  pub fn message(&self) -> Option<&String> {
    self.message.as_ref()
  }

  pub fn reset_message(&mut self) {
    self.message = None;
  }

  pub fn set_hints(&mut self, hints: Vec<Value>) {
    self.hints = Some(hints);
  }

  pub fn with_hints(mut self, hints: Vec<Value>) -> GhError {
    self.hints = Some(hints);
    self
  }

  pub fn hints(&self) -> Option<&Vec<Value>> {
    self.hints.as_ref()
  }

  pub fn reset_hints(&mut self) {
    self.hints = None;
  }

}



