/* 
 * GraphHopper Directions API
 *
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ResponseInfo : Additional information for your request

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ResponseInfo {
  #[serde(rename = "copyrights")]
  copyrights: Option<Vec<String>>,
  #[serde(rename = "took")]
  took: Option<f64>
}

impl ResponseInfo {
  /// Additional information for your request
  pub fn new() -> ResponseInfo {
    ResponseInfo {
      copyrights: None,
      took: None
    }
  }

  pub fn set_copyrights(&mut self, copyrights: Vec<String>) {
    self.copyrights = Some(copyrights);
  }

  pub fn with_copyrights(mut self, copyrights: Vec<String>) -> ResponseInfo {
    self.copyrights = Some(copyrights);
    self
  }

  pub fn copyrights(&self) -> Option<&Vec<String>> {
    self.copyrights.as_ref()
  }

  pub fn reset_copyrights(&mut self) {
    self.copyrights = None;
  }

  pub fn set_took(&mut self, took: f64) {
    self.took = Some(took);
  }

  pub fn with_took(mut self, took: f64) -> ResponseInfo {
    self.took = Some(took);
    self
  }

  pub fn took(&self) -> Option<&f64> {
    self.took.as_ref()
  }

  pub fn reset_took(&mut self) {
    self.took = None;
  }

}



