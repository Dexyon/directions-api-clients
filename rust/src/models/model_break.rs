/* 
 * GraphHopper Directions API
 *
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ModelBreak {
  /// earliest start of break
  #[serde(rename = "earliest")]
  earliest: Option<i64>,
  /// latest start of break
  #[serde(rename = "latest")]
  latest: Option<i64>,
  /// duration of break
  #[serde(rename = "duration")]
  duration: Option<i64>,
  /// max driving time without break
  #[serde(rename = "max_driving_time")]
  max_driving_time: Option<i64>,
  /// initial driving time, i.e. the time your driver has already spent for driving
  #[serde(rename = "initial_driving_time")]
  initial_driving_time: Option<i64>,
  /// array of splits
  #[serde(rename = "possible_split")]
  possible_split: Option<Vec<i64>>
}

impl ModelBreak {
  pub fn new() -> ModelBreak {
    ModelBreak {
      earliest: None,
      latest: None,
      duration: None,
      max_driving_time: None,
      initial_driving_time: None,
      possible_split: None
    }
  }

  pub fn set_earliest(&mut self, earliest: i64) {
    self.earliest = Some(earliest);
  }

  pub fn with_earliest(mut self, earliest: i64) -> ModelBreak {
    self.earliest = Some(earliest);
    self
  }

  pub fn earliest(&self) -> Option<&i64> {
    self.earliest.as_ref()
  }

  pub fn reset_earliest(&mut self) {
    self.earliest = None;
  }

  pub fn set_latest(&mut self, latest: i64) {
    self.latest = Some(latest);
  }

  pub fn with_latest(mut self, latest: i64) -> ModelBreak {
    self.latest = Some(latest);
    self
  }

  pub fn latest(&self) -> Option<&i64> {
    self.latest.as_ref()
  }

  pub fn reset_latest(&mut self) {
    self.latest = None;
  }

  pub fn set_duration(&mut self, duration: i64) {
    self.duration = Some(duration);
  }

  pub fn with_duration(mut self, duration: i64) -> ModelBreak {
    self.duration = Some(duration);
    self
  }

  pub fn duration(&self) -> Option<&i64> {
    self.duration.as_ref()
  }

  pub fn reset_duration(&mut self) {
    self.duration = None;
  }

  pub fn set_max_driving_time(&mut self, max_driving_time: i64) {
    self.max_driving_time = Some(max_driving_time);
  }

  pub fn with_max_driving_time(mut self, max_driving_time: i64) -> ModelBreak {
    self.max_driving_time = Some(max_driving_time);
    self
  }

  pub fn max_driving_time(&self) -> Option<&i64> {
    self.max_driving_time.as_ref()
  }

  pub fn reset_max_driving_time(&mut self) {
    self.max_driving_time = None;
  }

  pub fn set_initial_driving_time(&mut self, initial_driving_time: i64) {
    self.initial_driving_time = Some(initial_driving_time);
  }

  pub fn with_initial_driving_time(mut self, initial_driving_time: i64) -> ModelBreak {
    self.initial_driving_time = Some(initial_driving_time);
    self
  }

  pub fn initial_driving_time(&self) -> Option<&i64> {
    self.initial_driving_time.as_ref()
  }

  pub fn reset_initial_driving_time(&mut self) {
    self.initial_driving_time = None;
  }

  pub fn set_possible_split(&mut self, possible_split: Vec<i64>) {
    self.possible_split = Some(possible_split);
  }

  pub fn with_possible_split(mut self, possible_split: Vec<i64>) -> ModelBreak {
    self.possible_split = Some(possible_split);
    self
  }

  pub fn possible_split(&self) -> Option<&Vec<i64>> {
    self.possible_split.as_ref()
  }

  pub fn reset_possible_split(&mut self) {
    self.possible_split = None;
  }

}



