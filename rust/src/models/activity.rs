/* 
 * GraphHopper Directions API
 *
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Activity {
  /// type of activity
  #[serde(rename = "type")]
  _type: Option<String>,
  /// id referring to the underlying service or shipment, i.e. the shipment or service this activity belongs to
  #[serde(rename = "id")]
  id: Option<String>,
  /// id that refers to address
  #[serde(rename = "location_id")]
  location_id: Option<String>,
  /// arrival time at this activity in seconds
  #[serde(rename = "arr_time")]
  arr_time: Option<i64>,
  /// end time of and thus departure time at this activity
  #[serde(rename = "end_time")]
  end_time: Option<i64>,
  /// waiting time at this activity in seconds
  #[serde(rename = "waiting_time")]
  waiting_time: Option<i64>,
  /// cumulated distance from start to this activity in m
  #[serde(rename = "distance")]
  distance: Option<i64>,
  /// driving time of driver in seconds
  #[serde(rename = "driving_time")]
  driving_time: Option<i64>,
  /// Array with size/capacity dimensions before this activity
  #[serde(rename = "load_before")]
  load_before: Option<Vec<i32>>,
  /// Array with size/capacity dimensions after this activity
  #[serde(rename = "load_after")]
  load_after: Option<Vec<i32>>
}

impl Activity {
  pub fn new() -> Activity {
    Activity {
      _type: None,
      id: None,
      location_id: None,
      arr_time: None,
      end_time: None,
      waiting_time: None,
      distance: None,
      driving_time: None,
      load_before: None,
      load_after: None
    }
  }

  pub fn set__type(&mut self, _type: String) {
    self._type = Some(_type);
  }

  pub fn with__type(mut self, _type: String) -> Activity {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&String> {
    self._type.as_ref()
  }

  pub fn reset__type(&mut self) {
    self._type = None;
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> Activity {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_location_id(&mut self, location_id: String) {
    self.location_id = Some(location_id);
  }

  pub fn with_location_id(mut self, location_id: String) -> Activity {
    self.location_id = Some(location_id);
    self
  }

  pub fn location_id(&self) -> Option<&String> {
    self.location_id.as_ref()
  }

  pub fn reset_location_id(&mut self) {
    self.location_id = None;
  }

  pub fn set_arr_time(&mut self, arr_time: i64) {
    self.arr_time = Some(arr_time);
  }

  pub fn with_arr_time(mut self, arr_time: i64) -> Activity {
    self.arr_time = Some(arr_time);
    self
  }

  pub fn arr_time(&self) -> Option<&i64> {
    self.arr_time.as_ref()
  }

  pub fn reset_arr_time(&mut self) {
    self.arr_time = None;
  }

  pub fn set_end_time(&mut self, end_time: i64) {
    self.end_time = Some(end_time);
  }

  pub fn with_end_time(mut self, end_time: i64) -> Activity {
    self.end_time = Some(end_time);
    self
  }

  pub fn end_time(&self) -> Option<&i64> {
    self.end_time.as_ref()
  }

  pub fn reset_end_time(&mut self) {
    self.end_time = None;
  }

  pub fn set_waiting_time(&mut self, waiting_time: i64) {
    self.waiting_time = Some(waiting_time);
  }

  pub fn with_waiting_time(mut self, waiting_time: i64) -> Activity {
    self.waiting_time = Some(waiting_time);
    self
  }

  pub fn waiting_time(&self) -> Option<&i64> {
    self.waiting_time.as_ref()
  }

  pub fn reset_waiting_time(&mut self) {
    self.waiting_time = None;
  }

  pub fn set_distance(&mut self, distance: i64) {
    self.distance = Some(distance);
  }

  pub fn with_distance(mut self, distance: i64) -> Activity {
    self.distance = Some(distance);
    self
  }

  pub fn distance(&self) -> Option<&i64> {
    self.distance.as_ref()
  }

  pub fn reset_distance(&mut self) {
    self.distance = None;
  }

  pub fn set_driving_time(&mut self, driving_time: i64) {
    self.driving_time = Some(driving_time);
  }

  pub fn with_driving_time(mut self, driving_time: i64) -> Activity {
    self.driving_time = Some(driving_time);
    self
  }

  pub fn driving_time(&self) -> Option<&i64> {
    self.driving_time.as_ref()
  }

  pub fn reset_driving_time(&mut self) {
    self.driving_time = None;
  }

  pub fn set_load_before(&mut self, load_before: Vec<i32>) {
    self.load_before = Some(load_before);
  }

  pub fn with_load_before(mut self, load_before: Vec<i32>) -> Activity {
    self.load_before = Some(load_before);
    self
  }

  pub fn load_before(&self) -> Option<&Vec<i32>> {
    self.load_before.as_ref()
  }

  pub fn reset_load_before(&mut self) {
    self.load_before = None;
  }

  pub fn set_load_after(&mut self, load_after: Vec<i32>) {
    self.load_after = Some(load_after);
  }

  pub fn with_load_after(mut self, load_after: Vec<i32>) -> Activity {
    self.load_after = Some(load_after);
    self
  }

  pub fn load_after(&self) -> Option<&Vec<i32>> {
    self.load_after.as_ref()
  }

  pub fn reset_load_after(&mut self) {
    self.load_after = None;
  }

}



