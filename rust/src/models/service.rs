/* 
 * GraphHopper Directions API
 *
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Service {
  /// Unique identifier of service
  #[serde(rename = "id")]
  id: Option<String>,
  /// type of service
  #[serde(rename = "type")]
  _type: Option<String>,
  /// priority of service
  #[serde(rename = "priority")]
  priority: Option<i32>,
  /// name of service
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "address")]
  address: Option<::models::Address>,
  /// duration of service, i.e. time in seconds the corresponding activity takes
  #[serde(rename = "duration")]
  duration: Option<i64>,
  /// preparation time of service, e.g. search for a parking space. it only falls due if the location of previous activity differs from this location
  #[serde(rename = "preparation_time")]
  preparation_time: Option<i64>,
  /// array of time windows. currently, only a single time window is allowed
  #[serde(rename = "time_windows")]
  time_windows: Option<Vec<::models::TimeWindow>>,
  /// array of capacity dimensions
  #[serde(rename = "size")]
  size: Option<Vec<i32>>,
  /// array of required skills
  #[serde(rename = "required_skills")]
  required_skills: Option<Vec<String>>,
  /// array of allowed vehicle ids
  #[serde(rename = "allowed_vehicles")]
  allowed_vehicles: Option<Vec<String>>,
  /// array of disallowed vehicle ids
  #[serde(rename = "disallowed_vehicles")]
  disallowed_vehicles: Option<Vec<String>>,
  /// max time service can stay in vehicle
  #[serde(rename = "max_time_in_vehicle")]
  max_time_in_vehicle: Option<i64>
}

impl Service {
  pub fn new() -> Service {
    Service {
      id: None,
      _type: None,
      priority: None,
      name: None,
      address: None,
      duration: None,
      preparation_time: None,
      time_windows: None,
      size: None,
      required_skills: None,
      allowed_vehicles: None,
      disallowed_vehicles: None,
      max_time_in_vehicle: None
    }
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> Service {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set__type(&mut self, _type: String) {
    self._type = Some(_type);
  }

  pub fn with__type(mut self, _type: String) -> Service {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&String> {
    self._type.as_ref()
  }

  pub fn reset__type(&mut self) {
    self._type = None;
  }

  pub fn set_priority(&mut self, priority: i32) {
    self.priority = Some(priority);
  }

  pub fn with_priority(mut self, priority: i32) -> Service {
    self.priority = Some(priority);
    self
  }

  pub fn priority(&self) -> Option<&i32> {
    self.priority.as_ref()
  }

  pub fn reset_priority(&mut self) {
    self.priority = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> Service {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_address(&mut self, address: ::models::Address) {
    self.address = Some(address);
  }

  pub fn with_address(mut self, address: ::models::Address) -> Service {
    self.address = Some(address);
    self
  }

  pub fn address(&self) -> Option<&::models::Address> {
    self.address.as_ref()
  }

  pub fn reset_address(&mut self) {
    self.address = None;
  }

  pub fn set_duration(&mut self, duration: i64) {
    self.duration = Some(duration);
  }

  pub fn with_duration(mut self, duration: i64) -> Service {
    self.duration = Some(duration);
    self
  }

  pub fn duration(&self) -> Option<&i64> {
    self.duration.as_ref()
  }

  pub fn reset_duration(&mut self) {
    self.duration = None;
  }

  pub fn set_preparation_time(&mut self, preparation_time: i64) {
    self.preparation_time = Some(preparation_time);
  }

  pub fn with_preparation_time(mut self, preparation_time: i64) -> Service {
    self.preparation_time = Some(preparation_time);
    self
  }

  pub fn preparation_time(&self) -> Option<&i64> {
    self.preparation_time.as_ref()
  }

  pub fn reset_preparation_time(&mut self) {
    self.preparation_time = None;
  }

  pub fn set_time_windows(&mut self, time_windows: Vec<::models::TimeWindow>) {
    self.time_windows = Some(time_windows);
  }

  pub fn with_time_windows(mut self, time_windows: Vec<::models::TimeWindow>) -> Service {
    self.time_windows = Some(time_windows);
    self
  }

  pub fn time_windows(&self) -> Option<&Vec<::models::TimeWindow>> {
    self.time_windows.as_ref()
  }

  pub fn reset_time_windows(&mut self) {
    self.time_windows = None;
  }

  pub fn set_size(&mut self, size: Vec<i32>) {
    self.size = Some(size);
  }

  pub fn with_size(mut self, size: Vec<i32>) -> Service {
    self.size = Some(size);
    self
  }

  pub fn size(&self) -> Option<&Vec<i32>> {
    self.size.as_ref()
  }

  pub fn reset_size(&mut self) {
    self.size = None;
  }

  pub fn set_required_skills(&mut self, required_skills: Vec<String>) {
    self.required_skills = Some(required_skills);
  }

  pub fn with_required_skills(mut self, required_skills: Vec<String>) -> Service {
    self.required_skills = Some(required_skills);
    self
  }

  pub fn required_skills(&self) -> Option<&Vec<String>> {
    self.required_skills.as_ref()
  }

  pub fn reset_required_skills(&mut self) {
    self.required_skills = None;
  }

  pub fn set_allowed_vehicles(&mut self, allowed_vehicles: Vec<String>) {
    self.allowed_vehicles = Some(allowed_vehicles);
  }

  pub fn with_allowed_vehicles(mut self, allowed_vehicles: Vec<String>) -> Service {
    self.allowed_vehicles = Some(allowed_vehicles);
    self
  }

  pub fn allowed_vehicles(&self) -> Option<&Vec<String>> {
    self.allowed_vehicles.as_ref()
  }

  pub fn reset_allowed_vehicles(&mut self) {
    self.allowed_vehicles = None;
  }

  pub fn set_disallowed_vehicles(&mut self, disallowed_vehicles: Vec<String>) {
    self.disallowed_vehicles = Some(disallowed_vehicles);
  }

  pub fn with_disallowed_vehicles(mut self, disallowed_vehicles: Vec<String>) -> Service {
    self.disallowed_vehicles = Some(disallowed_vehicles);
    self
  }

  pub fn disallowed_vehicles(&self) -> Option<&Vec<String>> {
    self.disallowed_vehicles.as_ref()
  }

  pub fn reset_disallowed_vehicles(&mut self) {
    self.disallowed_vehicles = None;
  }

  pub fn set_max_time_in_vehicle(&mut self, max_time_in_vehicle: i64) {
    self.max_time_in_vehicle = Some(max_time_in_vehicle);
  }

  pub fn with_max_time_in_vehicle(mut self, max_time_in_vehicle: i64) -> Service {
    self.max_time_in_vehicle = Some(max_time_in_vehicle);
    self
  }

  pub fn max_time_in_vehicle(&self) -> Option<&i64> {
    self.max_time_in_vehicle.as_ref()
  }

  pub fn reset_max_time_in_vehicle(&mut self) {
    self.max_time_in_vehicle = None;
  }

}



