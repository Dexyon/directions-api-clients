/* 
 * GraphHopper Directions API
 *
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Algorithm {
  #[serde(rename = "problem_type")]
  problem_type: Option<String>,
  #[serde(rename = "objective")]
  objective: Option<String>
}

impl Algorithm {
  pub fn new() -> Algorithm {
    Algorithm {
      problem_type: None,
      objective: None
    }
  }

  pub fn set_problem_type(&mut self, problem_type: String) {
    self.problem_type = Some(problem_type);
  }

  pub fn with_problem_type(mut self, problem_type: String) -> Algorithm {
    self.problem_type = Some(problem_type);
    self
  }

  pub fn problem_type(&self) -> Option<&String> {
    self.problem_type.as_ref()
  }

  pub fn reset_problem_type(&mut self) {
    self.problem_type = None;
  }

  pub fn set_objective(&mut self, objective: String) {
    self.objective = Some(objective);
  }

  pub fn with_objective(mut self, objective: String) -> Algorithm {
    self.objective = Some(objective);
    self
  }

  pub fn objective(&self) -> Option<&String> {
    self.objective.as_ref()
  }

  pub fn reset_objective(&mut self) {
    self.objective = None;
  }

}



