/* 
 * GraphHopper Directions API
 *
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Stop {
  #[serde(rename = "address")]
  address: Option<::models::Address>,
  /// duration of stop, i.e. time in seconds the corresponding activity takes
  #[serde(rename = "duration")]
  duration: Option<i64>,
  /// preparation time of service, e.g. search for a parking space. it only falls due if the location of previous activity differs from this location
  #[serde(rename = "preparation_time")]
  preparation_time: Option<i64>,
  /// array of time windows. currently, only a single time window is allowed
  #[serde(rename = "time_windows")]
  time_windows: Option<Vec<::models::TimeWindow>>
}

impl Stop {
  pub fn new() -> Stop {
    Stop {
      address: None,
      duration: None,
      preparation_time: None,
      time_windows: None
    }
  }

  pub fn set_address(&mut self, address: ::models::Address) {
    self.address = Some(address);
  }

  pub fn with_address(mut self, address: ::models::Address) -> Stop {
    self.address = Some(address);
    self
  }

  pub fn address(&self) -> Option<&::models::Address> {
    self.address.as_ref()
  }

  pub fn reset_address(&mut self) {
    self.address = None;
  }

  pub fn set_duration(&mut self, duration: i64) {
    self.duration = Some(duration);
  }

  pub fn with_duration(mut self, duration: i64) -> Stop {
    self.duration = Some(duration);
    self
  }

  pub fn duration(&self) -> Option<&i64> {
    self.duration.as_ref()
  }

  pub fn reset_duration(&mut self) {
    self.duration = None;
  }

  pub fn set_preparation_time(&mut self, preparation_time: i64) {
    self.preparation_time = Some(preparation_time);
  }

  pub fn with_preparation_time(mut self, preparation_time: i64) -> Stop {
    self.preparation_time = Some(preparation_time);
    self
  }

  pub fn preparation_time(&self) -> Option<&i64> {
    self.preparation_time.as_ref()
  }

  pub fn reset_preparation_time(&mut self) {
    self.preparation_time = None;
  }

  pub fn set_time_windows(&mut self, time_windows: Vec<::models::TimeWindow>) {
    self.time_windows = Some(time_windows);
  }

  pub fn with_time_windows(mut self, time_windows: Vec<::models::TimeWindow>) -> Stop {
    self.time_windows = Some(time_windows);
    self
  }

  pub fn time_windows(&self) -> Option<&Vec<::models::TimeWindow>> {
    self.time_windows.as_ref()
  }

  pub fn reset_time_windows(&mut self) {
    self.time_windows = None;
  }

}



