/* 
 * GraphHopper Directions API
 *
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CostMatrix {
  /// type of cost matrix, currently default or google are supported
  #[serde(rename = "type")]
  _type: Option<String>,
  /// URL of matrix service
  #[serde(rename = "url")]
  url: Option<String>,
  #[serde(rename = "location_ids")]
  location_ids: Option<Vec<String>>,
  #[serde(rename = "data")]
  data: Option<::models::CostMatrixData>,
  /// vehicle profile or empty if catch all fallback
  #[serde(rename = "profile")]
  profile: Option<String>
}

impl CostMatrix {
  pub fn new() -> CostMatrix {
    CostMatrix {
      _type: None,
      url: None,
      location_ids: None,
      data: None,
      profile: None
    }
  }

  pub fn set__type(&mut self, _type: String) {
    self._type = Some(_type);
  }

  pub fn with__type(mut self, _type: String) -> CostMatrix {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&String> {
    self._type.as_ref()
  }

  pub fn reset__type(&mut self) {
    self._type = None;
  }

  pub fn set_url(&mut self, url: String) {
    self.url = Some(url);
  }

  pub fn with_url(mut self, url: String) -> CostMatrix {
    self.url = Some(url);
    self
  }

  pub fn url(&self) -> Option<&String> {
    self.url.as_ref()
  }

  pub fn reset_url(&mut self) {
    self.url = None;
  }

  pub fn set_location_ids(&mut self, location_ids: Vec<String>) {
    self.location_ids = Some(location_ids);
  }

  pub fn with_location_ids(mut self, location_ids: Vec<String>) -> CostMatrix {
    self.location_ids = Some(location_ids);
    self
  }

  pub fn location_ids(&self) -> Option<&Vec<String>> {
    self.location_ids.as_ref()
  }

  pub fn reset_location_ids(&mut self) {
    self.location_ids = None;
  }

  pub fn set_data(&mut self, data: ::models::CostMatrixData) {
    self.data = Some(data);
  }

  pub fn with_data(mut self, data: ::models::CostMatrixData) -> CostMatrix {
    self.data = Some(data);
    self
  }

  pub fn data(&self) -> Option<&::models::CostMatrixData> {
    self.data.as_ref()
  }

  pub fn reset_data(&mut self) {
    self.data = None;
  }

  pub fn set_profile(&mut self, profile: String) {
    self.profile = Some(profile);
  }

  pub fn with_profile(mut self, profile: String) -> CostMatrix {
    self.profile = Some(profile);
    self
  }

  pub fn profile(&self) -> Option<&String> {
    self.profile.as_ref()
  }

  pub fn reset_profile(&mut self) {
    self.profile = None;
  }

}



