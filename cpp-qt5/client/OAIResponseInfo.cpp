/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIResponseInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIResponseInfo::OAIResponseInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIResponseInfo::OAIResponseInfo() {
    init();
}

OAIResponseInfo::~OAIResponseInfo() {
    this->cleanup();
}

void
OAIResponseInfo::init() {
    copyrights = new QList<QString*>();
    m_copyrights_isSet = false;
    took = 0.0;
    m_took_isSet = false;
}

void
OAIResponseInfo::cleanup() {
    if(copyrights != nullptr) { 
        auto arr = copyrights;
        for(auto o: *arr) { 
            delete o;
        }
        delete copyrights;
    }

}

OAIResponseInfo*
OAIResponseInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIResponseInfo::fromJsonObject(QJsonObject pJson) {
    
    ::OpenAPI::setValue(&copyrights, pJson["copyrights"], "QList", "QString");
    ::OpenAPI::setValue(&took, pJson["took"], "double", "");
    
}

QString
OAIResponseInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIResponseInfo::asJsonObject() {
    QJsonObject obj;
    if(copyrights->size() > 0){
        toJsonArray((QList<void*>*)copyrights, obj, "copyrights", "QString");
    }
    if(m_took_isSet){
        obj.insert("took", QJsonValue(took));
    }

    return obj;
}

QList<QString*>*
OAIResponseInfo::getCopyrights() {
    return copyrights;
}
void
OAIResponseInfo::setCopyrights(QList<QString*>* copyrights) {
    this->copyrights = copyrights;
    this->m_copyrights_isSet = true;
}

double
OAIResponseInfo::getTook() {
    return took;
}
void
OAIResponseInfo::setTook(double took) {
    this->took = took;
    this->m_took_isSet = true;
}


bool
OAIResponseInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(copyrights->size() > 0){ isObjectUpdated = true; break;}
        if(m_took_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

