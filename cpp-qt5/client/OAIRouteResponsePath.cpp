/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIRouteResponsePath.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIRouteResponsePath::OAIRouteResponsePath(QString json) {
    init();
    this->fromJson(json);
}

OAIRouteResponsePath::OAIRouteResponsePath() {
    init();
}

OAIRouteResponsePath::~OAIRouteResponsePath() {
    this->cleanup();
}

void
OAIRouteResponsePath::init() {
    distance = 0.0;
    m_distance_isSet = false;
    time = 0L;
    m_time_isSet = false;
    ascend = 0.0;
    m_ascend_isSet = false;
    descend = 0.0;
    m_descend_isSet = false;
    points = new OAIResponseCoordinates();
    m_points_isSet = false;
    points_encoded = false;
    m_points_encoded_isSet = false;
    bbox = new QList<double>();
    m_bbox_isSet = false;
    snapped_waypoints = new OAIResponseCoordinates();
    m_snapped_waypoints_isSet = false;
    instructions = new OAIResponseInstructions();
    m_instructions_isSet = false;
    details = NULL;
    m_details_isSet = false;
}

void
OAIRouteResponsePath::cleanup() {




    if(points != nullptr) { 
        delete points;
    }


    if(bbox != nullptr) { 
        delete bbox;
    }
    if(snapped_waypoints != nullptr) { 
        delete snapped_waypoints;
    }
    if(instructions != nullptr) { 
        delete instructions;
    }
    if(details != nullptr) { 
        delete details;
    }
}

OAIRouteResponsePath*
OAIRouteResponsePath::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIRouteResponsePath::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&distance, pJson["distance"], "double", "");
    
    ::OpenAPI::setValue(&time, pJson["time"], "qint64", "");
    
    ::OpenAPI::setValue(&ascend, pJson["ascend"], "double", "");
    
    ::OpenAPI::setValue(&descend, pJson["descend"], "double", "");
    
    ::OpenAPI::setValue(&points, pJson["points"], "OAIResponseCoordinates", "OAIResponseCoordinates");
    
    ::OpenAPI::setValue(&points_encoded, pJson["points_encoded"], "bool", "");
    
    
    ::OpenAPI::setValue(&bbox, pJson["bbox"], "QList", "double");
    ::OpenAPI::setValue(&snapped_waypoints, pJson["snapped_waypoints"], "OAIResponseCoordinates", "OAIResponseCoordinates");
    
    ::OpenAPI::setValue(&instructions, pJson["instructions"], "OAIResponseInstructions", "OAIResponseInstructions");
    
    ::OpenAPI::setValue(&details, pJson["details"], "OAIObject", "OAIObject");
    
}

QString
OAIRouteResponsePath::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIRouteResponsePath::asJsonObject() {
    QJsonObject obj;
    if(m_distance_isSet){
        obj.insert("distance", QJsonValue(distance));
    }
    if(m_time_isSet){
        obj.insert("time", QJsonValue(time));
    }
    if(m_ascend_isSet){
        obj.insert("ascend", QJsonValue(ascend));
    }
    if(m_descend_isSet){
        obj.insert("descend", QJsonValue(descend));
    }
    if((points != nullptr) && (points->isSet())){
        toJsonValue(QString("points"), points, obj, QString("OAIResponseCoordinates"));
    }
    if(m_points_encoded_isSet){
        obj.insert("points_encoded", QJsonValue(points_encoded));
    }
    if(bbox->size() > 0){
        toJsonArray((QList<void*>*)bbox, obj, "bbox", "");
    }
    if((snapped_waypoints != nullptr) && (snapped_waypoints->isSet())){
        toJsonValue(QString("snapped_waypoints"), snapped_waypoints, obj, QString("OAIResponseCoordinates"));
    }
    if((instructions != nullptr) && (instructions->isSet())){
        toJsonValue(QString("instructions"), instructions, obj, QString("OAIResponseInstructions"));
    }
    if((details != nullptr) && (details->isSet())){
        toJsonValue(QString("details"), details, obj, QString("OAIObject"));
    }

    return obj;
}

double
OAIRouteResponsePath::getDistance() {
    return distance;
}
void
OAIRouteResponsePath::setDistance(double distance) {
    this->distance = distance;
    this->m_distance_isSet = true;
}

qint64
OAIRouteResponsePath::getTime() {
    return time;
}
void
OAIRouteResponsePath::setTime(qint64 time) {
    this->time = time;
    this->m_time_isSet = true;
}

double
OAIRouteResponsePath::getAscend() {
    return ascend;
}
void
OAIRouteResponsePath::setAscend(double ascend) {
    this->ascend = ascend;
    this->m_ascend_isSet = true;
}

double
OAIRouteResponsePath::getDescend() {
    return descend;
}
void
OAIRouteResponsePath::setDescend(double descend) {
    this->descend = descend;
    this->m_descend_isSet = true;
}

OAIResponseCoordinates*
OAIRouteResponsePath::getPoints() {
    return points;
}
void
OAIRouteResponsePath::setPoints(OAIResponseCoordinates* points) {
    this->points = points;
    this->m_points_isSet = true;
}

bool
OAIRouteResponsePath::isPointsEncoded() {
    return points_encoded;
}
void
OAIRouteResponsePath::setPointsEncoded(bool points_encoded) {
    this->points_encoded = points_encoded;
    this->m_points_encoded_isSet = true;
}

QList<double>*
OAIRouteResponsePath::getBbox() {
    return bbox;
}
void
OAIRouteResponsePath::setBbox(QList<double>* bbox) {
    this->bbox = bbox;
    this->m_bbox_isSet = true;
}

OAIResponseCoordinates*
OAIRouteResponsePath::getSnappedWaypoints() {
    return snapped_waypoints;
}
void
OAIRouteResponsePath::setSnappedWaypoints(OAIResponseCoordinates* snapped_waypoints) {
    this->snapped_waypoints = snapped_waypoints;
    this->m_snapped_waypoints_isSet = true;
}

OAIResponseInstructions*
OAIRouteResponsePath::getInstructions() {
    return instructions;
}
void
OAIRouteResponsePath::setInstructions(OAIResponseInstructions* instructions) {
    this->instructions = instructions;
    this->m_instructions_isSet = true;
}

OAIObject*
OAIRouteResponsePath::getDetails() {
    return details;
}
void
OAIRouteResponsePath::setDetails(OAIObject* details) {
    this->details = details;
    this->m_details_isSet = true;
}


bool
OAIRouteResponsePath::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_distance_isSet){ isObjectUpdated = true; break;}
        if(m_time_isSet){ isObjectUpdated = true; break;}
        if(m_ascend_isSet){ isObjectUpdated = true; break;}
        if(m_descend_isSet){ isObjectUpdated = true; break;}
        if(points != nullptr && points->isSet()){ isObjectUpdated = true; break;}
        if(m_points_encoded_isSet){ isObjectUpdated = true; break;}
        if(m_bbox_isSet){ isObjectUpdated = true; break;}
        if(bbox->size() > 0){ isObjectUpdated = true; break;}
        if(snapped_waypoints != nullptr && snapped_waypoints->isSet()){ isObjectUpdated = true; break;}
        if(instructions != nullptr && instructions->isSet()){ isObjectUpdated = true; break;}
        if(details != nullptr && details->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

