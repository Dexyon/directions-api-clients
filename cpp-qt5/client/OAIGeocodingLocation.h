/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGeocodingLocation.h
 *
 * 
 */

#ifndef OAIGeocodingLocation_H_
#define OAIGeocodingLocation_H_

#include <QJsonObject>


#include "OAIOAIGeocodingPoint.h"
#include <QString>

#include "OAIObject.h"

namespace OpenAPI {

class OAIGeocodingLocation: public OAIObject {
public:
    OAIGeocodingLocation();
    OAIGeocodingLocation(QString json);
    ~OAIGeocodingLocation();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIGeocodingLocation* fromJson(QString jsonString) override;

    OAIGeocodingPoint* getPoint();
    void setPoint(OAIGeocodingPoint* point);

    QString* getOsmId();
    void setOsmId(QString* osm_id);

    QString* getOsmType();
    void setOsmType(QString* osm_type);

    QString* getOsmKey();
    void setOsmKey(QString* osm_key);

    QString* getName();
    void setName(QString* name);

    QString* getCountry();
    void setCountry(QString* country);

    QString* getCity();
    void setCity(QString* city);

    QString* getState();
    void setState(QString* state);

    QString* getStreet();
    void setStreet(QString* street);

    QString* getHousenumber();
    void setHousenumber(QString* housenumber);

    QString* getPostcode();
    void setPostcode(QString* postcode);


    virtual bool isSet() override;

private:
    OAIGeocodingPoint* point;
    bool m_point_isSet;

    QString* osm_id;
    bool m_osm_id_isSet;

    QString* osm_type;
    bool m_osm_type_isSet;

    QString* osm_key;
    bool m_osm_key_isSet;

    QString* name;
    bool m_name_isSet;

    QString* country;
    bool m_country_isSet;

    QString* city;
    bool m_city_isSet;

    QString* state;
    bool m_state_isSet;

    QString* street;
    bool m_street_isSet;

    QString* housenumber;
    bool m_housenumber_isSet;

    QString* postcode;
    bool m_postcode_isSet;

};

}

#endif /* OAIGeocodingLocation_H_ */
