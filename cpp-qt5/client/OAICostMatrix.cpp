/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAICostMatrix.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAICostMatrix::OAICostMatrix(QString json) {
    init();
    this->fromJson(json);
}

OAICostMatrix::OAICostMatrix() {
    init();
}

OAICostMatrix::~OAICostMatrix() {
    this->cleanup();
}

void
OAICostMatrix::init() {
    type = new QString("");
    m_type_isSet = false;
    url = new QString("");
    m_url_isSet = false;
    location_ids = new QList<QString*>();
    m_location_ids_isSet = false;
    data = NULL;
    m_data_isSet = false;
    profile = new QString("");
    m_profile_isSet = false;
}

void
OAICostMatrix::cleanup() {
    if(type != nullptr) { 
        delete type;
    }
    if(url != nullptr) { 
        delete url;
    }
    if(location_ids != nullptr) { 
        auto arr = location_ids;
        for(auto o: *arr) { 
            delete o;
        }
        delete location_ids;
    }
    if(data != nullptr) { 
        delete data;
    }
    if(profile != nullptr) { 
        delete profile;
    }
}

OAICostMatrix*
OAICostMatrix::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAICostMatrix::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&type, pJson["type"], "QString", "QString");
    
    ::OpenAPI::setValue(&url, pJson["url"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&location_ids, pJson["location_ids"], "QList", "QString");
    ::OpenAPI::setValue(&data, pJson["data"], "OAIObject", "OAIObject");
    
    ::OpenAPI::setValue(&profile, pJson["profile"], "QString", "QString");
    
}

QString
OAICostMatrix::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAICostMatrix::asJsonObject() {
    QJsonObject obj;
    if(type != nullptr && *type != QString("")){
        toJsonValue(QString("type"), type, obj, QString("QString"));
    }
    if(url != nullptr && *url != QString("")){
        toJsonValue(QString("url"), url, obj, QString("QString"));
    }
    if(location_ids->size() > 0){
        toJsonArray((QList<void*>*)location_ids, obj, "location_ids", "QString");
    }
    if((data != nullptr) && (data->isSet())){
        toJsonValue(QString("data"), data, obj, QString("OAIObject"));
    }
    if(profile != nullptr && *profile != QString("")){
        toJsonValue(QString("profile"), profile, obj, QString("QString"));
    }

    return obj;
}

QString*
OAICostMatrix::getType() {
    return type;
}
void
OAICostMatrix::setType(QString* type) {
    this->type = type;
    this->m_type_isSet = true;
}

QString*
OAICostMatrix::getUrl() {
    return url;
}
void
OAICostMatrix::setUrl(QString* url) {
    this->url = url;
    this->m_url_isSet = true;
}

QList<QString*>*
OAICostMatrix::getLocationIds() {
    return location_ids;
}
void
OAICostMatrix::setLocationIds(QList<QString*>* location_ids) {
    this->location_ids = location_ids;
    this->m_location_ids_isSet = true;
}

OAIObject*
OAICostMatrix::getData() {
    return data;
}
void
OAICostMatrix::setData(OAIObject* data) {
    this->data = data;
    this->m_data_isSet = true;
}

QString*
OAICostMatrix::getProfile() {
    return profile;
}
void
OAICostMatrix::setProfile(QString* profile) {
    this->profile = profile;
    this->m_profile_isSet = true;
}


bool
OAICostMatrix::isSet(){
    bool isObjectUpdated = false;
    do{
        if(type != nullptr && *type != QString("")){ isObjectUpdated = true; break;}
        if(url != nullptr && *url != QString("")){ isObjectUpdated = true; break;}
        if(location_ids->size() > 0){ isObjectUpdated = true; break;}
        if(data != nullptr && data->isSet()){ isObjectUpdated = true; break;}
        if(profile != nullptr && *profile != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

