/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIGeocodingLocation.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIGeocodingLocation::OAIGeocodingLocation(QString json) {
    init();
    this->fromJson(json);
}

OAIGeocodingLocation::OAIGeocodingLocation() {
    init();
}

OAIGeocodingLocation::~OAIGeocodingLocation() {
    this->cleanup();
}

void
OAIGeocodingLocation::init() {
    point = new OAIGeocodingPoint();
    m_point_isSet = false;
    osm_id = new QString("");
    m_osm_id_isSet = false;
    osm_type = new QString("");
    m_osm_type_isSet = false;
    osm_key = new QString("");
    m_osm_key_isSet = false;
    name = new QString("");
    m_name_isSet = false;
    country = new QString("");
    m_country_isSet = false;
    city = new QString("");
    m_city_isSet = false;
    state = new QString("");
    m_state_isSet = false;
    street = new QString("");
    m_street_isSet = false;
    housenumber = new QString("");
    m_housenumber_isSet = false;
    postcode = new QString("");
    m_postcode_isSet = false;
}

void
OAIGeocodingLocation::cleanup() {
    if(point != nullptr) { 
        delete point;
    }
    if(osm_id != nullptr) { 
        delete osm_id;
    }
    if(osm_type != nullptr) { 
        delete osm_type;
    }
    if(osm_key != nullptr) { 
        delete osm_key;
    }
    if(name != nullptr) { 
        delete name;
    }
    if(country != nullptr) { 
        delete country;
    }
    if(city != nullptr) { 
        delete city;
    }
    if(state != nullptr) { 
        delete state;
    }
    if(street != nullptr) { 
        delete street;
    }
    if(housenumber != nullptr) { 
        delete housenumber;
    }
    if(postcode != nullptr) { 
        delete postcode;
    }
}

OAIGeocodingLocation*
OAIGeocodingLocation::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIGeocodingLocation::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&point, pJson["point"], "OAIGeocodingPoint", "OAIGeocodingPoint");
    
    ::OpenAPI::setValue(&osm_id, pJson["osm_id"], "QString", "QString");
    
    ::OpenAPI::setValue(&osm_type, pJson["osm_type"], "QString", "QString");
    
    ::OpenAPI::setValue(&osm_key, pJson["osm_key"], "QString", "QString");
    
    ::OpenAPI::setValue(&name, pJson["name"], "QString", "QString");
    
    ::OpenAPI::setValue(&country, pJson["country"], "QString", "QString");
    
    ::OpenAPI::setValue(&city, pJson["city"], "QString", "QString");
    
    ::OpenAPI::setValue(&state, pJson["state"], "QString", "QString");
    
    ::OpenAPI::setValue(&street, pJson["street"], "QString", "QString");
    
    ::OpenAPI::setValue(&housenumber, pJson["housenumber"], "QString", "QString");
    
    ::OpenAPI::setValue(&postcode, pJson["postcode"], "QString", "QString");
    
}

QString
OAIGeocodingLocation::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIGeocodingLocation::asJsonObject() {
    QJsonObject obj;
    if((point != nullptr) && (point->isSet())){
        toJsonValue(QString("point"), point, obj, QString("OAIGeocodingPoint"));
    }
    if(osm_id != nullptr && *osm_id != QString("")){
        toJsonValue(QString("osm_id"), osm_id, obj, QString("QString"));
    }
    if(osm_type != nullptr && *osm_type != QString("")){
        toJsonValue(QString("osm_type"), osm_type, obj, QString("QString"));
    }
    if(osm_key != nullptr && *osm_key != QString("")){
        toJsonValue(QString("osm_key"), osm_key, obj, QString("QString"));
    }
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }
    if(country != nullptr && *country != QString("")){
        toJsonValue(QString("country"), country, obj, QString("QString"));
    }
    if(city != nullptr && *city != QString("")){
        toJsonValue(QString("city"), city, obj, QString("QString"));
    }
    if(state != nullptr && *state != QString("")){
        toJsonValue(QString("state"), state, obj, QString("QString"));
    }
    if(street != nullptr && *street != QString("")){
        toJsonValue(QString("street"), street, obj, QString("QString"));
    }
    if(housenumber != nullptr && *housenumber != QString("")){
        toJsonValue(QString("housenumber"), housenumber, obj, QString("QString"));
    }
    if(postcode != nullptr && *postcode != QString("")){
        toJsonValue(QString("postcode"), postcode, obj, QString("QString"));
    }

    return obj;
}

OAIGeocodingPoint*
OAIGeocodingLocation::getPoint() {
    return point;
}
void
OAIGeocodingLocation::setPoint(OAIGeocodingPoint* point) {
    this->point = point;
    this->m_point_isSet = true;
}

QString*
OAIGeocodingLocation::getOsmId() {
    return osm_id;
}
void
OAIGeocodingLocation::setOsmId(QString* osm_id) {
    this->osm_id = osm_id;
    this->m_osm_id_isSet = true;
}

QString*
OAIGeocodingLocation::getOsmType() {
    return osm_type;
}
void
OAIGeocodingLocation::setOsmType(QString* osm_type) {
    this->osm_type = osm_type;
    this->m_osm_type_isSet = true;
}

QString*
OAIGeocodingLocation::getOsmKey() {
    return osm_key;
}
void
OAIGeocodingLocation::setOsmKey(QString* osm_key) {
    this->osm_key = osm_key;
    this->m_osm_key_isSet = true;
}

QString*
OAIGeocodingLocation::getName() {
    return name;
}
void
OAIGeocodingLocation::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

QString*
OAIGeocodingLocation::getCountry() {
    return country;
}
void
OAIGeocodingLocation::setCountry(QString* country) {
    this->country = country;
    this->m_country_isSet = true;
}

QString*
OAIGeocodingLocation::getCity() {
    return city;
}
void
OAIGeocodingLocation::setCity(QString* city) {
    this->city = city;
    this->m_city_isSet = true;
}

QString*
OAIGeocodingLocation::getState() {
    return state;
}
void
OAIGeocodingLocation::setState(QString* state) {
    this->state = state;
    this->m_state_isSet = true;
}

QString*
OAIGeocodingLocation::getStreet() {
    return street;
}
void
OAIGeocodingLocation::setStreet(QString* street) {
    this->street = street;
    this->m_street_isSet = true;
}

QString*
OAIGeocodingLocation::getHousenumber() {
    return housenumber;
}
void
OAIGeocodingLocation::setHousenumber(QString* housenumber) {
    this->housenumber = housenumber;
    this->m_housenumber_isSet = true;
}

QString*
OAIGeocodingLocation::getPostcode() {
    return postcode;
}
void
OAIGeocodingLocation::setPostcode(QString* postcode) {
    this->postcode = postcode;
    this->m_postcode_isSet = true;
}


bool
OAIGeocodingLocation::isSet(){
    bool isObjectUpdated = false;
    do{
        if(point != nullptr && point->isSet()){ isObjectUpdated = true; break;}
        if(osm_id != nullptr && *osm_id != QString("")){ isObjectUpdated = true; break;}
        if(osm_type != nullptr && *osm_type != QString("")){ isObjectUpdated = true; break;}
        if(osm_key != nullptr && *osm_key != QString("")){ isObjectUpdated = true; break;}
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
        if(country != nullptr && *country != QString("")){ isObjectUpdated = true; break;}
        if(city != nullptr && *city != QString("")){ isObjectUpdated = true; break;}
        if(state != nullptr && *state != QString("")){ isObjectUpdated = true; break;}
        if(street != nullptr && *street != QString("")){ isObjectUpdated = true; break;}
        if(housenumber != nullptr && *housenumber != QString("")){ isObjectUpdated = true; break;}
        if(postcode != nullptr && *postcode != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

