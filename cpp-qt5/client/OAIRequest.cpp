/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIRequest.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIRequest::OAIRequest(QString json) {
    init();
    this->fromJson(json);
}

OAIRequest::OAIRequest() {
    init();
}

OAIRequest::~OAIRequest() {
    this->cleanup();
}

void
OAIRequest::init() {
    vehicles = new QList<OAIVehicle*>();
    m_vehicles_isSet = false;
    vehicle_types = new QList<OAIVehicleType*>();
    m_vehicle_types_isSet = false;
    services = new QList<OAIService*>();
    m_services_isSet = false;
    shipments = new QList<OAIShipment*>();
    m_shipments_isSet = false;
    relations = new QList<OAIRelation*>();
    m_relations_isSet = false;
    algorithm = new OAIAlgorithm();
    m_algorithm_isSet = false;
    objectives = new QList<OAIObjective*>();
    m_objectives_isSet = false;
    cost_matrices = new QList<OAICostMatrix*>();
    m_cost_matrices_isSet = false;
    configuration = new OAIConfiguration();
    m_configuration_isSet = false;
}

void
OAIRequest::cleanup() {
    if(vehicles != nullptr) { 
        auto arr = vehicles;
        for(auto o: *arr) { 
            delete o;
        }
        delete vehicles;
    }
    if(vehicle_types != nullptr) { 
        auto arr = vehicle_types;
        for(auto o: *arr) { 
            delete o;
        }
        delete vehicle_types;
    }
    if(services != nullptr) { 
        auto arr = services;
        for(auto o: *arr) { 
            delete o;
        }
        delete services;
    }
    if(shipments != nullptr) { 
        auto arr = shipments;
        for(auto o: *arr) { 
            delete o;
        }
        delete shipments;
    }
    if(relations != nullptr) { 
        auto arr = relations;
        for(auto o: *arr) { 
            delete o;
        }
        delete relations;
    }
    if(algorithm != nullptr) { 
        delete algorithm;
    }
    if(objectives != nullptr) { 
        auto arr = objectives;
        for(auto o: *arr) { 
            delete o;
        }
        delete objectives;
    }
    if(cost_matrices != nullptr) { 
        auto arr = cost_matrices;
        for(auto o: *arr) { 
            delete o;
        }
        delete cost_matrices;
    }
    if(configuration != nullptr) { 
        delete configuration;
    }
}

OAIRequest*
OAIRequest::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIRequest::fromJsonObject(QJsonObject pJson) {
    
    ::OpenAPI::setValue(&vehicles, pJson["vehicles"], "QList", "OAIVehicle");
    
    ::OpenAPI::setValue(&vehicle_types, pJson["vehicle_types"], "QList", "OAIVehicleType");
    
    ::OpenAPI::setValue(&services, pJson["services"], "QList", "OAIService");
    
    ::OpenAPI::setValue(&shipments, pJson["shipments"], "QList", "OAIShipment");
    
    ::OpenAPI::setValue(&relations, pJson["relations"], "QList", "OAIRelation");
    ::OpenAPI::setValue(&algorithm, pJson["algorithm"], "OAIAlgorithm", "OAIAlgorithm");
    
    
    ::OpenAPI::setValue(&objectives, pJson["objectives"], "QList", "OAIObjective");
    
    ::OpenAPI::setValue(&cost_matrices, pJson["cost_matrices"], "QList", "OAICostMatrix");
    ::OpenAPI::setValue(&configuration, pJson["configuration"], "OAIConfiguration", "OAIConfiguration");
    
}

QString
OAIRequest::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIRequest::asJsonObject() {
    QJsonObject obj;
    if(vehicles->size() > 0){
        toJsonArray((QList<void*>*)vehicles, obj, "vehicles", "OAIVehicle");
    }
    if(vehicle_types->size() > 0){
        toJsonArray((QList<void*>*)vehicle_types, obj, "vehicle_types", "OAIVehicleType");
    }
    if(services->size() > 0){
        toJsonArray((QList<void*>*)services, obj, "services", "OAIService");
    }
    if(shipments->size() > 0){
        toJsonArray((QList<void*>*)shipments, obj, "shipments", "OAIShipment");
    }
    if(relations->size() > 0){
        toJsonArray((QList<void*>*)relations, obj, "relations", "OAIRelation");
    }
    if((algorithm != nullptr) && (algorithm->isSet())){
        toJsonValue(QString("algorithm"), algorithm, obj, QString("OAIAlgorithm"));
    }
    if(objectives->size() > 0){
        toJsonArray((QList<void*>*)objectives, obj, "objectives", "OAIObjective");
    }
    if(cost_matrices->size() > 0){
        toJsonArray((QList<void*>*)cost_matrices, obj, "cost_matrices", "OAICostMatrix");
    }
    if((configuration != nullptr) && (configuration->isSet())){
        toJsonValue(QString("configuration"), configuration, obj, QString("OAIConfiguration"));
    }

    return obj;
}

QList<OAIVehicle*>*
OAIRequest::getVehicles() {
    return vehicles;
}
void
OAIRequest::setVehicles(QList<OAIVehicle*>* vehicles) {
    this->vehicles = vehicles;
    this->m_vehicles_isSet = true;
}

QList<OAIVehicleType*>*
OAIRequest::getVehicleTypes() {
    return vehicle_types;
}
void
OAIRequest::setVehicleTypes(QList<OAIVehicleType*>* vehicle_types) {
    this->vehicle_types = vehicle_types;
    this->m_vehicle_types_isSet = true;
}

QList<OAIService*>*
OAIRequest::getServices() {
    return services;
}
void
OAIRequest::setServices(QList<OAIService*>* services) {
    this->services = services;
    this->m_services_isSet = true;
}

QList<OAIShipment*>*
OAIRequest::getShipments() {
    return shipments;
}
void
OAIRequest::setShipments(QList<OAIShipment*>* shipments) {
    this->shipments = shipments;
    this->m_shipments_isSet = true;
}

QList<OAIRelation*>*
OAIRequest::getRelations() {
    return relations;
}
void
OAIRequest::setRelations(QList<OAIRelation*>* relations) {
    this->relations = relations;
    this->m_relations_isSet = true;
}

OAIAlgorithm*
OAIRequest::getAlgorithm() {
    return algorithm;
}
void
OAIRequest::setAlgorithm(OAIAlgorithm* algorithm) {
    this->algorithm = algorithm;
    this->m_algorithm_isSet = true;
}

QList<OAIObjective*>*
OAIRequest::getObjectives() {
    return objectives;
}
void
OAIRequest::setObjectives(QList<OAIObjective*>* objectives) {
    this->objectives = objectives;
    this->m_objectives_isSet = true;
}

QList<OAICostMatrix*>*
OAIRequest::getCostMatrices() {
    return cost_matrices;
}
void
OAIRequest::setCostMatrices(QList<OAICostMatrix*>* cost_matrices) {
    this->cost_matrices = cost_matrices;
    this->m_cost_matrices_isSet = true;
}

OAIConfiguration*
OAIRequest::getConfiguration() {
    return configuration;
}
void
OAIRequest::setConfiguration(OAIConfiguration* configuration) {
    this->configuration = configuration;
    this->m_configuration_isSet = true;
}


bool
OAIRequest::isSet(){
    bool isObjectUpdated = false;
    do{
        if(vehicles->size() > 0){ isObjectUpdated = true; break;}
        if(vehicle_types->size() > 0){ isObjectUpdated = true; break;}
        if(services->size() > 0){ isObjectUpdated = true; break;}
        if(shipments->size() > 0){ isObjectUpdated = true; break;}
        if(relations->size() > 0){ isObjectUpdated = true; break;}
        if(algorithm != nullptr && algorithm->isSet()){ isObjectUpdated = true; break;}
        if(objectives->size() > 0){ isObjectUpdated = true; break;}
        if(cost_matrices->size() > 0){ isObjectUpdated = true; break;}
        if(configuration != nullptr && configuration->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

