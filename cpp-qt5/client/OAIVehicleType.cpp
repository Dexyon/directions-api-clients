/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIVehicleType.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIVehicleType::OAIVehicleType(QString json) {
    init();
    this->fromJson(json);
}

OAIVehicleType::OAIVehicleType() {
    init();
}

OAIVehicleType::~OAIVehicleType() {
    this->cleanup();
}

void
OAIVehicleType::init() {
    type_id = new QString("");
    m_type_id_isSet = false;
    profile = new QString("");
    m_profile_isSet = false;
    capacity = new QList<qint32>();
    m_capacity_isSet = false;
    speed_factor = 0.0;
    m_speed_factor_isSet = false;
    service_time_factor = 0.0;
    m_service_time_factor_isSet = false;
    cost_per_meter = 0.0;
    m_cost_per_meter_isSet = false;
    cost_per_second = 0.0;
    m_cost_per_second_isSet = false;
    cost_per_activation = 0.0;
    m_cost_per_activation_isSet = false;
}

void
OAIVehicleType::cleanup() {
    if(type_id != nullptr) { 
        delete type_id;
    }
    if(profile != nullptr) { 
        delete profile;
    }

    if(capacity != nullptr) { 
        delete capacity;
    }





}

OAIVehicleType*
OAIVehicleType::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIVehicleType::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&type_id, pJson["type_id"], "QString", "QString");
    
    ::OpenAPI::setValue(&profile, pJson["profile"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&capacity, pJson["capacity"], "QList", "qint32");
    ::OpenAPI::setValue(&speed_factor, pJson["speed_factor"], "double", "");
    
    ::OpenAPI::setValue(&service_time_factor, pJson["service_time_factor"], "double", "");
    
    ::OpenAPI::setValue(&cost_per_meter, pJson["cost_per_meter"], "double", "");
    
    ::OpenAPI::setValue(&cost_per_second, pJson["cost_per_second"], "double", "");
    
    ::OpenAPI::setValue(&cost_per_activation, pJson["cost_per_activation"], "double", "");
    
}

QString
OAIVehicleType::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIVehicleType::asJsonObject() {
    QJsonObject obj;
    if(type_id != nullptr && *type_id != QString("")){
        toJsonValue(QString("type_id"), type_id, obj, QString("QString"));
    }
    if(profile != nullptr && *profile != QString("")){
        toJsonValue(QString("profile"), profile, obj, QString("QString"));
    }
    if(capacity->size() > 0){
        toJsonArray((QList<void*>*)capacity, obj, "capacity", "");
    }
    if(m_speed_factor_isSet){
        obj.insert("speed_factor", QJsonValue(speed_factor));
    }
    if(m_service_time_factor_isSet){
        obj.insert("service_time_factor", QJsonValue(service_time_factor));
    }
    if(m_cost_per_meter_isSet){
        obj.insert("cost_per_meter", QJsonValue(cost_per_meter));
    }
    if(m_cost_per_second_isSet){
        obj.insert("cost_per_second", QJsonValue(cost_per_second));
    }
    if(m_cost_per_activation_isSet){
        obj.insert("cost_per_activation", QJsonValue(cost_per_activation));
    }

    return obj;
}

QString*
OAIVehicleType::getTypeId() {
    return type_id;
}
void
OAIVehicleType::setTypeId(QString* type_id) {
    this->type_id = type_id;
    this->m_type_id_isSet = true;
}

QString*
OAIVehicleType::getProfile() {
    return profile;
}
void
OAIVehicleType::setProfile(QString* profile) {
    this->profile = profile;
    this->m_profile_isSet = true;
}

QList<qint32>*
OAIVehicleType::getCapacity() {
    return capacity;
}
void
OAIVehicleType::setCapacity(QList<qint32>* capacity) {
    this->capacity = capacity;
    this->m_capacity_isSet = true;
}

double
OAIVehicleType::getSpeedFactor() {
    return speed_factor;
}
void
OAIVehicleType::setSpeedFactor(double speed_factor) {
    this->speed_factor = speed_factor;
    this->m_speed_factor_isSet = true;
}

double
OAIVehicleType::getServiceTimeFactor() {
    return service_time_factor;
}
void
OAIVehicleType::setServiceTimeFactor(double service_time_factor) {
    this->service_time_factor = service_time_factor;
    this->m_service_time_factor_isSet = true;
}

double
OAIVehicleType::getCostPerMeter() {
    return cost_per_meter;
}
void
OAIVehicleType::setCostPerMeter(double cost_per_meter) {
    this->cost_per_meter = cost_per_meter;
    this->m_cost_per_meter_isSet = true;
}

double
OAIVehicleType::getCostPerSecond() {
    return cost_per_second;
}
void
OAIVehicleType::setCostPerSecond(double cost_per_second) {
    this->cost_per_second = cost_per_second;
    this->m_cost_per_second_isSet = true;
}

double
OAIVehicleType::getCostPerActivation() {
    return cost_per_activation;
}
void
OAIVehicleType::setCostPerActivation(double cost_per_activation) {
    this->cost_per_activation = cost_per_activation;
    this->m_cost_per_activation_isSet = true;
}


bool
OAIVehicleType::isSet(){
    bool isObjectUpdated = false;
    do{
        if(type_id != nullptr && *type_id != QString("")){ isObjectUpdated = true; break;}
        if(profile != nullptr && *profile != QString("")){ isObjectUpdated = true; break;}
        if(m_capacity_isSet){ isObjectUpdated = true; break;}
        if(capacity->size() > 0){ isObjectUpdated = true; break;}
        if(m_speed_factor_isSet){ isObjectUpdated = true; break;}
        if(m_service_time_factor_isSet){ isObjectUpdated = true; break;}
        if(m_cost_per_meter_isSet){ isObjectUpdated = true; break;}
        if(m_cost_per_second_isSet){ isObjectUpdated = true; break;}
        if(m_cost_per_activation_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

