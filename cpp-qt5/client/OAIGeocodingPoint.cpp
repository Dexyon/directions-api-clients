/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIGeocodingPoint.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIGeocodingPoint::OAIGeocodingPoint(QString json) {
    init();
    this->fromJson(json);
}

OAIGeocodingPoint::OAIGeocodingPoint() {
    init();
}

OAIGeocodingPoint::~OAIGeocodingPoint() {
    this->cleanup();
}

void
OAIGeocodingPoint::init() {
    lat = 0.0;
    m_lat_isSet = false;
    lng = 0.0;
    m_lng_isSet = false;
}

void
OAIGeocodingPoint::cleanup() {


}

OAIGeocodingPoint*
OAIGeocodingPoint::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIGeocodingPoint::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&lat, pJson["lat"], "double", "");
    
    ::OpenAPI::setValue(&lng, pJson["lng"], "double", "");
    
}

QString
OAIGeocodingPoint::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIGeocodingPoint::asJsonObject() {
    QJsonObject obj;
    if(m_lat_isSet){
        obj.insert("lat", QJsonValue(lat));
    }
    if(m_lng_isSet){
        obj.insert("lng", QJsonValue(lng));
    }

    return obj;
}

double
OAIGeocodingPoint::getLat() {
    return lat;
}
void
OAIGeocodingPoint::setLat(double lat) {
    this->lat = lat;
    this->m_lat_isSet = true;
}

double
OAIGeocodingPoint::getLng() {
    return lng;
}
void
OAIGeocodingPoint::setLng(double lng) {
    this->lng = lng;
    this->m_lng_isSet = true;
}


bool
OAIGeocodingPoint::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_lat_isSet){ isObjectUpdated = true; break;}
        if(m_lng_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

