/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIGHError.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIGHError::OAIGHError(QString json) {
    init();
    this->fromJson(json);
}

OAIGHError::OAIGHError() {
    init();
}

OAIGHError::~OAIGHError() {
    this->cleanup();
}

void
OAIGHError::init() {
    code = 0;
    m_code_isSet = false;
    message = new QString("");
    m_message_isSet = false;
    hints = new QList<OAIObject*>();
    m_hints_isSet = false;
}

void
OAIGHError::cleanup() {

    if(message != nullptr) { 
        delete message;
    }
    if(hints != nullptr) { 
        auto arr = hints;
        for(auto o: *arr) { 
            delete o;
        }
        delete hints;
    }
}

OAIGHError*
OAIGHError::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIGHError::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&code, pJson["code"], "qint32", "");
    
    ::OpenAPI::setValue(&message, pJson["message"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&hints, pJson["hints"], "QList", "OAIObject");
}

QString
OAIGHError::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIGHError::asJsonObject() {
    QJsonObject obj;
    if(m_code_isSet){
        obj.insert("code", QJsonValue(code));
    }
    if(message != nullptr && *message != QString("")){
        toJsonValue(QString("message"), message, obj, QString("QString"));
    }
    if(hints->size() > 0){
        toJsonArray((QList<void*>*)hints, obj, "hints", "OAIObject");
    }

    return obj;
}

qint32
OAIGHError::getCode() {
    return code;
}
void
OAIGHError::setCode(qint32 code) {
    this->code = code;
    this->m_code_isSet = true;
}

QString*
OAIGHError::getMessage() {
    return message;
}
void
OAIGHError::setMessage(QString* message) {
    this->message = message;
    this->m_message_isSet = true;
}

QList<OAIObject*>*
OAIGHError::getHints() {
    return hints;
}
void
OAIGHError::setHints(QList<OAIObject*>* hints) {
    this->hints = hints;
    this->m_hints_isSet = true;
}


bool
OAIGHError::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_code_isSet){ isObjectUpdated = true; break;}
        if(message != nullptr && *message != QString("")){ isObjectUpdated = true; break;}
        if(hints->size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

