/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIRouteResponse.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIRouteResponse::OAIRouteResponse(QString json) {
    init();
    this->fromJson(json);
}

OAIRouteResponse::OAIRouteResponse() {
    init();
}

OAIRouteResponse::~OAIRouteResponse() {
    this->cleanup();
}

void
OAIRouteResponse::init() {
    paths = new QList<OAIRouteResponsePath*>();
    m_paths_isSet = false;
    info = new OAIResponseInfo();
    m_info_isSet = false;
}

void
OAIRouteResponse::cleanup() {
    if(paths != nullptr) { 
        auto arr = paths;
        for(auto o: *arr) { 
            delete o;
        }
        delete paths;
    }
    if(info != nullptr) { 
        delete info;
    }
}

OAIRouteResponse*
OAIRouteResponse::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIRouteResponse::fromJsonObject(QJsonObject pJson) {
    
    ::OpenAPI::setValue(&paths, pJson["paths"], "QList", "OAIRouteResponsePath");
    ::OpenAPI::setValue(&info, pJson["info"], "OAIResponseInfo", "OAIResponseInfo");
    
}

QString
OAIRouteResponse::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIRouteResponse::asJsonObject() {
    QJsonObject obj;
    if(paths->size() > 0){
        toJsonArray((QList<void*>*)paths, obj, "paths", "OAIRouteResponsePath");
    }
    if((info != nullptr) && (info->isSet())){
        toJsonValue(QString("info"), info, obj, QString("OAIResponseInfo"));
    }

    return obj;
}

QList<OAIRouteResponsePath*>*
OAIRouteResponse::getPaths() {
    return paths;
}
void
OAIRouteResponse::setPaths(QList<OAIRouteResponsePath*>* paths) {
    this->paths = paths;
    this->m_paths_isSet = true;
}

OAIResponseInfo*
OAIRouteResponse::getInfo() {
    return info;
}
void
OAIRouteResponse::setInfo(OAIResponseInfo* info) {
    this->info = info;
    this->m_info_isSet = true;
}


bool
OAIRouteResponse::isSet(){
    bool isObjectUpdated = false;
    do{
        if(paths->size() > 0){ isObjectUpdated = true; break;}
        if(info != nullptr && info->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

