/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIStop.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIStop::OAIStop(QString json) {
    init();
    this->fromJson(json);
}

OAIStop::OAIStop() {
    init();
}

OAIStop::~OAIStop() {
    this->cleanup();
}

void
OAIStop::init() {
    address = new OAIAddress();
    m_address_isSet = false;
    duration = 0L;
    m_duration_isSet = false;
    preparation_time = 0L;
    m_preparation_time_isSet = false;
    time_windows = new QList<OAITimeWindow*>();
    m_time_windows_isSet = false;
}

void
OAIStop::cleanup() {
    if(address != nullptr) { 
        delete address;
    }


    if(time_windows != nullptr) { 
        auto arr = time_windows;
        for(auto o: *arr) { 
            delete o;
        }
        delete time_windows;
    }
}

OAIStop*
OAIStop::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIStop::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&address, pJson["address"], "OAIAddress", "OAIAddress");
    
    ::OpenAPI::setValue(&duration, pJson["duration"], "qint64", "");
    
    ::OpenAPI::setValue(&preparation_time, pJson["preparation_time"], "qint64", "");
    
    
    ::OpenAPI::setValue(&time_windows, pJson["time_windows"], "QList", "OAITimeWindow");
}

QString
OAIStop::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIStop::asJsonObject() {
    QJsonObject obj;
    if((address != nullptr) && (address->isSet())){
        toJsonValue(QString("address"), address, obj, QString("OAIAddress"));
    }
    if(m_duration_isSet){
        obj.insert("duration", QJsonValue(duration));
    }
    if(m_preparation_time_isSet){
        obj.insert("preparation_time", QJsonValue(preparation_time));
    }
    if(time_windows->size() > 0){
        toJsonArray((QList<void*>*)time_windows, obj, "time_windows", "OAITimeWindow");
    }

    return obj;
}

OAIAddress*
OAIStop::getAddress() {
    return address;
}
void
OAIStop::setAddress(OAIAddress* address) {
    this->address = address;
    this->m_address_isSet = true;
}

qint64
OAIStop::getDuration() {
    return duration;
}
void
OAIStop::setDuration(qint64 duration) {
    this->duration = duration;
    this->m_duration_isSet = true;
}

qint64
OAIStop::getPreparationTime() {
    return preparation_time;
}
void
OAIStop::setPreparationTime(qint64 preparation_time) {
    this->preparation_time = preparation_time;
    this->m_preparation_time_isSet = true;
}

QList<OAITimeWindow*>*
OAIStop::getTimeWindows() {
    return time_windows;
}
void
OAIStop::setTimeWindows(QList<OAITimeWindow*>* time_windows) {
    this->time_windows = time_windows;
    this->m_time_windows_isSet = true;
}


bool
OAIStop::isSet(){
    bool isObjectUpdated = false;
    do{
        if(address != nullptr && address->isSet()){ isObjectUpdated = true; break;}
        if(m_duration_isSet){ isObjectUpdated = true; break;}
        if(m_preparation_time_isSet){ isObjectUpdated = true; break;}
        if(time_windows->size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

