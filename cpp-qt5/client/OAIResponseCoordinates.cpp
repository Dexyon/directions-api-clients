/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIResponseCoordinates.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIResponseCoordinates::OAIResponseCoordinates(QString json) {
    init();
    this->fromJson(json);
}

OAIResponseCoordinates::OAIResponseCoordinates() {
    init();
}

OAIResponseCoordinates::~OAIResponseCoordinates() {
    this->cleanup();
}

void
OAIResponseCoordinates::init() {
    coordinates = new OAIResponseCoordinatesArray();
    m_coordinates_isSet = false;
}

void
OAIResponseCoordinates::cleanup() {
    if(coordinates != nullptr) { 
        delete coordinates;
    }
}

OAIResponseCoordinates*
OAIResponseCoordinates::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIResponseCoordinates::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&coordinates, pJson["coordinates"], "OAIResponseCoordinatesArray", "OAIResponseCoordinatesArray");
    
}

QString
OAIResponseCoordinates::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIResponseCoordinates::asJsonObject() {
    QJsonObject obj;
    if((coordinates != nullptr) && (coordinates->isSet())){
        toJsonValue(QString("coordinates"), coordinates, obj, QString("OAIResponseCoordinatesArray"));
    }

    return obj;
}

OAIResponseCoordinatesArray*
OAIResponseCoordinates::getCoordinates() {
    return coordinates;
}
void
OAIResponseCoordinates::setCoordinates(OAIResponseCoordinatesArray* coordinates) {
    this->coordinates = coordinates;
    this->m_coordinates_isSet = true;
}


bool
OAIResponseCoordinates::isSet(){
    bool isObjectUpdated = false;
    do{
        if(coordinates != nullptr && coordinates->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

