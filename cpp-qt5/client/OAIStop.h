/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStop.h
 *
 * 
 */

#ifndef OAIStop_H_
#define OAIStop_H_

#include <QJsonObject>


#include "OAIOAIAddress.h"
#include "OAIOAITimeWindow.h"
#include <QList>

#include "OAIObject.h"

namespace OpenAPI {

class OAIStop: public OAIObject {
public:
    OAIStop();
    OAIStop(QString json);
    ~OAIStop();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIStop* fromJson(QString jsonString) override;

    OAIAddress* getAddress();
    void setAddress(OAIAddress* address);

    qint64 getDuration();
    void setDuration(qint64 duration);

    qint64 getPreparationTime();
    void setPreparationTime(qint64 preparation_time);

    QList<OAITimeWindow*>* getTimeWindows();
    void setTimeWindows(QList<OAITimeWindow*>* time_windows);


    virtual bool isSet() override;

private:
    OAIAddress* address;
    bool m_address_isSet;

    qint64 duration;
    bool m_duration_isSet;

    qint64 preparation_time;
    bool m_preparation_time_isSet;

    QList<OAITimeWindow*>* time_windows;
    bool m_time_windows_isSet;

};

}

#endif /* OAIStop_H_ */
