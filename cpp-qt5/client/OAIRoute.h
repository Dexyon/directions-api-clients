/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRoute.h
 *
 * 
 */

#ifndef OAIRoute_H_
#define OAIRoute_H_

#include <QJsonObject>


#include "OAIOAIActivity.h"
#include "OAIOAIRoutePoint.h"
#include <QList>
#include <QString>

#include "OAIObject.h"

namespace OpenAPI {

class OAIRoute: public OAIObject {
public:
    OAIRoute();
    OAIRoute(QString json);
    ~OAIRoute();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIRoute* fromJson(QString jsonString) override;

    QString* getVehicleId();
    void setVehicleId(QString* vehicle_id);

    qint64 getDistance();
    void setDistance(qint64 distance);

    qint64 getTransportTime();
    void setTransportTime(qint64 transport_time);

    qint64 getCompletionTime();
    void setCompletionTime(qint64 completion_time);

    qint64 getWaitingTime();
    void setWaitingTime(qint64 waiting_time);

    QList<OAIActivity*>* getActivities();
    void setActivities(QList<OAIActivity*>* activities);

    QList<OAIRoutePoint*>* getPoints();
    void setPoints(QList<OAIRoutePoint*>* points);


    virtual bool isSet() override;

private:
    QString* vehicle_id;
    bool m_vehicle_id_isSet;

    qint64 distance;
    bool m_distance_isSet;

    qint64 transport_time;
    bool m_transport_time_isSet;

    qint64 completion_time;
    bool m_completion_time_isSet;

    qint64 waiting_time;
    bool m_waiting_time_isSet;

    QList<OAIActivity*>* activities;
    bool m_activities_isSet;

    QList<OAIRoutePoint*>* points;
    bool m_points_isSet;

};

}

#endif /* OAIRoute_H_ */
