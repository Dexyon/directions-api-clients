/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef _OAI_OAIIsochroneApi_H_
#define _OAI_OAIIsochroneApi_H_

#include "OAIHttpRequest.h"

#include "OAIOAIGHError.h"
#include "OAIOAIIsochroneResponse.h"
#include <QString>

#include <QObject>

namespace OpenAPI {

class OAIIsochroneApi: public QObject {
    Q_OBJECT

public:
    OAIIsochroneApi();
    OAIIsochroneApi(QString host, QString basePath);
    ~OAIIsochroneApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void isochroneGet(QString* point, QString* key, qint32 time_limit, qint32 distance_limit, QString* vehicle, qint32 buckets, bool reverse_flow, QString* weighting);
    
private:
    void isochroneGetCallback (OAIHttpRequestWorker * worker);
    
signals:
    void isochroneGetSignal(OAIIsochroneResponse* summary);
    
    void isochroneGetSignalE(OAIIsochroneResponse* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void isochroneGetSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
