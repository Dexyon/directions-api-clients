/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIResponseInstruction.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIResponseInstruction::OAIResponseInstruction(QString json) {
    init();
    this->fromJson(json);
}

OAIResponseInstruction::OAIResponseInstruction() {
    init();
}

OAIResponseInstruction::~OAIResponseInstruction() {
    this->cleanup();
}

void
OAIResponseInstruction::init() {
    text = new QString("");
    m_text_isSet = false;
    street_name = new QString("");
    m_street_name_isSet = false;
    distance = 0.0;
    m_distance_isSet = false;
    time = 0;
    m_time_isSet = false;
    interval = new QList<qint32>();
    m_interval_isSet = false;
    sign = 0;
    m_sign_isSet = false;
    annotation_text = new QString("");
    m_annotation_text_isSet = false;
    annotation_importance = 0;
    m_annotation_importance_isSet = false;
    exit_number = 0;
    m_exit_number_isSet = false;
    turn_angle = 0.0;
    m_turn_angle_isSet = false;
}

void
OAIResponseInstruction::cleanup() {
    if(text != nullptr) { 
        delete text;
    }
    if(street_name != nullptr) { 
        delete street_name;
    }



    if(interval != nullptr) { 
        delete interval;
    }

    if(annotation_text != nullptr) { 
        delete annotation_text;
    }



}

OAIResponseInstruction*
OAIResponseInstruction::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIResponseInstruction::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&text, pJson["text"], "QString", "QString");
    
    ::OpenAPI::setValue(&street_name, pJson["street_name"], "QString", "QString");
    
    ::OpenAPI::setValue(&distance, pJson["distance"], "double", "");
    
    ::OpenAPI::setValue(&time, pJson["time"], "qint32", "");
    
    
    ::OpenAPI::setValue(&interval, pJson["interval"], "QList", "qint32");
    ::OpenAPI::setValue(&sign, pJson["sign"], "qint32", "");
    
    ::OpenAPI::setValue(&annotation_text, pJson["annotation_text"], "QString", "QString");
    
    ::OpenAPI::setValue(&annotation_importance, pJson["annotation_importance"], "qint32", "");
    
    ::OpenAPI::setValue(&exit_number, pJson["exit_number"], "qint32", "");
    
    ::OpenAPI::setValue(&turn_angle, pJson["turn_angle"], "double", "");
    
}

QString
OAIResponseInstruction::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIResponseInstruction::asJsonObject() {
    QJsonObject obj;
    if(text != nullptr && *text != QString("")){
        toJsonValue(QString("text"), text, obj, QString("QString"));
    }
    if(street_name != nullptr && *street_name != QString("")){
        toJsonValue(QString("street_name"), street_name, obj, QString("QString"));
    }
    if(m_distance_isSet){
        obj.insert("distance", QJsonValue(distance));
    }
    if(m_time_isSet){
        obj.insert("time", QJsonValue(time));
    }
    if(interval->size() > 0){
        toJsonArray((QList<void*>*)interval, obj, "interval", "");
    }
    if(m_sign_isSet){
        obj.insert("sign", QJsonValue(sign));
    }
    if(annotation_text != nullptr && *annotation_text != QString("")){
        toJsonValue(QString("annotation_text"), annotation_text, obj, QString("QString"));
    }
    if(m_annotation_importance_isSet){
        obj.insert("annotation_importance", QJsonValue(annotation_importance));
    }
    if(m_exit_number_isSet){
        obj.insert("exit_number", QJsonValue(exit_number));
    }
    if(m_turn_angle_isSet){
        obj.insert("turn_angle", QJsonValue(turn_angle));
    }

    return obj;
}

QString*
OAIResponseInstruction::getText() {
    return text;
}
void
OAIResponseInstruction::setText(QString* text) {
    this->text = text;
    this->m_text_isSet = true;
}

QString*
OAIResponseInstruction::getStreetName() {
    return street_name;
}
void
OAIResponseInstruction::setStreetName(QString* street_name) {
    this->street_name = street_name;
    this->m_street_name_isSet = true;
}

double
OAIResponseInstruction::getDistance() {
    return distance;
}
void
OAIResponseInstruction::setDistance(double distance) {
    this->distance = distance;
    this->m_distance_isSet = true;
}

qint32
OAIResponseInstruction::getTime() {
    return time;
}
void
OAIResponseInstruction::setTime(qint32 time) {
    this->time = time;
    this->m_time_isSet = true;
}

QList<qint32>*
OAIResponseInstruction::getInterval() {
    return interval;
}
void
OAIResponseInstruction::setInterval(QList<qint32>* interval) {
    this->interval = interval;
    this->m_interval_isSet = true;
}

qint32
OAIResponseInstruction::getSign() {
    return sign;
}
void
OAIResponseInstruction::setSign(qint32 sign) {
    this->sign = sign;
    this->m_sign_isSet = true;
}

QString*
OAIResponseInstruction::getAnnotationText() {
    return annotation_text;
}
void
OAIResponseInstruction::setAnnotationText(QString* annotation_text) {
    this->annotation_text = annotation_text;
    this->m_annotation_text_isSet = true;
}

qint32
OAIResponseInstruction::getAnnotationImportance() {
    return annotation_importance;
}
void
OAIResponseInstruction::setAnnotationImportance(qint32 annotation_importance) {
    this->annotation_importance = annotation_importance;
    this->m_annotation_importance_isSet = true;
}

qint32
OAIResponseInstruction::getExitNumber() {
    return exit_number;
}
void
OAIResponseInstruction::setExitNumber(qint32 exit_number) {
    this->exit_number = exit_number;
    this->m_exit_number_isSet = true;
}

double
OAIResponseInstruction::getTurnAngle() {
    return turn_angle;
}
void
OAIResponseInstruction::setTurnAngle(double turn_angle) {
    this->turn_angle = turn_angle;
    this->m_turn_angle_isSet = true;
}


bool
OAIResponseInstruction::isSet(){
    bool isObjectUpdated = false;
    do{
        if(text != nullptr && *text != QString("")){ isObjectUpdated = true; break;}
        if(street_name != nullptr && *street_name != QString("")){ isObjectUpdated = true; break;}
        if(m_distance_isSet){ isObjectUpdated = true; break;}
        if(m_time_isSet){ isObjectUpdated = true; break;}
        if(m_interval_isSet){ isObjectUpdated = true; break;}
        if(interval->size() > 0){ isObjectUpdated = true; break;}
        if(m_sign_isSet){ isObjectUpdated = true; break;}
        if(annotation_text != nullptr && *annotation_text != QString("")){ isObjectUpdated = true; break;}
        if(m_annotation_importance_isSet){ isObjectUpdated = true; break;}
        if(m_exit_number_isSet){ isObjectUpdated = true; break;}
        if(m_turn_angle_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

