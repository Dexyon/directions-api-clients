/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIObjective.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIObjective::OAIObjective(QString json) {
    init();
    this->fromJson(json);
}

OAIObjective::OAIObjective() {
    init();
}

OAIObjective::~OAIObjective() {
    this->cleanup();
}

void
OAIObjective::init() {
    type = new QString("");
    m_type_isSet = false;
    value = new QString("");
    m_value_isSet = false;
}

void
OAIObjective::cleanup() {
    if(type != nullptr) { 
        delete type;
    }
    if(value != nullptr) { 
        delete value;
    }
}

OAIObjective*
OAIObjective::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIObjective::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&type, pJson["type"], "QString", "QString");
    
    ::OpenAPI::setValue(&value, pJson["value"], "QString", "QString");
    
}

QString
OAIObjective::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIObjective::asJsonObject() {
    QJsonObject obj;
    if(type != nullptr && *type != QString("")){
        toJsonValue(QString("type"), type, obj, QString("QString"));
    }
    if(value != nullptr && *value != QString("")){
        toJsonValue(QString("value"), value, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIObjective::getType() {
    return type;
}
void
OAIObjective::setType(QString* type) {
    this->type = type;
    this->m_type_isSet = true;
}

QString*
OAIObjective::getValue() {
    return value;
}
void
OAIObjective::setValue(QString* value) {
    this->value = value;
    this->m_value_isSet = true;
}


bool
OAIObjective::isSet(){
    bool isObjectUpdated = false;
    do{
        if(type != nullptr && *type != QString("")){ isObjectUpdated = true; break;}
        if(value != nullptr && *value != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

