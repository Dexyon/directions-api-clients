/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIConfiguration.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIConfiguration::OAIConfiguration(QString json) {
    init();
    this->fromJson(json);
}

OAIConfiguration::OAIConfiguration() {
    init();
}

OAIConfiguration::~OAIConfiguration() {
    this->cleanup();
}

void
OAIConfiguration::init() {
    routing = new OAIRouting();
    m_routing_isSet = false;
}

void
OAIConfiguration::cleanup() {
    if(routing != nullptr) { 
        delete routing;
    }
}

OAIConfiguration*
OAIConfiguration::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIConfiguration::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&routing, pJson["routing"], "OAIRouting", "OAIRouting");
    
}

QString
OAIConfiguration::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIConfiguration::asJsonObject() {
    QJsonObject obj;
    if((routing != nullptr) && (routing->isSet())){
        toJsonValue(QString("routing"), routing, obj, QString("OAIRouting"));
    }

    return obj;
}

OAIRouting*
OAIConfiguration::getRouting() {
    return routing;
}
void
OAIConfiguration::setRouting(OAIRouting* routing) {
    this->routing = routing;
    this->m_routing_isSet = true;
}


bool
OAIConfiguration::isSet(){
    bool isObjectUpdated = false;
    do{
        if(routing != nullptr && routing->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

