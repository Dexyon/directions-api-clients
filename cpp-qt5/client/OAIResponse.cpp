/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIResponse.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIResponse::OAIResponse(QString json) {
    init();
    this->fromJson(json);
}

OAIResponse::OAIResponse() {
    init();
}

OAIResponse::~OAIResponse() {
    this->cleanup();
}

void
OAIResponse::init() {
    copyrights = new QList<QString*>();
    m_copyrights_isSet = false;
    job_id = new QString("");
    m_job_id_isSet = false;
    status = new QString("");
    m_status_isSet = false;
    waiting_in_queue = 0L;
    m_waiting_in_queue_isSet = false;
    processing_time = 0L;
    m_processing_time_isSet = false;
    solution = new OAISolution();
    m_solution_isSet = false;
}

void
OAIResponse::cleanup() {
    if(copyrights != nullptr) { 
        auto arr = copyrights;
        for(auto o: *arr) { 
            delete o;
        }
        delete copyrights;
    }
    if(job_id != nullptr) { 
        delete job_id;
    }
    if(status != nullptr) { 
        delete status;
    }


    if(solution != nullptr) { 
        delete solution;
    }
}

OAIResponse*
OAIResponse::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIResponse::fromJsonObject(QJsonObject pJson) {
    
    ::OpenAPI::setValue(&copyrights, pJson["copyrights"], "QList", "QString");
    ::OpenAPI::setValue(&job_id, pJson["job_id"], "QString", "QString");
    
    ::OpenAPI::setValue(&status, pJson["status"], "QString", "QString");
    
    ::OpenAPI::setValue(&waiting_in_queue, pJson["waiting_in_queue"], "qint64", "");
    
    ::OpenAPI::setValue(&processing_time, pJson["processing_time"], "qint64", "");
    
    ::OpenAPI::setValue(&solution, pJson["solution"], "OAISolution", "OAISolution");
    
}

QString
OAIResponse::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIResponse::asJsonObject() {
    QJsonObject obj;
    if(copyrights->size() > 0){
        toJsonArray((QList<void*>*)copyrights, obj, "copyrights", "QString");
    }
    if(job_id != nullptr && *job_id != QString("")){
        toJsonValue(QString("job_id"), job_id, obj, QString("QString"));
    }
    if(status != nullptr && *status != QString("")){
        toJsonValue(QString("status"), status, obj, QString("QString"));
    }
    if(m_waiting_in_queue_isSet){
        obj.insert("waiting_in_queue", QJsonValue(waiting_in_queue));
    }
    if(m_processing_time_isSet){
        obj.insert("processing_time", QJsonValue(processing_time));
    }
    if((solution != nullptr) && (solution->isSet())){
        toJsonValue(QString("solution"), solution, obj, QString("OAISolution"));
    }

    return obj;
}

QList<QString*>*
OAIResponse::getCopyrights() {
    return copyrights;
}
void
OAIResponse::setCopyrights(QList<QString*>* copyrights) {
    this->copyrights = copyrights;
    this->m_copyrights_isSet = true;
}

QString*
OAIResponse::getJobId() {
    return job_id;
}
void
OAIResponse::setJobId(QString* job_id) {
    this->job_id = job_id;
    this->m_job_id_isSet = true;
}

QString*
OAIResponse::getStatus() {
    return status;
}
void
OAIResponse::setStatus(QString* status) {
    this->status = status;
    this->m_status_isSet = true;
}

qint64
OAIResponse::getWaitingInQueue() {
    return waiting_in_queue;
}
void
OAIResponse::setWaitingInQueue(qint64 waiting_in_queue) {
    this->waiting_in_queue = waiting_in_queue;
    this->m_waiting_in_queue_isSet = true;
}

qint64
OAIResponse::getProcessingTime() {
    return processing_time;
}
void
OAIResponse::setProcessingTime(qint64 processing_time) {
    this->processing_time = processing_time;
    this->m_processing_time_isSet = true;
}

OAISolution*
OAIResponse::getSolution() {
    return solution;
}
void
OAIResponse::setSolution(OAISolution* solution) {
    this->solution = solution;
    this->m_solution_isSet = true;
}


bool
OAIResponse::isSet(){
    bool isObjectUpdated = false;
    do{
        if(copyrights->size() > 0){ isObjectUpdated = true; break;}
        if(job_id != nullptr && *job_id != QString("")){ isObjectUpdated = true; break;}
        if(status != nullptr && *status != QString("")){ isObjectUpdated = true; break;}
        if(m_waiting_in_queue_isSet){ isObjectUpdated = true; break;}
        if(m_processing_time_isSet){ isObjectUpdated = true; break;}
        if(solution != nullptr && solution->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

