/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRouting.h
 *
 * 
 */

#ifndef OAIRouting_H_
#define OAIRouting_H_

#include <QJsonObject>


#include <QString>

#include "OAIObject.h"

namespace OpenAPI {

class OAIRouting: public OAIObject {
public:
    OAIRouting();
    OAIRouting(QString json);
    ~OAIRouting();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIRouting* fromJson(QString jsonString) override;

    bool isCalcPoints();
    void setCalcPoints(bool calc_points);

    bool isConsiderTraffic();
    void setConsiderTraffic(bool consider_traffic);

    QString* getNetworkDataProvider();
    void setNetworkDataProvider(QString* network_data_provider);

    bool isFailFast();
    void setFailFast(bool fail_fast);


    virtual bool isSet() override;

private:
    bool calc_points;
    bool m_calc_points_isSet;

    bool consider_traffic;
    bool m_consider_traffic_isSet;

    QString* network_data_provider;
    bool m_network_data_provider_isSet;

    bool fail_fast;
    bool m_fail_fast_isSet;

};

}

#endif /* OAIRouting_H_ */
