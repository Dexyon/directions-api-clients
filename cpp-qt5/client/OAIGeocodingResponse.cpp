/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIGeocodingResponse.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIGeocodingResponse::OAIGeocodingResponse(QString json) {
    init();
    this->fromJson(json);
}

OAIGeocodingResponse::OAIGeocodingResponse() {
    init();
}

OAIGeocodingResponse::~OAIGeocodingResponse() {
    this->cleanup();
}

void
OAIGeocodingResponse::init() {
    hits = new QList<OAIGeocodingLocation*>();
    m_hits_isSet = false;
    locale = new QString("");
    m_locale_isSet = false;
}

void
OAIGeocodingResponse::cleanup() {
    if(hits != nullptr) { 
        auto arr = hits;
        for(auto o: *arr) { 
            delete o;
        }
        delete hits;
    }
    if(locale != nullptr) { 
        delete locale;
    }
}

OAIGeocodingResponse*
OAIGeocodingResponse::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIGeocodingResponse::fromJsonObject(QJsonObject pJson) {
    
    ::OpenAPI::setValue(&hits, pJson["hits"], "QList", "OAIGeocodingLocation");
    ::OpenAPI::setValue(&locale, pJson["locale"], "QString", "QString");
    
}

QString
OAIGeocodingResponse::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIGeocodingResponse::asJsonObject() {
    QJsonObject obj;
    if(hits->size() > 0){
        toJsonArray((QList<void*>*)hits, obj, "hits", "OAIGeocodingLocation");
    }
    if(locale != nullptr && *locale != QString("")){
        toJsonValue(QString("locale"), locale, obj, QString("QString"));
    }

    return obj;
}

QList<OAIGeocodingLocation*>*
OAIGeocodingResponse::getHits() {
    return hits;
}
void
OAIGeocodingResponse::setHits(QList<OAIGeocodingLocation*>* hits) {
    this->hits = hits;
    this->m_hits_isSet = true;
}

QString*
OAIGeocodingResponse::getLocale() {
    return locale;
}
void
OAIGeocodingResponse::setLocale(QString* locale) {
    this->locale = locale;
    this->m_locale_isSet = true;
}


bool
OAIGeocodingResponse::isSet(){
    bool isObjectUpdated = false;
    do{
        if(hits->size() > 0){ isObjectUpdated = true; break;}
        if(locale != nullptr && *locale != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

