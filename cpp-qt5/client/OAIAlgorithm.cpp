/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIAlgorithm.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIAlgorithm::OAIAlgorithm(QString json) {
    init();
    this->fromJson(json);
}

OAIAlgorithm::OAIAlgorithm() {
    init();
}

OAIAlgorithm::~OAIAlgorithm() {
    this->cleanup();
}

void
OAIAlgorithm::init() {
    problem_type = new QString("");
    m_problem_type_isSet = false;
    objective = new QString("");
    m_objective_isSet = false;
}

void
OAIAlgorithm::cleanup() {
    if(problem_type != nullptr) { 
        delete problem_type;
    }
    if(objective != nullptr) { 
        delete objective;
    }
}

OAIAlgorithm*
OAIAlgorithm::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIAlgorithm::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&problem_type, pJson["problem_type"], "QString", "QString");
    
    ::OpenAPI::setValue(&objective, pJson["objective"], "QString", "QString");
    
}

QString
OAIAlgorithm::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIAlgorithm::asJsonObject() {
    QJsonObject obj;
    if(problem_type != nullptr && *problem_type != QString("")){
        toJsonValue(QString("problem_type"), problem_type, obj, QString("QString"));
    }
    if(objective != nullptr && *objective != QString("")){
        toJsonValue(QString("objective"), objective, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIAlgorithm::getProblemType() {
    return problem_type;
}
void
OAIAlgorithm::setProblemType(QString* problem_type) {
    this->problem_type = problem_type;
    this->m_problem_type_isSet = true;
}

QString*
OAIAlgorithm::getObjective() {
    return objective;
}
void
OAIAlgorithm::setObjective(QString* objective) {
    this->objective = objective;
    this->m_objective_isSet = true;
}


bool
OAIAlgorithm::isSet(){
    bool isObjectUpdated = false;
    do{
        if(problem_type != nullptr && *problem_type != QString("")){ isObjectUpdated = true; break;}
        if(objective != nullptr && *objective != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

