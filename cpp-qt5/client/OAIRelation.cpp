/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIRelation.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIRelation::OAIRelation(QString json) {
    init();
    this->fromJson(json);
}

OAIRelation::OAIRelation() {
    init();
}

OAIRelation::~OAIRelation() {
    this->cleanup();
}

void
OAIRelation::init() {
    type = new QString("");
    m_type_isSet = false;
    ids = new QList<QString*>();
    m_ids_isSet = false;
    vehicle_id = new QString("");
    m_vehicle_id_isSet = false;
}

void
OAIRelation::cleanup() {
    if(type != nullptr) { 
        delete type;
    }
    if(ids != nullptr) { 
        auto arr = ids;
        for(auto o: *arr) { 
            delete o;
        }
        delete ids;
    }
    if(vehicle_id != nullptr) { 
        delete vehicle_id;
    }
}

OAIRelation*
OAIRelation::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIRelation::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&type, pJson["type"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&ids, pJson["ids"], "QList", "QString");
    ::OpenAPI::setValue(&vehicle_id, pJson["vehicle_id"], "QString", "QString");
    
}

QString
OAIRelation::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIRelation::asJsonObject() {
    QJsonObject obj;
    if(type != nullptr && *type != QString("")){
        toJsonValue(QString("type"), type, obj, QString("QString"));
    }
    if(ids->size() > 0){
        toJsonArray((QList<void*>*)ids, obj, "ids", "QString");
    }
    if(vehicle_id != nullptr && *vehicle_id != QString("")){
        toJsonValue(QString("vehicle_id"), vehicle_id, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIRelation::getType() {
    return type;
}
void
OAIRelation::setType(QString* type) {
    this->type = type;
    this->m_type_isSet = true;
}

QList<QString*>*
OAIRelation::getIds() {
    return ids;
}
void
OAIRelation::setIds(QList<QString*>* ids) {
    this->ids = ids;
    this->m_ids_isSet = true;
}

QString*
OAIRelation::getVehicleId() {
    return vehicle_id;
}
void
OAIRelation::setVehicleId(QString* vehicle_id) {
    this->vehicle_id = vehicle_id;
    this->m_vehicle_id_isSet = true;
}


bool
OAIRelation::isSet(){
    bool isObjectUpdated = false;
    do{
        if(type != nullptr && *type != QString("")){ isObjectUpdated = true; break;}
        if(ids->size() > 0){ isObjectUpdated = true; break;}
        if(vehicle_id != nullptr && *vehicle_id != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

