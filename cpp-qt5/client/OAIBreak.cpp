/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBreak.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBreak::OAIBreak(QString json) {
    init();
    this->fromJson(json);
}

OAIBreak::OAIBreak() {
    init();
}

OAIBreak::~OAIBreak() {
    this->cleanup();
}

void
OAIBreak::init() {
    earliest = 0L;
    m_earliest_isSet = false;
    latest = 0L;
    m_latest_isSet = false;
    duration = 0L;
    m_duration_isSet = false;
    max_driving_time = 0L;
    m_max_driving_time_isSet = false;
    initial_driving_time = 0L;
    m_initial_driving_time_isSet = false;
    possible_split = new QList<qint64>();
    m_possible_split_isSet = false;
}

void
OAIBreak::cleanup() {






    if(possible_split != nullptr) { 
        delete possible_split;
    }
}

OAIBreak*
OAIBreak::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBreak::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&earliest, pJson["earliest"], "qint64", "");
    
    ::OpenAPI::setValue(&latest, pJson["latest"], "qint64", "");
    
    ::OpenAPI::setValue(&duration, pJson["duration"], "qint64", "");
    
    ::OpenAPI::setValue(&max_driving_time, pJson["max_driving_time"], "qint64", "");
    
    ::OpenAPI::setValue(&initial_driving_time, pJson["initial_driving_time"], "qint64", "");
    
    
    ::OpenAPI::setValue(&possible_split, pJson["possible_split"], "QList", "qint64");
}

QString
OAIBreak::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBreak::asJsonObject() {
    QJsonObject obj;
    if(m_earliest_isSet){
        obj.insert("earliest", QJsonValue(earliest));
    }
    if(m_latest_isSet){
        obj.insert("latest", QJsonValue(latest));
    }
    if(m_duration_isSet){
        obj.insert("duration", QJsonValue(duration));
    }
    if(m_max_driving_time_isSet){
        obj.insert("max_driving_time", QJsonValue(max_driving_time));
    }
    if(m_initial_driving_time_isSet){
        obj.insert("initial_driving_time", QJsonValue(initial_driving_time));
    }
    if(possible_split->size() > 0){
        toJsonArray((QList<void*>*)possible_split, obj, "possible_split", "");
    }

    return obj;
}

qint64
OAIBreak::getEarliest() {
    return earliest;
}
void
OAIBreak::setEarliest(qint64 earliest) {
    this->earliest = earliest;
    this->m_earliest_isSet = true;
}

qint64
OAIBreak::getLatest() {
    return latest;
}
void
OAIBreak::setLatest(qint64 latest) {
    this->latest = latest;
    this->m_latest_isSet = true;
}

qint64
OAIBreak::getDuration() {
    return duration;
}
void
OAIBreak::setDuration(qint64 duration) {
    this->duration = duration;
    this->m_duration_isSet = true;
}

qint64
OAIBreak::getMaxDrivingTime() {
    return max_driving_time;
}
void
OAIBreak::setMaxDrivingTime(qint64 max_driving_time) {
    this->max_driving_time = max_driving_time;
    this->m_max_driving_time_isSet = true;
}

qint64
OAIBreak::getInitialDrivingTime() {
    return initial_driving_time;
}
void
OAIBreak::setInitialDrivingTime(qint64 initial_driving_time) {
    this->initial_driving_time = initial_driving_time;
    this->m_initial_driving_time_isSet = true;
}

QList<qint64>*
OAIBreak::getPossibleSplit() {
    return possible_split;
}
void
OAIBreak::setPossibleSplit(QList<qint64>* possible_split) {
    this->possible_split = possible_split;
    this->m_possible_split_isSet = true;
}


bool
OAIBreak::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_earliest_isSet){ isObjectUpdated = true; break;}
        if(m_latest_isSet){ isObjectUpdated = true; break;}
        if(m_duration_isSet){ isObjectUpdated = true; break;}
        if(m_max_driving_time_isSet){ isObjectUpdated = true; break;}
        if(m_initial_driving_time_isSet){ isObjectUpdated = true; break;}
        if(m_possible_split_isSet){ isObjectUpdated = true; break;}
        if(possible_split->size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

