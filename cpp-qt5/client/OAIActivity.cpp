/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIActivity.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIActivity::OAIActivity(QString json) {
    init();
    this->fromJson(json);
}

OAIActivity::OAIActivity() {
    init();
}

OAIActivity::~OAIActivity() {
    this->cleanup();
}

void
OAIActivity::init() {
    type = new QString("");
    m_type_isSet = false;
    id = new QString("");
    m_id_isSet = false;
    location_id = new QString("");
    m_location_id_isSet = false;
    arr_time = 0L;
    m_arr_time_isSet = false;
    end_time = 0L;
    m_end_time_isSet = false;
    waiting_time = 0L;
    m_waiting_time_isSet = false;
    distance = 0L;
    m_distance_isSet = false;
    driving_time = 0L;
    m_driving_time_isSet = false;
    load_before = new QList<qint32>();
    m_load_before_isSet = false;
    load_after = new QList<qint32>();
    m_load_after_isSet = false;
}

void
OAIActivity::cleanup() {
    if(type != nullptr) { 
        delete type;
    }
    if(id != nullptr) { 
        delete id;
    }
    if(location_id != nullptr) { 
        delete location_id;
    }






    if(load_before != nullptr) { 
        delete load_before;
    }

    if(load_after != nullptr) { 
        delete load_after;
    }
}

OAIActivity*
OAIActivity::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIActivity::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&type, pJson["type"], "QString", "QString");
    
    ::OpenAPI::setValue(&id, pJson["id"], "QString", "QString");
    
    ::OpenAPI::setValue(&location_id, pJson["location_id"], "QString", "QString");
    
    ::OpenAPI::setValue(&arr_time, pJson["arr_time"], "qint64", "");
    
    ::OpenAPI::setValue(&end_time, pJson["end_time"], "qint64", "");
    
    ::OpenAPI::setValue(&waiting_time, pJson["waiting_time"], "qint64", "");
    
    ::OpenAPI::setValue(&distance, pJson["distance"], "qint64", "");
    
    ::OpenAPI::setValue(&driving_time, pJson["driving_time"], "qint64", "");
    
    
    ::OpenAPI::setValue(&load_before, pJson["load_before"], "QList", "qint32");
    
    ::OpenAPI::setValue(&load_after, pJson["load_after"], "QList", "qint32");
}

QString
OAIActivity::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIActivity::asJsonObject() {
    QJsonObject obj;
    if(type != nullptr && *type != QString("")){
        toJsonValue(QString("type"), type, obj, QString("QString"));
    }
    if(id != nullptr && *id != QString("")){
        toJsonValue(QString("id"), id, obj, QString("QString"));
    }
    if(location_id != nullptr && *location_id != QString("")){
        toJsonValue(QString("location_id"), location_id, obj, QString("QString"));
    }
    if(m_arr_time_isSet){
        obj.insert("arr_time", QJsonValue(arr_time));
    }
    if(m_end_time_isSet){
        obj.insert("end_time", QJsonValue(end_time));
    }
    if(m_waiting_time_isSet){
        obj.insert("waiting_time", QJsonValue(waiting_time));
    }
    if(m_distance_isSet){
        obj.insert("distance", QJsonValue(distance));
    }
    if(m_driving_time_isSet){
        obj.insert("driving_time", QJsonValue(driving_time));
    }
    if(load_before->size() > 0){
        toJsonArray((QList<void*>*)load_before, obj, "load_before", "");
    }
    if(load_after->size() > 0){
        toJsonArray((QList<void*>*)load_after, obj, "load_after", "");
    }

    return obj;
}

QString*
OAIActivity::getType() {
    return type;
}
void
OAIActivity::setType(QString* type) {
    this->type = type;
    this->m_type_isSet = true;
}

QString*
OAIActivity::getId() {
    return id;
}
void
OAIActivity::setId(QString* id) {
    this->id = id;
    this->m_id_isSet = true;
}

QString*
OAIActivity::getLocationId() {
    return location_id;
}
void
OAIActivity::setLocationId(QString* location_id) {
    this->location_id = location_id;
    this->m_location_id_isSet = true;
}

qint64
OAIActivity::getArrTime() {
    return arr_time;
}
void
OAIActivity::setArrTime(qint64 arr_time) {
    this->arr_time = arr_time;
    this->m_arr_time_isSet = true;
}

qint64
OAIActivity::getEndTime() {
    return end_time;
}
void
OAIActivity::setEndTime(qint64 end_time) {
    this->end_time = end_time;
    this->m_end_time_isSet = true;
}

qint64
OAIActivity::getWaitingTime() {
    return waiting_time;
}
void
OAIActivity::setWaitingTime(qint64 waiting_time) {
    this->waiting_time = waiting_time;
    this->m_waiting_time_isSet = true;
}

qint64
OAIActivity::getDistance() {
    return distance;
}
void
OAIActivity::setDistance(qint64 distance) {
    this->distance = distance;
    this->m_distance_isSet = true;
}

qint64
OAIActivity::getDrivingTime() {
    return driving_time;
}
void
OAIActivity::setDrivingTime(qint64 driving_time) {
    this->driving_time = driving_time;
    this->m_driving_time_isSet = true;
}

QList<qint32>*
OAIActivity::getLoadBefore() {
    return load_before;
}
void
OAIActivity::setLoadBefore(QList<qint32>* load_before) {
    this->load_before = load_before;
    this->m_load_before_isSet = true;
}

QList<qint32>*
OAIActivity::getLoadAfter() {
    return load_after;
}
void
OAIActivity::setLoadAfter(QList<qint32>* load_after) {
    this->load_after = load_after;
    this->m_load_after_isSet = true;
}


bool
OAIActivity::isSet(){
    bool isObjectUpdated = false;
    do{
        if(type != nullptr && *type != QString("")){ isObjectUpdated = true; break;}
        if(id != nullptr && *id != QString("")){ isObjectUpdated = true; break;}
        if(location_id != nullptr && *location_id != QString("")){ isObjectUpdated = true; break;}
        if(m_arr_time_isSet){ isObjectUpdated = true; break;}
        if(m_end_time_isSet){ isObjectUpdated = true; break;}
        if(m_waiting_time_isSet){ isObjectUpdated = true; break;}
        if(m_distance_isSet){ isObjectUpdated = true; break;}
        if(m_driving_time_isSet){ isObjectUpdated = true; break;}
        if(m_load_before_isSet){ isObjectUpdated = true; break;}
        if(load_before->size() > 0){ isObjectUpdated = true; break;}
        if(m_load_after_isSet){ isObjectUpdated = true; break;}
        if(load_after->size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

