/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIIsochroneResponse.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIIsochroneResponse::OAIIsochroneResponse(QString json) {
    init();
    this->fromJson(json);
}

OAIIsochroneResponse::OAIIsochroneResponse() {
    init();
}

OAIIsochroneResponse::~OAIIsochroneResponse() {
    this->cleanup();
}

void
OAIIsochroneResponse::init() {
    polygons = new QList<OAIIsochroneResponsePolygon*>();
    m_polygons_isSet = false;
    copyrights = new QList<QString*>();
    m_copyrights_isSet = false;
}

void
OAIIsochroneResponse::cleanup() {
    if(polygons != nullptr) { 
        auto arr = polygons;
        for(auto o: *arr) { 
            delete o;
        }
        delete polygons;
    }
    if(copyrights != nullptr) { 
        auto arr = copyrights;
        for(auto o: *arr) { 
            delete o;
        }
        delete copyrights;
    }
}

OAIIsochroneResponse*
OAIIsochroneResponse::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIIsochroneResponse::fromJsonObject(QJsonObject pJson) {
    
    ::OpenAPI::setValue(&polygons, pJson["polygons"], "QList", "OAIIsochroneResponsePolygon");
    
    ::OpenAPI::setValue(&copyrights, pJson["copyrights"], "QList", "QString");
}

QString
OAIIsochroneResponse::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIIsochroneResponse::asJsonObject() {
    QJsonObject obj;
    if(polygons->size() > 0){
        toJsonArray((QList<void*>*)polygons, obj, "polygons", "OAIIsochroneResponsePolygon");
    }
    if(copyrights->size() > 0){
        toJsonArray((QList<void*>*)copyrights, obj, "copyrights", "QString");
    }

    return obj;
}

QList<OAIIsochroneResponsePolygon*>*
OAIIsochroneResponse::getPolygons() {
    return polygons;
}
void
OAIIsochroneResponse::setPolygons(QList<OAIIsochroneResponsePolygon*>* polygons) {
    this->polygons = polygons;
    this->m_polygons_isSet = true;
}

QList<QString*>*
OAIIsochroneResponse::getCopyrights() {
    return copyrights;
}
void
OAIIsochroneResponse::setCopyrights(QList<QString*>* copyrights) {
    this->copyrights = copyrights;
    this->m_copyrights_isSet = true;
}


bool
OAIIsochroneResponse::isSet(){
    bool isObjectUpdated = false;
    do{
        if(polygons->size() > 0){ isObjectUpdated = true; break;}
        if(copyrights->size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

