/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIAddress.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIAddress::OAIAddress(QString json) {
    init();
    this->fromJson(json);
}

OAIAddress::OAIAddress() {
    init();
}

OAIAddress::~OAIAddress() {
    this->cleanup();
}

void
OAIAddress::init() {
    location_id = new QString("");
    m_location_id_isSet = false;
    name = new QString("");
    m_name_isSet = false;
    lon = 0.0;
    m_lon_isSet = false;
    lat = 0.0;
    m_lat_isSet = false;
    street_hint = new QString("");
    m_street_hint_isSet = false;
}

void
OAIAddress::cleanup() {
    if(location_id != nullptr) { 
        delete location_id;
    }
    if(name != nullptr) { 
        delete name;
    }


    if(street_hint != nullptr) { 
        delete street_hint;
    }
}

OAIAddress*
OAIAddress::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIAddress::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&location_id, pJson["location_id"], "QString", "QString");
    
    ::OpenAPI::setValue(&name, pJson["name"], "QString", "QString");
    
    ::OpenAPI::setValue(&lon, pJson["lon"], "double", "");
    
    ::OpenAPI::setValue(&lat, pJson["lat"], "double", "");
    
    ::OpenAPI::setValue(&street_hint, pJson["street_hint"], "QString", "QString");
    
}

QString
OAIAddress::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIAddress::asJsonObject() {
    QJsonObject obj;
    if(location_id != nullptr && *location_id != QString("")){
        toJsonValue(QString("location_id"), location_id, obj, QString("QString"));
    }
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }
    if(m_lon_isSet){
        obj.insert("lon", QJsonValue(lon));
    }
    if(m_lat_isSet){
        obj.insert("lat", QJsonValue(lat));
    }
    if(street_hint != nullptr && *street_hint != QString("")){
        toJsonValue(QString("street_hint"), street_hint, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIAddress::getLocationId() {
    return location_id;
}
void
OAIAddress::setLocationId(QString* location_id) {
    this->location_id = location_id;
    this->m_location_id_isSet = true;
}

QString*
OAIAddress::getName() {
    return name;
}
void
OAIAddress::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

double
OAIAddress::getLon() {
    return lon;
}
void
OAIAddress::setLon(double lon) {
    this->lon = lon;
    this->m_lon_isSet = true;
}

double
OAIAddress::getLat() {
    return lat;
}
void
OAIAddress::setLat(double lat) {
    this->lat = lat;
    this->m_lat_isSet = true;
}

QString*
OAIAddress::getStreetHint() {
    return street_hint;
}
void
OAIAddress::setStreetHint(QString* street_hint) {
    this->street_hint = street_hint;
    this->m_street_hint_isSet = true;
}


bool
OAIAddress::isSet(){
    bool isObjectUpdated = false;
    do{
        if(location_id != nullptr && *location_id != QString("")){ isObjectUpdated = true; break;}
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
        if(m_lon_isSet){ isObjectUpdated = true; break;}
        if(m_lat_isSet){ isObjectUpdated = true; break;}
        if(street_hint != nullptr && *street_hint != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

