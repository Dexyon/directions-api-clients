/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIMatrixRequest.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIMatrixRequest::OAIMatrixRequest(QString json) {
    init();
    this->fromJson(json);
}

OAIMatrixRequest::OAIMatrixRequest() {
    init();
}

OAIMatrixRequest::~OAIMatrixRequest() {
    this->cleanup();
}

void
OAIMatrixRequest::init() {
    points = new QList<QList<double>*>();
    m_points_isSet = false;
    from_points = new QList<QList<double>*>();
    m_from_points_isSet = false;
    to_points = new QList<QList<double>*>();
    m_to_points_isSet = false;
    point_hints = new QList<QString*>();
    m_point_hints_isSet = false;
    from_point_hints = new QList<QString*>();
    m_from_point_hints_isSet = false;
    to_point_hints = new QList<QString*>();
    m_to_point_hints_isSet = false;
    out_arrays = new QList<QString*>();
    m_out_arrays_isSet = false;
    vehicle = new QString("");
    m_vehicle_isSet = false;
}

void
OAIMatrixRequest::cleanup() {
    if(points != nullptr) { 
        auto arr = points;
        for(auto o: *arr) { 
            for(auto o1: *o) {
                delete o1;
            }
            delete o;
        }
        delete points;
    }
    if(from_points != nullptr) { 
        auto arr = from_points;
        for(auto o: *arr) { 
            for(auto o1: *o) {
                delete o1;
            }
            delete o;
        }
        delete from_points;
    }
    if(to_points != nullptr) { 
        auto arr = to_points;
        for(auto o: *arr) { 
            for(auto o1: *o) {
                delete o1;
            }
            delete o;
        }
        delete to_points;
    }
    if(point_hints != nullptr) { 
        auto arr = point_hints;
        for(auto o: *arr) { 
            delete o;
        }
        delete point_hints;
    }
    if(from_point_hints != nullptr) { 
        auto arr = from_point_hints;
        for(auto o: *arr) { 
            delete o;
        }
        delete from_point_hints;
    }
    if(to_point_hints != nullptr) { 
        auto arr = to_point_hints;
        for(auto o: *arr) { 
            delete o;
        }
        delete to_point_hints;
    }
    if(out_arrays != nullptr) { 
        auto arr = out_arrays;
        for(auto o: *arr) { 
            delete o;
        }
        delete out_arrays;
    }
    if(vehicle != nullptr) { 
        delete vehicle;
    }
}

OAIMatrixRequest*
OAIMatrixRequest::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIMatrixRequest::fromJsonObject(QJsonObject pJson) {
    
    
    if(pJson["points"].isArray()){
        auto arr = pJson["points"].toArray();
        for (const QJsonValue & jval : arr) {
            auto points_item = new QList<double>();
            
            auto jsonval = jval.toObject();
            ::OpenAPI::setValue(points_item, jsonval, "QList", "double");
            points->push_back(points_item);
        }
    }
    
    
    if(pJson["from_points"].isArray()){
        auto arr = pJson["from_points"].toArray();
        for (const QJsonValue & jval : arr) {
            auto from_points_item = new QList<double>();
            
            auto jsonval = jval.toObject();
            ::OpenAPI::setValue(from_points_item, jsonval, "QList", "double");
            from_points->push_back(from_points_item);
        }
    }
    
    
    if(pJson["to_points"].isArray()){
        auto arr = pJson["to_points"].toArray();
        for (const QJsonValue & jval : arr) {
            auto to_points_item = new QList<double>();
            
            auto jsonval = jval.toObject();
            ::OpenAPI::setValue(to_points_item, jsonval, "QList", "double");
            to_points->push_back(to_points_item);
        }
    }
    
    ::OpenAPI::setValue(&point_hints, pJson["point_hints"], "QList", "QString");
    
    ::OpenAPI::setValue(&from_point_hints, pJson["from_point_hints"], "QList", "QString");
    
    ::OpenAPI::setValue(&to_point_hints, pJson["to_point_hints"], "QList", "QString");
    
    ::OpenAPI::setValue(&out_arrays, pJson["out_arrays"], "QList", "QString");
    ::OpenAPI::setValue(&vehicle, pJson["vehicle"], "QString", "QString");
    
}

QString
OAIMatrixRequest::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIMatrixRequest::asJsonObject() {
    QJsonObject obj;
    if(points->size() > 0){
        QJsonArray jarray;
        for(auto items : *points){
            QJsonObject jobj;
            toJsonArray((QList<void*>*)items, jobj, "points", "double");
            jarray.append(jobj.value("points"));
        }
        obj.insert("points", jarray);
    }
    if(from_points->size() > 0){
        QJsonArray jarray;
        for(auto items : *from_points){
            QJsonObject jobj;
            toJsonArray((QList<void*>*)items, jobj, "from_points", "double");
            jarray.append(jobj.value("from_points"));
        }
        obj.insert("from_points", jarray);
    }
    if(to_points->size() > 0){
        QJsonArray jarray;
        for(auto items : *to_points){
            QJsonObject jobj;
            toJsonArray((QList<void*>*)items, jobj, "to_points", "double");
            jarray.append(jobj.value("to_points"));
        }
        obj.insert("to_points", jarray);
    }
    if(point_hints->size() > 0){
        toJsonArray((QList<void*>*)point_hints, obj, "point_hints", "QString");
    }
    if(from_point_hints->size() > 0){
        toJsonArray((QList<void*>*)from_point_hints, obj, "from_point_hints", "QString");
    }
    if(to_point_hints->size() > 0){
        toJsonArray((QList<void*>*)to_point_hints, obj, "to_point_hints", "QString");
    }
    if(out_arrays->size() > 0){
        toJsonArray((QList<void*>*)out_arrays, obj, "out_arrays", "QString");
    }
    if(vehicle != nullptr && *vehicle != QString("")){
        toJsonValue(QString("vehicle"), vehicle, obj, QString("QString"));
    }

    return obj;
}

QList<QList<double>*>*
OAIMatrixRequest::getPoints() {
    return points;
}
void
OAIMatrixRequest::setPoints(QList<QList<double>*>* points) {
    this->points = points;
    this->m_points_isSet = true;
}

QList<QList<double>*>*
OAIMatrixRequest::getFromPoints() {
    return from_points;
}
void
OAIMatrixRequest::setFromPoints(QList<QList<double>*>* from_points) {
    this->from_points = from_points;
    this->m_from_points_isSet = true;
}

QList<QList<double>*>*
OAIMatrixRequest::getToPoints() {
    return to_points;
}
void
OAIMatrixRequest::setToPoints(QList<QList<double>*>* to_points) {
    this->to_points = to_points;
    this->m_to_points_isSet = true;
}

QList<QString*>*
OAIMatrixRequest::getPointHints() {
    return point_hints;
}
void
OAIMatrixRequest::setPointHints(QList<QString*>* point_hints) {
    this->point_hints = point_hints;
    this->m_point_hints_isSet = true;
}

QList<QString*>*
OAIMatrixRequest::getFromPointHints() {
    return from_point_hints;
}
void
OAIMatrixRequest::setFromPointHints(QList<QString*>* from_point_hints) {
    this->from_point_hints = from_point_hints;
    this->m_from_point_hints_isSet = true;
}

QList<QString*>*
OAIMatrixRequest::getToPointHints() {
    return to_point_hints;
}
void
OAIMatrixRequest::setToPointHints(QList<QString*>* to_point_hints) {
    this->to_point_hints = to_point_hints;
    this->m_to_point_hints_isSet = true;
}

QList<QString*>*
OAIMatrixRequest::getOutArrays() {
    return out_arrays;
}
void
OAIMatrixRequest::setOutArrays(QList<QString*>* out_arrays) {
    this->out_arrays = out_arrays;
    this->m_out_arrays_isSet = true;
}

QString*
OAIMatrixRequest::getVehicle() {
    return vehicle;
}
void
OAIMatrixRequest::setVehicle(QString* vehicle) {
    this->vehicle = vehicle;
    this->m_vehicle_isSet = true;
}


bool
OAIMatrixRequest::isSet(){
    bool isObjectUpdated = false;
    do{
        if(points->size() > 0){ isObjectUpdated = true; break;}
        if(from_points->size() > 0){ isObjectUpdated = true; break;}
        if(to_points->size() > 0){ isObjectUpdated = true; break;}
        if(point_hints->size() > 0){ isObjectUpdated = true; break;}
        if(from_point_hints->size() > 0){ isObjectUpdated = true; break;}
        if(to_point_hints->size() > 0){ isObjectUpdated = true; break;}
        if(out_arrays->size() > 0){ isObjectUpdated = true; break;}
        if(vehicle != nullptr && *vehicle != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

