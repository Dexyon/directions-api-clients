/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBreak.h
 *
 * 
 */

#ifndef OAIBreak_H_
#define OAIBreak_H_

#include <QJsonObject>


#include <QList>

#include "OAIObject.h"

namespace OpenAPI {

class OAIBreak: public OAIObject {
public:
    OAIBreak();
    OAIBreak(QString json);
    ~OAIBreak();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIBreak* fromJson(QString jsonString) override;

    qint64 getEarliest();
    void setEarliest(qint64 earliest);

    qint64 getLatest();
    void setLatest(qint64 latest);

    qint64 getDuration();
    void setDuration(qint64 duration);

    qint64 getMaxDrivingTime();
    void setMaxDrivingTime(qint64 max_driving_time);

    qint64 getInitialDrivingTime();
    void setInitialDrivingTime(qint64 initial_driving_time);

    QList<qint64>* getPossibleSplit();
    void setPossibleSplit(QList<qint64>* possible_split);


    virtual bool isSet() override;

private:
    qint64 earliest;
    bool m_earliest_isSet;

    qint64 latest;
    bool m_latest_isSet;

    qint64 duration;
    bool m_duration_isSet;

    qint64 max_driving_time;
    bool m_max_driving_time_isSet;

    qint64 initial_driving_time;
    bool m_initial_driving_time_isSet;

    QList<qint64>* possible_split;
    bool m_possible_split_isSet;

};

}

#endif /* OAIBreak_H_ */
