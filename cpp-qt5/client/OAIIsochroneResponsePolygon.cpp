/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIIsochroneResponsePolygon.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIIsochroneResponsePolygon::OAIIsochroneResponsePolygon(QString json) {
    init();
    this->fromJson(json);
}

OAIIsochroneResponsePolygon::OAIIsochroneResponsePolygon() {
    init();
}

OAIIsochroneResponsePolygon::~OAIIsochroneResponsePolygon() {
    this->cleanup();
}

void
OAIIsochroneResponsePolygon::init() {
    properties = NULL;
    m_properties_isSet = false;
    type = new QString("");
    m_type_isSet = false;
    geometry = NULL;
    m_geometry_isSet = false;
}

void
OAIIsochroneResponsePolygon::cleanup() {
    if(properties != nullptr) { 
        delete properties;
    }
    if(type != nullptr) { 
        delete type;
    }
    if(geometry != nullptr) { 
        delete geometry;
    }
}

OAIIsochroneResponsePolygon*
OAIIsochroneResponsePolygon::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIIsochroneResponsePolygon::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&properties, pJson["properties"], "OAIObject", "OAIObject");
    
    ::OpenAPI::setValue(&type, pJson["type"], "QString", "QString");
    
    ::OpenAPI::setValue(&geometry, pJson["geometry"], "OAIObject", "OAIObject");
    
}

QString
OAIIsochroneResponsePolygon::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIIsochroneResponsePolygon::asJsonObject() {
    QJsonObject obj;
    if((properties != nullptr) && (properties->isSet())){
        toJsonValue(QString("properties"), properties, obj, QString("OAIObject"));
    }
    if(type != nullptr && *type != QString("")){
        toJsonValue(QString("type"), type, obj, QString("QString"));
    }
    if((geometry != nullptr) && (geometry->isSet())){
        toJsonValue(QString("geometry"), geometry, obj, QString("OAIObject"));
    }

    return obj;
}

OAIObject*
OAIIsochroneResponsePolygon::getProperties() {
    return properties;
}
void
OAIIsochroneResponsePolygon::setProperties(OAIObject* properties) {
    this->properties = properties;
    this->m_properties_isSet = true;
}

QString*
OAIIsochroneResponsePolygon::getType() {
    return type;
}
void
OAIIsochroneResponsePolygon::setType(QString* type) {
    this->type = type;
    this->m_type_isSet = true;
}

OAIObject*
OAIIsochroneResponsePolygon::getGeometry() {
    return geometry;
}
void
OAIIsochroneResponsePolygon::setGeometry(OAIObject* geometry) {
    this->geometry = geometry;
    this->m_geometry_isSet = true;
}


bool
OAIIsochroneResponsePolygon::isSet(){
    bool isObjectUpdated = false;
    do{
        if(properties != nullptr && properties->isSet()){ isObjectUpdated = true; break;}
        if(type != nullptr && *type != QString("")){ isObjectUpdated = true; break;}
        if(geometry != nullptr && geometry->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

