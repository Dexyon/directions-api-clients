/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIActivity.h
 *
 * 
 */

#ifndef OAIActivity_H_
#define OAIActivity_H_

#include <QJsonObject>


#include <QList>
#include <QString>

#include "OAIObject.h"

namespace OpenAPI {

class OAIActivity: public OAIObject {
public:
    OAIActivity();
    OAIActivity(QString json);
    ~OAIActivity();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIActivity* fromJson(QString jsonString) override;

    QString* getType();
    void setType(QString* type);

    QString* getId();
    void setId(QString* id);

    QString* getLocationId();
    void setLocationId(QString* location_id);

    qint64 getArrTime();
    void setArrTime(qint64 arr_time);

    qint64 getEndTime();
    void setEndTime(qint64 end_time);

    qint64 getWaitingTime();
    void setWaitingTime(qint64 waiting_time);

    qint64 getDistance();
    void setDistance(qint64 distance);

    qint64 getDrivingTime();
    void setDrivingTime(qint64 driving_time);

    QList<qint32>* getLoadBefore();
    void setLoadBefore(QList<qint32>* load_before);

    QList<qint32>* getLoadAfter();
    void setLoadAfter(QList<qint32>* load_after);


    virtual bool isSet() override;

private:
    QString* type;
    bool m_type_isSet;

    QString* id;
    bool m_id_isSet;

    QString* location_id;
    bool m_location_id_isSet;

    qint64 arr_time;
    bool m_arr_time_isSet;

    qint64 end_time;
    bool m_end_time_isSet;

    qint64 waiting_time;
    bool m_waiting_time_isSet;

    qint64 distance;
    bool m_distance_isSet;

    qint64 driving_time;
    bool m_driving_time_isSet;

    QList<qint32>* load_before;
    bool m_load_before_isSet;

    QList<qint32>* load_after;
    bool m_load_after_isSet;

};

}

#endif /* OAIActivity_H_ */
