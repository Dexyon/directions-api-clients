/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRequest.h
 *
 * 
 */

#ifndef OAIRequest_H_
#define OAIRequest_H_

#include <QJsonObject>


#include "OAIOAIAlgorithm.h"
#include "OAIOAIConfiguration.h"
#include "OAIOAICostMatrix.h"
#include "OAIOAIObjective.h"
#include "OAIOAIRelation.h"
#include "OAIOAIService.h"
#include "OAIOAIShipment.h"
#include "OAIOAIVehicle.h"
#include "OAIOAIVehicleType.h"
#include <QList>

#include "OAIObject.h"

namespace OpenAPI {

class OAIRequest: public OAIObject {
public:
    OAIRequest();
    OAIRequest(QString json);
    ~OAIRequest();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIRequest* fromJson(QString jsonString) override;

    QList<OAIVehicle*>* getVehicles();
    void setVehicles(QList<OAIVehicle*>* vehicles);

    QList<OAIVehicleType*>* getVehicleTypes();
    void setVehicleTypes(QList<OAIVehicleType*>* vehicle_types);

    QList<OAIService*>* getServices();
    void setServices(QList<OAIService*>* services);

    QList<OAIShipment*>* getShipments();
    void setShipments(QList<OAIShipment*>* shipments);

    QList<OAIRelation*>* getRelations();
    void setRelations(QList<OAIRelation*>* relations);

    OAIAlgorithm* getAlgorithm();
    void setAlgorithm(OAIAlgorithm* algorithm);

    QList<OAIObjective*>* getObjectives();
    void setObjectives(QList<OAIObjective*>* objectives);

    QList<OAICostMatrix*>* getCostMatrices();
    void setCostMatrices(QList<OAICostMatrix*>* cost_matrices);

    OAIConfiguration* getConfiguration();
    void setConfiguration(OAIConfiguration* configuration);


    virtual bool isSet() override;

private:
    QList<OAIVehicle*>* vehicles;
    bool m_vehicles_isSet;

    QList<OAIVehicleType*>* vehicle_types;
    bool m_vehicle_types_isSet;

    QList<OAIService*>* services;
    bool m_services_isSet;

    QList<OAIShipment*>* shipments;
    bool m_shipments_isSet;

    QList<OAIRelation*>* relations;
    bool m_relations_isSet;

    OAIAlgorithm* algorithm;
    bool m_algorithm_isSet;

    QList<OAIObjective*>* objectives;
    bool m_objectives_isSet;

    QList<OAICostMatrix*>* cost_matrices;
    bool m_cost_matrices_isSet;

    OAIConfiguration* configuration;
    bool m_configuration_isSet;

};

}

#endif /* OAIRequest_H_ */
