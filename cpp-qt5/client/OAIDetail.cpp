/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIDetail.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIDetail::OAIDetail(QString json) {
    init();
    this->fromJson(json);
}

OAIDetail::OAIDetail() {
    init();
}

OAIDetail::~OAIDetail() {
    this->cleanup();
}

void
OAIDetail::init() {
    id = new QString("");
    m_id_isSet = false;
    code = 0;
    m_code_isSet = false;
    reason = new QString("");
    m_reason_isSet = false;
}

void
OAIDetail::cleanup() {
    if(id != nullptr) { 
        delete id;
    }

    if(reason != nullptr) { 
        delete reason;
    }
}

OAIDetail*
OAIDetail::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIDetail::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&id, pJson["id"], "QString", "QString");
    
    ::OpenAPI::setValue(&code, pJson["code"], "qint32", "");
    
    ::OpenAPI::setValue(&reason, pJson["reason"], "QString", "QString");
    
}

QString
OAIDetail::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIDetail::asJsonObject() {
    QJsonObject obj;
    if(id != nullptr && *id != QString("")){
        toJsonValue(QString("id"), id, obj, QString("QString"));
    }
    if(m_code_isSet){
        obj.insert("code", QJsonValue(code));
    }
    if(reason != nullptr && *reason != QString("")){
        toJsonValue(QString("reason"), reason, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIDetail::getId() {
    return id;
}
void
OAIDetail::setId(QString* id) {
    this->id = id;
    this->m_id_isSet = true;
}

qint32
OAIDetail::getCode() {
    return code;
}
void
OAIDetail::setCode(qint32 code) {
    this->code = code;
    this->m_code_isSet = true;
}

QString*
OAIDetail::getReason() {
    return reason;
}
void
OAIDetail::setReason(QString* reason) {
    this->reason = reason;
    this->m_reason_isSet = true;
}


bool
OAIDetail::isSet(){
    bool isObjectUpdated = false;
    do{
        if(id != nullptr && *id != QString("")){ isObjectUpdated = true; break;}
        if(m_code_isSet){ isObjectUpdated = true; break;}
        if(reason != nullptr && *reason != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

