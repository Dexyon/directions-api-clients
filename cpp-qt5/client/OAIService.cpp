/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIService.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIService::OAIService(QString json) {
    init();
    this->fromJson(json);
}

OAIService::OAIService() {
    init();
}

OAIService::~OAIService() {
    this->cleanup();
}

void
OAIService::init() {
    id = new QString("");
    m_id_isSet = false;
    type = new QString("");
    m_type_isSet = false;
    priority = 0;
    m_priority_isSet = false;
    name = new QString("");
    m_name_isSet = false;
    address = new OAIAddress();
    m_address_isSet = false;
    duration = 0L;
    m_duration_isSet = false;
    preparation_time = 0L;
    m_preparation_time_isSet = false;
    time_windows = new QList<OAITimeWindow*>();
    m_time_windows_isSet = false;
    size = new QList<qint32>();
    m_size_isSet = false;
    required_skills = new QList<QString*>();
    m_required_skills_isSet = false;
    allowed_vehicles = new QList<QString*>();
    m_allowed_vehicles_isSet = false;
    disallowed_vehicles = new QList<QString*>();
    m_disallowed_vehicles_isSet = false;
    max_time_in_vehicle = 0L;
    m_max_time_in_vehicle_isSet = false;
}

void
OAIService::cleanup() {
    if(id != nullptr) { 
        delete id;
    }
    if(type != nullptr) { 
        delete type;
    }

    if(name != nullptr) { 
        delete name;
    }
    if(address != nullptr) { 
        delete address;
    }


    if(time_windows != nullptr) { 
        auto arr = time_windows;
        for(auto o: *arr) { 
            delete o;
        }
        delete time_windows;
    }

    if(size != nullptr) { 
        delete size;
    }
    if(required_skills != nullptr) { 
        auto arr = required_skills;
        for(auto o: *arr) { 
            delete o;
        }
        delete required_skills;
    }
    if(allowed_vehicles != nullptr) { 
        auto arr = allowed_vehicles;
        for(auto o: *arr) { 
            delete o;
        }
        delete allowed_vehicles;
    }
    if(disallowed_vehicles != nullptr) { 
        auto arr = disallowed_vehicles;
        for(auto o: *arr) { 
            delete o;
        }
        delete disallowed_vehicles;
    }

}

OAIService*
OAIService::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIService::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&id, pJson["id"], "QString", "QString");
    
    ::OpenAPI::setValue(&type, pJson["type"], "QString", "QString");
    
    ::OpenAPI::setValue(&priority, pJson["priority"], "qint32", "");
    
    ::OpenAPI::setValue(&name, pJson["name"], "QString", "QString");
    
    ::OpenAPI::setValue(&address, pJson["address"], "OAIAddress", "OAIAddress");
    
    ::OpenAPI::setValue(&duration, pJson["duration"], "qint64", "");
    
    ::OpenAPI::setValue(&preparation_time, pJson["preparation_time"], "qint64", "");
    
    
    ::OpenAPI::setValue(&time_windows, pJson["time_windows"], "QList", "OAITimeWindow");
    
    ::OpenAPI::setValue(&size, pJson["size"], "QList", "qint32");
    
    ::OpenAPI::setValue(&required_skills, pJson["required_skills"], "QList", "QString");
    
    ::OpenAPI::setValue(&allowed_vehicles, pJson["allowed_vehicles"], "QList", "QString");
    
    ::OpenAPI::setValue(&disallowed_vehicles, pJson["disallowed_vehicles"], "QList", "QString");
    ::OpenAPI::setValue(&max_time_in_vehicle, pJson["max_time_in_vehicle"], "qint64", "");
    
}

QString
OAIService::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIService::asJsonObject() {
    QJsonObject obj;
    if(id != nullptr && *id != QString("")){
        toJsonValue(QString("id"), id, obj, QString("QString"));
    }
    if(type != nullptr && *type != QString("")){
        toJsonValue(QString("type"), type, obj, QString("QString"));
    }
    if(m_priority_isSet){
        obj.insert("priority", QJsonValue(priority));
    }
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }
    if((address != nullptr) && (address->isSet())){
        toJsonValue(QString("address"), address, obj, QString("OAIAddress"));
    }
    if(m_duration_isSet){
        obj.insert("duration", QJsonValue(duration));
    }
    if(m_preparation_time_isSet){
        obj.insert("preparation_time", QJsonValue(preparation_time));
    }
    if(time_windows->size() > 0){
        toJsonArray((QList<void*>*)time_windows, obj, "time_windows", "OAITimeWindow");
    }
    if(size->size() > 0){
        toJsonArray((QList<void*>*)size, obj, "size", "");
    }
    if(required_skills->size() > 0){
        toJsonArray((QList<void*>*)required_skills, obj, "required_skills", "QString");
    }
    if(allowed_vehicles->size() > 0){
        toJsonArray((QList<void*>*)allowed_vehicles, obj, "allowed_vehicles", "QString");
    }
    if(disallowed_vehicles->size() > 0){
        toJsonArray((QList<void*>*)disallowed_vehicles, obj, "disallowed_vehicles", "QString");
    }
    if(m_max_time_in_vehicle_isSet){
        obj.insert("max_time_in_vehicle", QJsonValue(max_time_in_vehicle));
    }

    return obj;
}

QString*
OAIService::getId() {
    return id;
}
void
OAIService::setId(QString* id) {
    this->id = id;
    this->m_id_isSet = true;
}

QString*
OAIService::getType() {
    return type;
}
void
OAIService::setType(QString* type) {
    this->type = type;
    this->m_type_isSet = true;
}

qint32
OAIService::getPriority() {
    return priority;
}
void
OAIService::setPriority(qint32 priority) {
    this->priority = priority;
    this->m_priority_isSet = true;
}

QString*
OAIService::getName() {
    return name;
}
void
OAIService::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

OAIAddress*
OAIService::getAddress() {
    return address;
}
void
OAIService::setAddress(OAIAddress* address) {
    this->address = address;
    this->m_address_isSet = true;
}

qint64
OAIService::getDuration() {
    return duration;
}
void
OAIService::setDuration(qint64 duration) {
    this->duration = duration;
    this->m_duration_isSet = true;
}

qint64
OAIService::getPreparationTime() {
    return preparation_time;
}
void
OAIService::setPreparationTime(qint64 preparation_time) {
    this->preparation_time = preparation_time;
    this->m_preparation_time_isSet = true;
}

QList<OAITimeWindow*>*
OAIService::getTimeWindows() {
    return time_windows;
}
void
OAIService::setTimeWindows(QList<OAITimeWindow*>* time_windows) {
    this->time_windows = time_windows;
    this->m_time_windows_isSet = true;
}

QList<qint32>*
OAIService::getSize() {
    return size;
}
void
OAIService::setSize(QList<qint32>* size) {
    this->size = size;
    this->m_size_isSet = true;
}

QList<QString*>*
OAIService::getRequiredSkills() {
    return required_skills;
}
void
OAIService::setRequiredSkills(QList<QString*>* required_skills) {
    this->required_skills = required_skills;
    this->m_required_skills_isSet = true;
}

QList<QString*>*
OAIService::getAllowedVehicles() {
    return allowed_vehicles;
}
void
OAIService::setAllowedVehicles(QList<QString*>* allowed_vehicles) {
    this->allowed_vehicles = allowed_vehicles;
    this->m_allowed_vehicles_isSet = true;
}

QList<QString*>*
OAIService::getDisallowedVehicles() {
    return disallowed_vehicles;
}
void
OAIService::setDisallowedVehicles(QList<QString*>* disallowed_vehicles) {
    this->disallowed_vehicles = disallowed_vehicles;
    this->m_disallowed_vehicles_isSet = true;
}

qint64
OAIService::getMaxTimeInVehicle() {
    return max_time_in_vehicle;
}
void
OAIService::setMaxTimeInVehicle(qint64 max_time_in_vehicle) {
    this->max_time_in_vehicle = max_time_in_vehicle;
    this->m_max_time_in_vehicle_isSet = true;
}


bool
OAIService::isSet(){
    bool isObjectUpdated = false;
    do{
        if(id != nullptr && *id != QString("")){ isObjectUpdated = true; break;}
        if(type != nullptr && *type != QString("")){ isObjectUpdated = true; break;}
        if(m_priority_isSet){ isObjectUpdated = true; break;}
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
        if(address != nullptr && address->isSet()){ isObjectUpdated = true; break;}
        if(m_duration_isSet){ isObjectUpdated = true; break;}
        if(m_preparation_time_isSet){ isObjectUpdated = true; break;}
        if(time_windows->size() > 0){ isObjectUpdated = true; break;}
        if(m_size_isSet){ isObjectUpdated = true; break;}
        if(size->size() > 0){ isObjectUpdated = true; break;}
        if(required_skills->size() > 0){ isObjectUpdated = true; break;}
        if(allowed_vehicles->size() > 0){ isObjectUpdated = true; break;}
        if(disallowed_vehicles->size() > 0){ isObjectUpdated = true; break;}
        if(m_max_time_in_vehicle_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

