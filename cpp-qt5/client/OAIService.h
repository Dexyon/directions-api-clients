/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIService.h
 *
 * 
 */

#ifndef OAIService_H_
#define OAIService_H_

#include <QJsonObject>


#include "OAIOAIAddress.h"
#include "OAIOAITimeWindow.h"
#include <QList>
#include <QString>

#include "OAIObject.h"

namespace OpenAPI {

class OAIService: public OAIObject {
public:
    OAIService();
    OAIService(QString json);
    ~OAIService();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIService* fromJson(QString jsonString) override;

    QString* getId();
    void setId(QString* id);

    QString* getType();
    void setType(QString* type);

    qint32 getPriority();
    void setPriority(qint32 priority);

    QString* getName();
    void setName(QString* name);

    OAIAddress* getAddress();
    void setAddress(OAIAddress* address);

    qint64 getDuration();
    void setDuration(qint64 duration);

    qint64 getPreparationTime();
    void setPreparationTime(qint64 preparation_time);

    QList<OAITimeWindow*>* getTimeWindows();
    void setTimeWindows(QList<OAITimeWindow*>* time_windows);

    QList<qint32>* getSize();
    void setSize(QList<qint32>* size);

    QList<QString*>* getRequiredSkills();
    void setRequiredSkills(QList<QString*>* required_skills);

    QList<QString*>* getAllowedVehicles();
    void setAllowedVehicles(QList<QString*>* allowed_vehicles);

    QList<QString*>* getDisallowedVehicles();
    void setDisallowedVehicles(QList<QString*>* disallowed_vehicles);

    qint64 getMaxTimeInVehicle();
    void setMaxTimeInVehicle(qint64 max_time_in_vehicle);


    virtual bool isSet() override;

private:
    QString* id;
    bool m_id_isSet;

    QString* type;
    bool m_type_isSet;

    qint32 priority;
    bool m_priority_isSet;

    QString* name;
    bool m_name_isSet;

    OAIAddress* address;
    bool m_address_isSet;

    qint64 duration;
    bool m_duration_isSet;

    qint64 preparation_time;
    bool m_preparation_time_isSet;

    QList<OAITimeWindow*>* time_windows;
    bool m_time_windows_isSet;

    QList<qint32>* size;
    bool m_size_isSet;

    QList<QString*>* required_skills;
    bool m_required_skills_isSet;

    QList<QString*>* allowed_vehicles;
    bool m_allowed_vehicles_isSet;

    QList<QString*>* disallowed_vehicles;
    bool m_disallowed_vehicles_isSet;

    qint64 max_time_in_vehicle;
    bool m_max_time_in_vehicle_isSet;

};

}

#endif /* OAIService_H_ */
