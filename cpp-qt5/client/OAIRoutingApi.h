/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef _OAI_OAIRoutingApi_H_
#define _OAI_OAIRoutingApi_H_

#include "OAIHttpRequest.h"

#include "OAIOAIGHError.h"
#include "OAIOAIRouteResponse.h"
#include <QString>

#include <QObject>

namespace OpenAPI {

class OAIRoutingApi: public QObject {
    Q_OBJECT

public:
    OAIRoutingApi();
    OAIRoutingApi(QString host, QString basePath);
    ~OAIRoutingApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void routeGet(QList<QString*>* point, bool points_encoded, QString* key, QString* locale, bool instructions, QString* vehicle, bool elevation, bool calc_points, QList<QString*>* point_hint, bool ch_disable, QString* weighting, bool edge_traversal, QString* algorithm, qint32 heading, qint32 heading_penalty, bool pass_through, QList<QString*>* details, qint32 round_trip_distance, qint64 round_trip_seed, qint32 alternative_route_max_paths, qint32 alternative_route_max_weight_factor, qint32 alternative_route_max_share_factor, QString* avoid);
    
private:
    void routeGetCallback (OAIHttpRequestWorker * worker);
    
signals:
    void routeGetSignal(OAIRouteResponse* summary);
    
    void routeGetSignalE(OAIRouteResponse* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void routeGetSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
