/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAISolution.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAISolution::OAISolution(QString json) {
    init();
    this->fromJson(json);
}

OAISolution::OAISolution() {
    init();
}

OAISolution::~OAISolution() {
    this->cleanup();
}

void
OAISolution::init() {
    costs = 0;
    m_costs_isSet = false;
    distance = 0;
    m_distance_isSet = false;
    time = 0L;
    m_time_isSet = false;
    transport_time = 0L;
    m_transport_time_isSet = false;
    max_operation_time = 0L;
    m_max_operation_time_isSet = false;
    waiting_time = 0L;
    m_waiting_time_isSet = false;
    no_vehicles = 0;
    m_no_vehicles_isSet = false;
    no_unassigned = 0;
    m_no_unassigned_isSet = false;
    routes = new QList<OAIRoute*>();
    m_routes_isSet = false;
    unassigned = NULL;
    m_unassigned_isSet = false;
}

void
OAISolution::cleanup() {








    if(routes != nullptr) { 
        auto arr = routes;
        for(auto o: *arr) { 
            delete o;
        }
        delete routes;
    }
    if(unassigned != nullptr) { 
        delete unassigned;
    }
}

OAISolution*
OAISolution::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAISolution::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&costs, pJson["costs"], "qint32", "");
    
    ::OpenAPI::setValue(&distance, pJson["distance"], "qint32", "");
    
    ::OpenAPI::setValue(&time, pJson["time"], "qint64", "");
    
    ::OpenAPI::setValue(&transport_time, pJson["transport_time"], "qint64", "");
    
    ::OpenAPI::setValue(&max_operation_time, pJson["max_operation_time"], "qint64", "");
    
    ::OpenAPI::setValue(&waiting_time, pJson["waiting_time"], "qint64", "");
    
    ::OpenAPI::setValue(&no_vehicles, pJson["no_vehicles"], "qint32", "");
    
    ::OpenAPI::setValue(&no_unassigned, pJson["no_unassigned"], "qint32", "");
    
    
    ::OpenAPI::setValue(&routes, pJson["routes"], "QList", "OAIRoute");
    ::OpenAPI::setValue(&unassigned, pJson["unassigned"], "OAIObject", "OAIObject");
    
}

QString
OAISolution::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAISolution::asJsonObject() {
    QJsonObject obj;
    if(m_costs_isSet){
        obj.insert("costs", QJsonValue(costs));
    }
    if(m_distance_isSet){
        obj.insert("distance", QJsonValue(distance));
    }
    if(m_time_isSet){
        obj.insert("time", QJsonValue(time));
    }
    if(m_transport_time_isSet){
        obj.insert("transport_time", QJsonValue(transport_time));
    }
    if(m_max_operation_time_isSet){
        obj.insert("max_operation_time", QJsonValue(max_operation_time));
    }
    if(m_waiting_time_isSet){
        obj.insert("waiting_time", QJsonValue(waiting_time));
    }
    if(m_no_vehicles_isSet){
        obj.insert("no_vehicles", QJsonValue(no_vehicles));
    }
    if(m_no_unassigned_isSet){
        obj.insert("no_unassigned", QJsonValue(no_unassigned));
    }
    if(routes->size() > 0){
        toJsonArray((QList<void*>*)routes, obj, "routes", "OAIRoute");
    }
    if((unassigned != nullptr) && (unassigned->isSet())){
        toJsonValue(QString("unassigned"), unassigned, obj, QString("OAIObject"));
    }

    return obj;
}

qint32
OAISolution::getCosts() {
    return costs;
}
void
OAISolution::setCosts(qint32 costs) {
    this->costs = costs;
    this->m_costs_isSet = true;
}

qint32
OAISolution::getDistance() {
    return distance;
}
void
OAISolution::setDistance(qint32 distance) {
    this->distance = distance;
    this->m_distance_isSet = true;
}

qint64
OAISolution::getTime() {
    return time;
}
void
OAISolution::setTime(qint64 time) {
    this->time = time;
    this->m_time_isSet = true;
}

qint64
OAISolution::getTransportTime() {
    return transport_time;
}
void
OAISolution::setTransportTime(qint64 transport_time) {
    this->transport_time = transport_time;
    this->m_transport_time_isSet = true;
}

qint64
OAISolution::getMaxOperationTime() {
    return max_operation_time;
}
void
OAISolution::setMaxOperationTime(qint64 max_operation_time) {
    this->max_operation_time = max_operation_time;
    this->m_max_operation_time_isSet = true;
}

qint64
OAISolution::getWaitingTime() {
    return waiting_time;
}
void
OAISolution::setWaitingTime(qint64 waiting_time) {
    this->waiting_time = waiting_time;
    this->m_waiting_time_isSet = true;
}

qint32
OAISolution::getNoVehicles() {
    return no_vehicles;
}
void
OAISolution::setNoVehicles(qint32 no_vehicles) {
    this->no_vehicles = no_vehicles;
    this->m_no_vehicles_isSet = true;
}

qint32
OAISolution::getNoUnassigned() {
    return no_unassigned;
}
void
OAISolution::setNoUnassigned(qint32 no_unassigned) {
    this->no_unassigned = no_unassigned;
    this->m_no_unassigned_isSet = true;
}

QList<OAIRoute*>*
OAISolution::getRoutes() {
    return routes;
}
void
OAISolution::setRoutes(QList<OAIRoute*>* routes) {
    this->routes = routes;
    this->m_routes_isSet = true;
}

OAIObject*
OAISolution::getUnassigned() {
    return unassigned;
}
void
OAISolution::setUnassigned(OAIObject* unassigned) {
    this->unassigned = unassigned;
    this->m_unassigned_isSet = true;
}


bool
OAISolution::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_costs_isSet){ isObjectUpdated = true; break;}
        if(m_distance_isSet){ isObjectUpdated = true; break;}
        if(m_time_isSet){ isObjectUpdated = true; break;}
        if(m_transport_time_isSet){ isObjectUpdated = true; break;}
        if(m_max_operation_time_isSet){ isObjectUpdated = true; break;}
        if(m_waiting_time_isSet){ isObjectUpdated = true; break;}
        if(m_no_vehicles_isSet){ isObjectUpdated = true; break;}
        if(m_no_unassigned_isSet){ isObjectUpdated = true; break;}
        if(routes->size() > 0){ isObjectUpdated = true; break;}
        if(unassigned != nullptr && unassigned->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

