/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRouteResponsePath.h
 *
 * A found path
 */

#ifndef OAIRouteResponsePath_H_
#define OAIRouteResponsePath_H_

#include <QJsonObject>


#include "OAIOAIResponseCoordinates.h"
#include "OAIOAIResponseInstructions.h"
#include "OAIObject.h"
#include <QList>

#include "OAIObject.h"

namespace OpenAPI {

class OAIRouteResponsePath: public OAIObject {
public:
    OAIRouteResponsePath();
    OAIRouteResponsePath(QString json);
    ~OAIRouteResponsePath();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIRouteResponsePath* fromJson(QString jsonString) override;

    double getDistance();
    void setDistance(double distance);

    qint64 getTime();
    void setTime(qint64 time);

    double getAscend();
    void setAscend(double ascend);

    double getDescend();
    void setDescend(double descend);

    OAIResponseCoordinates* getPoints();
    void setPoints(OAIResponseCoordinates* points);

    bool isPointsEncoded();
    void setPointsEncoded(bool points_encoded);

    QList<double>* getBbox();
    void setBbox(QList<double>* bbox);

    OAIResponseCoordinates* getSnappedWaypoints();
    void setSnappedWaypoints(OAIResponseCoordinates* snapped_waypoints);

    OAIResponseInstructions* getInstructions();
    void setInstructions(OAIResponseInstructions* instructions);

    OAIObject* getDetails();
    void setDetails(OAIObject* details);


    virtual bool isSet() override;

private:
    double distance;
    bool m_distance_isSet;

    qint64 time;
    bool m_time_isSet;

    double ascend;
    bool m_ascend_isSet;

    double descend;
    bool m_descend_isSet;

    OAIResponseCoordinates* points;
    bool m_points_isSet;

    bool points_encoded;
    bool m_points_encoded_isSet;

    QList<double>* bbox;
    bool m_bbox_isSet;

    OAIResponseCoordinates* snapped_waypoints;
    bool m_snapped_waypoints_isSet;

    OAIResponseInstructions* instructions;
    bool m_instructions_isSet;

    OAIObject* details;
    bool m_details_isSet;

};

}

#endif /* OAIRouteResponsePath_H_ */
