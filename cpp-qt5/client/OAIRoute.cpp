/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIRoute.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIRoute::OAIRoute(QString json) {
    init();
    this->fromJson(json);
}

OAIRoute::OAIRoute() {
    init();
}

OAIRoute::~OAIRoute() {
    this->cleanup();
}

void
OAIRoute::init() {
    vehicle_id = new QString("");
    m_vehicle_id_isSet = false;
    distance = 0L;
    m_distance_isSet = false;
    transport_time = 0L;
    m_transport_time_isSet = false;
    completion_time = 0L;
    m_completion_time_isSet = false;
    waiting_time = 0L;
    m_waiting_time_isSet = false;
    activities = new QList<OAIActivity*>();
    m_activities_isSet = false;
    points = new QList<OAIRoutePoint*>();
    m_points_isSet = false;
}

void
OAIRoute::cleanup() {
    if(vehicle_id != nullptr) { 
        delete vehicle_id;
    }




    if(activities != nullptr) { 
        auto arr = activities;
        for(auto o: *arr) { 
            delete o;
        }
        delete activities;
    }
    if(points != nullptr) { 
        auto arr = points;
        for(auto o: *arr) { 
            delete o;
        }
        delete points;
    }
}

OAIRoute*
OAIRoute::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIRoute::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&vehicle_id, pJson["vehicle_id"], "QString", "QString");
    
    ::OpenAPI::setValue(&distance, pJson["distance"], "qint64", "");
    
    ::OpenAPI::setValue(&transport_time, pJson["transport_time"], "qint64", "");
    
    ::OpenAPI::setValue(&completion_time, pJson["completion_time"], "qint64", "");
    
    ::OpenAPI::setValue(&waiting_time, pJson["waiting_time"], "qint64", "");
    
    
    ::OpenAPI::setValue(&activities, pJson["activities"], "QList", "OAIActivity");
    
    ::OpenAPI::setValue(&points, pJson["points"], "QList", "OAIRoutePoint");
}

QString
OAIRoute::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIRoute::asJsonObject() {
    QJsonObject obj;
    if(vehicle_id != nullptr && *vehicle_id != QString("")){
        toJsonValue(QString("vehicle_id"), vehicle_id, obj, QString("QString"));
    }
    if(m_distance_isSet){
        obj.insert("distance", QJsonValue(distance));
    }
    if(m_transport_time_isSet){
        obj.insert("transport_time", QJsonValue(transport_time));
    }
    if(m_completion_time_isSet){
        obj.insert("completion_time", QJsonValue(completion_time));
    }
    if(m_waiting_time_isSet){
        obj.insert("waiting_time", QJsonValue(waiting_time));
    }
    if(activities->size() > 0){
        toJsonArray((QList<void*>*)activities, obj, "activities", "OAIActivity");
    }
    if(points->size() > 0){
        toJsonArray((QList<void*>*)points, obj, "points", "OAIRoutePoint");
    }

    return obj;
}

QString*
OAIRoute::getVehicleId() {
    return vehicle_id;
}
void
OAIRoute::setVehicleId(QString* vehicle_id) {
    this->vehicle_id = vehicle_id;
    this->m_vehicle_id_isSet = true;
}

qint64
OAIRoute::getDistance() {
    return distance;
}
void
OAIRoute::setDistance(qint64 distance) {
    this->distance = distance;
    this->m_distance_isSet = true;
}

qint64
OAIRoute::getTransportTime() {
    return transport_time;
}
void
OAIRoute::setTransportTime(qint64 transport_time) {
    this->transport_time = transport_time;
    this->m_transport_time_isSet = true;
}

qint64
OAIRoute::getCompletionTime() {
    return completion_time;
}
void
OAIRoute::setCompletionTime(qint64 completion_time) {
    this->completion_time = completion_time;
    this->m_completion_time_isSet = true;
}

qint64
OAIRoute::getWaitingTime() {
    return waiting_time;
}
void
OAIRoute::setWaitingTime(qint64 waiting_time) {
    this->waiting_time = waiting_time;
    this->m_waiting_time_isSet = true;
}

QList<OAIActivity*>*
OAIRoute::getActivities() {
    return activities;
}
void
OAIRoute::setActivities(QList<OAIActivity*>* activities) {
    this->activities = activities;
    this->m_activities_isSet = true;
}

QList<OAIRoutePoint*>*
OAIRoute::getPoints() {
    return points;
}
void
OAIRoute::setPoints(QList<OAIRoutePoint*>* points) {
    this->points = points;
    this->m_points_isSet = true;
}


bool
OAIRoute::isSet(){
    bool isObjectUpdated = false;
    do{
        if(vehicle_id != nullptr && *vehicle_id != QString("")){ isObjectUpdated = true; break;}
        if(m_distance_isSet){ isObjectUpdated = true; break;}
        if(m_transport_time_isSet){ isObjectUpdated = true; break;}
        if(m_completion_time_isSet){ isObjectUpdated = true; break;}
        if(m_waiting_time_isSet){ isObjectUpdated = true; break;}
        if(activities->size() > 0){ isObjectUpdated = true; break;}
        if(points->size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

