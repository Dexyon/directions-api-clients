<?php
/**
 * Vehicle
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GraphHopper Directions API
 *
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.0.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Vehicle Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Vehicle implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Vehicle';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'vehicle_id' => 'string',
        'type_id' => 'string',
        'start_address' => '\OpenAPI\Client\Model\Address',
        'end_address' => '\OpenAPI\Client\Model\Address',
        'break' => '\OpenAPI\Client\Model\ModelBreak',
        'return_to_depot' => 'bool',
        'earliest_start' => 'int',
        'latest_end' => 'int',
        'skills' => 'string[]',
        'max_distance' => 'int',
        'max_driving_time' => 'int',
        'max_jobs' => 'int',
        'max_activities' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'vehicle_id' => null,
        'type_id' => null,
        'start_address' => null,
        'end_address' => null,
        'break' => null,
        'return_to_depot' => null,
        'earliest_start' => 'int64',
        'latest_end' => 'int64',
        'skills' => null,
        'max_distance' => 'int64',
        'max_driving_time' => 'int64',
        'max_jobs' => 'int32',
        'max_activities' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'vehicle_id' => 'vehicle_id',
        'type_id' => 'type_id',
        'start_address' => 'start_address',
        'end_address' => 'end_address',
        'break' => 'break',
        'return_to_depot' => 'return_to_depot',
        'earliest_start' => 'earliest_start',
        'latest_end' => 'latest_end',
        'skills' => 'skills',
        'max_distance' => 'max_distance',
        'max_driving_time' => 'max_driving_time',
        'max_jobs' => 'max_jobs',
        'max_activities' => 'max_activities'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'vehicle_id' => 'setVehicleId',
        'type_id' => 'setTypeId',
        'start_address' => 'setStartAddress',
        'end_address' => 'setEndAddress',
        'break' => 'setBreak',
        'return_to_depot' => 'setReturnToDepot',
        'earliest_start' => 'setEarliestStart',
        'latest_end' => 'setLatestEnd',
        'skills' => 'setSkills',
        'max_distance' => 'setMaxDistance',
        'max_driving_time' => 'setMaxDrivingTime',
        'max_jobs' => 'setMaxJobs',
        'max_activities' => 'setMaxActivities'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'vehicle_id' => 'getVehicleId',
        'type_id' => 'getTypeId',
        'start_address' => 'getStartAddress',
        'end_address' => 'getEndAddress',
        'break' => 'getBreak',
        'return_to_depot' => 'getReturnToDepot',
        'earliest_start' => 'getEarliestStart',
        'latest_end' => 'getLatestEnd',
        'skills' => 'getSkills',
        'max_distance' => 'getMaxDistance',
        'max_driving_time' => 'getMaxDrivingTime',
        'max_jobs' => 'getMaxJobs',
        'max_activities' => 'getMaxActivities'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['vehicle_id'] = isset($data['vehicle_id']) ? $data['vehicle_id'] : null;
        $this->container['type_id'] = isset($data['type_id']) ? $data['type_id'] : null;
        $this->container['start_address'] = isset($data['start_address']) ? $data['start_address'] : null;
        $this->container['end_address'] = isset($data['end_address']) ? $data['end_address'] : null;
        $this->container['break'] = isset($data['break']) ? $data['break'] : null;
        $this->container['return_to_depot'] = isset($data['return_to_depot']) ? $data['return_to_depot'] : null;
        $this->container['earliest_start'] = isset($data['earliest_start']) ? $data['earliest_start'] : null;
        $this->container['latest_end'] = isset($data['latest_end']) ? $data['latest_end'] : null;
        $this->container['skills'] = isset($data['skills']) ? $data['skills'] : null;
        $this->container['max_distance'] = isset($data['max_distance']) ? $data['max_distance'] : null;
        $this->container['max_driving_time'] = isset($data['max_driving_time']) ? $data['max_driving_time'] : null;
        $this->container['max_jobs'] = isset($data['max_jobs']) ? $data['max_jobs'] : null;
        $this->container['max_activities'] = isset($data['max_activities']) ? $data['max_activities'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets vehicle_id
     *
     * @return string|null
     */
    public function getVehicleId()
    {
        return $this->container['vehicle_id'];
    }

    /**
     * Sets vehicle_id
     *
     * @param string|null $vehicle_id Unique identifier of vehicle
     *
     * @return $this
     */
    public function setVehicleId($vehicle_id)
    {
        $this->container['vehicle_id'] = $vehicle_id;

        return $this;
    }

    /**
     * Gets type_id
     *
     * @return string|null
     */
    public function getTypeId()
    {
        return $this->container['type_id'];
    }

    /**
     * Sets type_id
     *
     * @param string|null $type_id Unique identifier referring to the available vehicle types
     *
     * @return $this
     */
    public function setTypeId($type_id)
    {
        $this->container['type_id'] = $type_id;

        return $this;
    }

    /**
     * Gets start_address
     *
     * @return \OpenAPI\Client\Model\Address|null
     */
    public function getStartAddress()
    {
        return $this->container['start_address'];
    }

    /**
     * Sets start_address
     *
     * @param \OpenAPI\Client\Model\Address|null $start_address start_address
     *
     * @return $this
     */
    public function setStartAddress($start_address)
    {
        $this->container['start_address'] = $start_address;

        return $this;
    }

    /**
     * Gets end_address
     *
     * @return \OpenAPI\Client\Model\Address|null
     */
    public function getEndAddress()
    {
        return $this->container['end_address'];
    }

    /**
     * Sets end_address
     *
     * @param \OpenAPI\Client\Model\Address|null $end_address end_address
     *
     * @return $this
     */
    public function setEndAddress($end_address)
    {
        $this->container['end_address'] = $end_address;

        return $this;
    }

    /**
     * Gets break
     *
     * @return \OpenAPI\Client\Model\ModelBreak|null
     */
    public function getBreak()
    {
        return $this->container['break'];
    }

    /**
     * Sets break
     *
     * @param \OpenAPI\Client\Model\ModelBreak|null $break break
     *
     * @return $this
     */
    public function setBreak($break)
    {
        $this->container['break'] = $break;

        return $this;
    }

    /**
     * Gets return_to_depot
     *
     * @return bool|null
     */
    public function getReturnToDepot()
    {
        return $this->container['return_to_depot'];
    }

    /**
     * Sets return_to_depot
     *
     * @param bool|null $return_to_depot Indicates whether vehicle should return to start address or not. If not, it can end at any service activity.
     *
     * @return $this
     */
    public function setReturnToDepot($return_to_depot)
    {
        $this->container['return_to_depot'] = $return_to_depot;

        return $this;
    }

    /**
     * Gets earliest_start
     *
     * @return int|null
     */
    public function getEarliestStart()
    {
        return $this->container['earliest_start'];
    }

    /**
     * Sets earliest_start
     *
     * @param int|null $earliest_start earliest start of vehicle at its start location
     *
     * @return $this
     */
    public function setEarliestStart($earliest_start)
    {
        $this->container['earliest_start'] = $earliest_start;

        return $this;
    }

    /**
     * Gets latest_end
     *
     * @return int|null
     */
    public function getLatestEnd()
    {
        return $this->container['latest_end'];
    }

    /**
     * Sets latest_end
     *
     * @param int|null $latest_end latest end of vehicle at its end location
     *
     * @return $this
     */
    public function setLatestEnd($latest_end)
    {
        $this->container['latest_end'] = $latest_end;

        return $this;
    }

    /**
     * Gets skills
     *
     * @return string[]|null
     */
    public function getSkills()
    {
        return $this->container['skills'];
    }

    /**
     * Sets skills
     *
     * @param string[]|null $skills array of skills
     *
     * @return $this
     */
    public function setSkills($skills)
    {
        $this->container['skills'] = $skills;

        return $this;
    }

    /**
     * Gets max_distance
     *
     * @return int|null
     */
    public function getMaxDistance()
    {
        return $this->container['max_distance'];
    }

    /**
     * Sets max_distance
     *
     * @param int|null $max_distance max distance of vehicle
     *
     * @return $this
     */
    public function setMaxDistance($max_distance)
    {
        $this->container['max_distance'] = $max_distance;

        return $this;
    }

    /**
     * Gets max_driving_time
     *
     * @return int|null
     */
    public function getMaxDrivingTime()
    {
        return $this->container['max_driving_time'];
    }

    /**
     * Sets max_driving_time
     *
     * @param int|null $max_driving_time max drive time of vehicle
     *
     * @return $this
     */
    public function setMaxDrivingTime($max_driving_time)
    {
        $this->container['max_driving_time'] = $max_driving_time;

        return $this;
    }

    /**
     * Gets max_jobs
     *
     * @return int|null
     */
    public function getMaxJobs()
    {
        return $this->container['max_jobs'];
    }

    /**
     * Sets max_jobs
     *
     * @param int|null $max_jobs max number of jobs the vehicle can load
     *
     * @return $this
     */
    public function setMaxJobs($max_jobs)
    {
        $this->container['max_jobs'] = $max_jobs;

        return $this;
    }

    /**
     * Gets max_activities
     *
     * @return int|null
     */
    public function getMaxActivities()
    {
        return $this->container['max_activities'];
    }

    /**
     * Sets max_activities
     *
     * @param int|null $max_activities max number of activities the vehicle can conduct
     *
     * @return $this
     */
    public function setMaxActivities($max_activities)
    {
        $this->container['max_activities'] = $max_activities;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


