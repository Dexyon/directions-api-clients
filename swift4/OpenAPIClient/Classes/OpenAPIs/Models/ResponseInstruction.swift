//
// ResponseInstruction.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



public struct ResponseInstruction: Codable {

    /** A description what the user has to do in order to follow the route. The language depends on the locale parameter. */
    public var text: String?
    /** The name of the street to turn onto in order to follow the route. */
    public var streetName: String?
    /** The distance for this instruction, in meter */
    public var distance: Double?
    /** The duration for this instruction, in ms */
    public var time: Int?
    /** An array containing the first and the last index (relative to paths[0].points) of the points for this instruction. This is useful to know for which part of the route the instructions are valid. */
    public var interval: [Int]?
    /** A number which specifies the sign to show e.g. for right turn etc &lt;br&gt;TURN_SHARP_LEFT &#x3D; -3&lt;br&gt;TURN_LEFT &#x3D; -2&lt;br&gt;TURN_SLIGHT_LEFT &#x3D; -1&lt;br&gt;CONTINUE_ON_STREET &#x3D; 0&lt;br&gt;TURN_SLIGHT_RIGHT &#x3D; 1&lt;br&gt;TURN_RIGHT &#x3D; 2&lt;br&gt;TURN_SHARP_RIGHT &#x3D; 3&lt;br&gt;FINISH &#x3D; 4&lt;br&gt;VIA_REACHED &#x3D; 5&lt;br&gt;USE_ROUNDABOUT &#x3D; 6 */
    public var sign: Int?
    /** optional - A text describing the instruction in more detail, e.g. like surface of the way, warnings or involved costs. */
    public var annotationText: String?
    /** optional - 0 stands for INFO, 1 for warning, 2 for costs, 3 for costs and warning */
    public var annotationImportance: Int?
    /** optional - Only available for USE_ROUNDABOUT instructions. The count of exits at which the route leaves the roundabout. */
    public var exitNumber: Int?
    /** optional - Only available for USE_ROUNDABOUT instructions. The radian of the route within the roundabout - 0&amp;lt;r&amp;lt;2*PI for clockwise and -2PI&amp;lt;r&amp;lt;0 for counterclockwise transit. Null if the direction of rotation is undefined. */
    public var turnAngle: Double?

    public init(text: String?, streetName: String?, distance: Double?, time: Int?, interval: [Int]?, sign: Int?, annotationText: String?, annotationImportance: Int?, exitNumber: Int?, turnAngle: Double?) {
        self.text = text
        self.streetName = streetName
        self.distance = distance
        self.time = time
        self.interval = interval
        self.sign = sign
        self.annotationText = annotationText
        self.annotationImportance = annotationImportance
        self.exitNumber = exitNumber
        self.turnAngle = turnAngle
    }

    public enum CodingKeys: String, CodingKey { 
        case text
        case streetName = "street_name"
        case distance
        case time
        case interval
        case sign
        case annotationText = "annotation_text"
        case annotationImportance = "annotation_importance"
        case exitNumber = "exit_number"
        case turnAngle = "turn_angle"
    }


}

