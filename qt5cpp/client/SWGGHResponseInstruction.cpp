/**
 * GraphHopper Directions API
 * With the GraphHopper Directions API you get reliable and fast web services for routing and more with world wide coverage. We offer A-to-B routing via the Routing API optionally with turn instructions and elevation data as well as route optimization with various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API. 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGGHResponseInstruction.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGGHResponseInstruction::SWGGHResponseInstruction(QString* json) {
    init();
    this->fromJson(*json);
}

SWGGHResponseInstruction::SWGGHResponseInstruction() {
    init();
}

SWGGHResponseInstruction::~SWGGHResponseInstruction() {
    this->cleanup();
}

void
SWGGHResponseInstruction::init() {
    text = new QString("");
    distance = 0.0;
    time = 0;
    interval = new QList<qint32>();
    sign = 0;
    annotation_text = new QString("");
    annotation_importance = 0;
    exit_number = 0;
    turn_angle = 0.0;
}

void
SWGGHResponseInstruction::cleanup() {
    
    if(text != nullptr) {
        delete text;
    }





    if(annotation_text != nullptr) {
        delete annotation_text;
    }



}

SWGGHResponseInstruction*
SWGGHResponseInstruction::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGGHResponseInstruction::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&text, pJson["text"], "QString", "QString");
    ::Swagger::setValue(&distance, pJson["distance"], "double", "");
    ::Swagger::setValue(&time, pJson["time"], "qint32", "");
    
    
    ::Swagger::setValue(&interval, pJson["interval"], "QList", "qint32");
    ::Swagger::setValue(&sign, pJson["sign"], "qint32", "");
    ::Swagger::setValue(&annotation_text, pJson["annotation_text"], "QString", "QString");
    ::Swagger::setValue(&annotation_importance, pJson["annotation_importance"], "qint32", "");
    ::Swagger::setValue(&exit_number, pJson["exit_number"], "qint32", "");
    ::Swagger::setValue(&turn_angle, pJson["turn_angle"], "double", "");
}

QString
SWGGHResponseInstruction::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGGHResponseInstruction::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    toJsonValue(QString("text"), text, obj, QString("QString"));

    obj->insert("distance", QJsonValue(distance));

    obj->insert("time", QJsonValue(time));

    QJsonArray intervalJsonArray;
    toJsonArray((QList<void*>*)interval, &intervalJsonArray, "interval", "qint32");
    obj->insert("interval", intervalJsonArray);

    obj->insert("sign", QJsonValue(sign));

    toJsonValue(QString("annotation_text"), annotation_text, obj, QString("QString"));

    obj->insert("annotation_importance", QJsonValue(annotation_importance));

    obj->insert("exit_number", QJsonValue(exit_number));

    obj->insert("turn_angle", QJsonValue(turn_angle));

    return obj;
}

QString*
SWGGHResponseInstruction::getText() {
    return text;
}
void
SWGGHResponseInstruction::setText(QString* text) {
    this->text = text;
}

double
SWGGHResponseInstruction::getDistance() {
    return distance;
}
void
SWGGHResponseInstruction::setDistance(double distance) {
    this->distance = distance;
}

qint32
SWGGHResponseInstruction::getTime() {
    return time;
}
void
SWGGHResponseInstruction::setTime(qint32 time) {
    this->time = time;
}

QList<qint32>*
SWGGHResponseInstruction::getInterval() {
    return interval;
}
void
SWGGHResponseInstruction::setInterval(QList<qint32>* interval) {
    this->interval = interval;
}

qint32
SWGGHResponseInstruction::getSign() {
    return sign;
}
void
SWGGHResponseInstruction::setSign(qint32 sign) {
    this->sign = sign;
}

QString*
SWGGHResponseInstruction::getAnnotationText() {
    return annotation_text;
}
void
SWGGHResponseInstruction::setAnnotationText(QString* annotation_text) {
    this->annotation_text = annotation_text;
}

qint32
SWGGHResponseInstruction::getAnnotationImportance() {
    return annotation_importance;
}
void
SWGGHResponseInstruction::setAnnotationImportance(qint32 annotation_importance) {
    this->annotation_importance = annotation_importance;
}

qint32
SWGGHResponseInstruction::getExitNumber() {
    return exit_number;
}
void
SWGGHResponseInstruction::setExitNumber(qint32 exit_number) {
    this->exit_number = exit_number;
}

double
SWGGHResponseInstruction::getTurnAngle() {
    return turn_angle;
}
void
SWGGHResponseInstruction::setTurnAngle(double turn_angle) {
    this->turn_angle = turn_angle;
}



} /* namespace Swagger */

