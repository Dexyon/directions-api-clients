/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGIsochroneApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {

SWGIsochroneApi::SWGIsochroneApi() {}

SWGIsochroneApi::~SWGIsochroneApi() {}

SWGIsochroneApi::SWGIsochroneApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGIsochroneApi::isochroneGet(QString* point, QString* key, qint32 time_limit, qint32 distance_limit, QString* vehicle, qint32 buckets, bool reverse_flow, QString* weighting) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/isochrone");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("point"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(point)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("time_limit"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(time_limit)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("distance_limit"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(distance_limit)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("vehicle"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(vehicle)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("buckets"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(buckets)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("reverse_flow"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(reverse_flow)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("weighting"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(weighting)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("key"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(key)));


    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGIsochroneApi::isochroneGetCallback);

    worker->execute(&input);
}

void
SWGIsochroneApi::isochroneGetCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    

    QString json(worker->response);
    SWGIsochroneResponse* output = static_cast<SWGIsochroneResponse*>(create(json, QString("SWGIsochroneResponse")));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit isochroneGetSignal(output);
    } else {
        emit isochroneGetSignalE(output, error_type, error_str);
        emit isochroneGetSignalEFull(worker, error_type, error_str);
    }
}


}
