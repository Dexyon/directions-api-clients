/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * SWGVehicleType.h
 * 
 * 
 */

#ifndef SWGVehicleType_H_
#define SWGVehicleType_H_

#include <QJsonObject>


#include <QList>
#include <QString>

#include "SWGObject.h"

namespace Swagger {

class SWGVehicleType: public SWGObject {
public:
    SWGVehicleType();
    SWGVehicleType(QString* json);
    virtual ~SWGVehicleType();
    void init();
    void cleanup();

    QString asJson ();
    QJsonObject* asJsonObject();
    void fromJsonObject(QJsonObject &json);
    SWGVehicleType* fromJson(QString &jsonString);

    QString* getTypeId();
    void setTypeId(QString* type_id);

    QString* getProfile();
    void setProfile(QString* profile);

    QList<qint32>* getCapacity();
    void setCapacity(QList<qint32>* capacity);

    double getSpeedFactor();
    void setSpeedFactor(double speed_factor);

    double getServiceTimeFactor();
    void setServiceTimeFactor(double service_time_factor);

    double getCostPerMeter();
    void setCostPerMeter(double cost_per_meter);

    double getCostPerSecond();
    void setCostPerSecond(double cost_per_second);

    double getCostPerActivation();
    void setCostPerActivation(double cost_per_activation);


    virtual bool isSet() override;

private:
    QString* type_id;
    bool m_type_id_isSet;
    
    QString* profile;
    bool m_profile_isSet;
    
    QList<qint32>* capacity;
    bool m_capacity_isSet;
    
    double speed_factor;
    bool m_speed_factor_isSet;
    
    double service_time_factor;
    bool m_service_time_factor_isSet;
    
    double cost_per_meter;
    bool m_cost_per_meter_isSet;
    
    double cost_per_second;
    bool m_cost_per_second_isSet;
    
    double cost_per_activation;
    bool m_cost_per_activation_isSet;
    
};

}

#endif /* SWGVehicleType_H_ */
