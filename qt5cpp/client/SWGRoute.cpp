/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGRoute.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGRoute::SWGRoute(QString* json) {
    init();
    this->fromJson(*json);
}

SWGRoute::SWGRoute() {
    init();
}

SWGRoute::~SWGRoute() {
    this->cleanup();
}

void
SWGRoute::init() {
    vehicle_id = new QString("");
    m_vehicle_id_isSet = false;
    distance = 0L;
    m_distance_isSet = false;
    transport_time = 0L;
    m_transport_time_isSet = false;
    completion_time = 0L;
    m_completion_time_isSet = false;
    waiting_time = 0L;
    m_waiting_time_isSet = false;
    service_duration = 0L;
    m_service_duration_isSet = false;
    preparation_time = 0L;
    m_preparation_time_isSet = false;
    activities = new QList<SWGActivity*>();
    m_activities_isSet = false;
    points = new QList<SWGRoutePoint*>();
    m_points_isSet = false;
}

void
SWGRoute::cleanup() {
    if(vehicle_id != nullptr) { 
        delete vehicle_id;
    }






    if(activities != nullptr) { 
        auto arr = activities;
        for(auto o: *arr) { 
            delete o;
        }
        delete activities;
    }
    if(points != nullptr) { 
        auto arr = points;
        for(auto o: *arr) { 
            delete o;
        }
        delete points;
    }
}

SWGRoute*
SWGRoute::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGRoute::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&vehicle_id, pJson["vehicle_id"], "QString", "QString");
    
    ::Swagger::setValue(&distance, pJson["distance"], "qint64", "");
    
    ::Swagger::setValue(&transport_time, pJson["transport_time"], "qint64", "");
    
    ::Swagger::setValue(&completion_time, pJson["completion_time"], "qint64", "");
    
    ::Swagger::setValue(&waiting_time, pJson["waiting_time"], "qint64", "");
    
    ::Swagger::setValue(&service_duration, pJson["service_duration"], "qint64", "");
    
    ::Swagger::setValue(&preparation_time, pJson["preparation_time"], "qint64", "");
    
    
    ::Swagger::setValue(&activities, pJson["activities"], "QList", "SWGActivity");
    
    ::Swagger::setValue(&points, pJson["points"], "QList", "SWGRoutePoint");
}

QString
SWGRoute::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGRoute::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    if(vehicle_id != nullptr && *vehicle_id != QString("")){
        toJsonValue(QString("vehicle_id"), vehicle_id, obj, QString("QString"));
    }
    
    if(m_distance_isSet){
        obj->insert("distance", QJsonValue(distance));
    }
    
    if(m_transport_time_isSet){
        obj->insert("transport_time", QJsonValue(transport_time));
    }
    
    if(m_completion_time_isSet){
        obj->insert("completion_time", QJsonValue(completion_time));
    }
    
    if(m_waiting_time_isSet){
        obj->insert("waiting_time", QJsonValue(waiting_time));
    }
    
    if(m_service_duration_isSet){
        obj->insert("service_duration", QJsonValue(service_duration));
    }
    
    if(m_preparation_time_isSet){
        obj->insert("preparation_time", QJsonValue(preparation_time));
    }
    
    if(activities->size() > 0){
        toJsonArray((QList<void*>*)activities, obj, "activities", "SWGActivity");
    }
    
    if(points->size() > 0){
        toJsonArray((QList<void*>*)points, obj, "points", "SWGRoutePoint");
    }

    return obj;
}

QString*
SWGRoute::getVehicleId() {
    return vehicle_id;
}
void
SWGRoute::setVehicleId(QString* vehicle_id) {
    this->vehicle_id = vehicle_id;
    this->m_vehicle_id_isSet = true;
}

qint64
SWGRoute::getDistance() {
    return distance;
}
void
SWGRoute::setDistance(qint64 distance) {
    this->distance = distance;
    this->m_distance_isSet = true;
}

qint64
SWGRoute::getTransportTime() {
    return transport_time;
}
void
SWGRoute::setTransportTime(qint64 transport_time) {
    this->transport_time = transport_time;
    this->m_transport_time_isSet = true;
}

qint64
SWGRoute::getCompletionTime() {
    return completion_time;
}
void
SWGRoute::setCompletionTime(qint64 completion_time) {
    this->completion_time = completion_time;
    this->m_completion_time_isSet = true;
}

qint64
SWGRoute::getWaitingTime() {
    return waiting_time;
}
void
SWGRoute::setWaitingTime(qint64 waiting_time) {
    this->waiting_time = waiting_time;
    this->m_waiting_time_isSet = true;
}

qint64
SWGRoute::getServiceDuration() {
    return service_duration;
}
void
SWGRoute::setServiceDuration(qint64 service_duration) {
    this->service_duration = service_duration;
    this->m_service_duration_isSet = true;
}

qint64
SWGRoute::getPreparationTime() {
    return preparation_time;
}
void
SWGRoute::setPreparationTime(qint64 preparation_time) {
    this->preparation_time = preparation_time;
    this->m_preparation_time_isSet = true;
}

QList<SWGActivity*>*
SWGRoute::getActivities() {
    return activities;
}
void
SWGRoute::setActivities(QList<SWGActivity*>* activities) {
    this->activities = activities;
    this->m_activities_isSet = true;
}

QList<SWGRoutePoint*>*
SWGRoute::getPoints() {
    return points;
}
void
SWGRoute::setPoints(QList<SWGRoutePoint*>* points) {
    this->points = points;
    this->m_points_isSet = true;
}


bool 
SWGRoute::isSet(){
    bool isObjectUpdated = false;
    do{
        if(vehicle_id != nullptr && *vehicle_id != QString("")){ isObjectUpdated = true; break;}
        if(m_distance_isSet){ isObjectUpdated = true; break;}
        if(m_transport_time_isSet){ isObjectUpdated = true; break;}
        if(m_completion_time_isSet){ isObjectUpdated = true; break;}
        if(m_waiting_time_isSet){ isObjectUpdated = true; break;}
        if(m_service_duration_isSet){ isObjectUpdated = true; break;}
        if(m_preparation_time_isSet){ isObjectUpdated = true; break;}
        if(activities->size() > 0){ isObjectUpdated = true; break;}
        if(points->size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

