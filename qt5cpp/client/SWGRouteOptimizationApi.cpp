/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGRouteOptimizationApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {
SWGRouteOptimizationApi::SWGRouteOptimizationApi() {}

SWGRouteOptimizationApi::~SWGRouteOptimizationApi() {}

SWGRouteOptimizationApi::SWGRouteOptimizationApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGRouteOptimizationApi::getSolution(QString* key, QString* job_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/vrp/solution/{jobId}");

    QString job_idPathParam("{"); job_idPathParam.append("jobId").append("}");
    fullPath.replace(job_idPathParam, stringValue(job_id));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("key"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(key)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGRouteOptimizationApi::getSolutionCallback);

    worker->execute(&input);
}

void
SWGRouteOptimizationApi::getSolutionCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGResponse* output = static_cast<SWGResponse*>(create(json, QString("SWGResponse")));
    

    worker->deleteLater();

    emit getSolutionSignal(output);
    
}
void
SWGRouteOptimizationApi::postVrp(QString* key, SWGRequest body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/vrp/optimize");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("key"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(key)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = body.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGRouteOptimizationApi::postVrpCallback);

    worker->execute(&input);
}

void
SWGRouteOptimizationApi::postVrpCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGJobId* output = static_cast<SWGJobId*>(create(json, QString("SWGJobId")));
    

    worker->deleteLater();

    emit postVrpSignal(output);
    
}
} /* namespace Swagger */
