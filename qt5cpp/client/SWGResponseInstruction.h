/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * SWGResponseInstruction.h
 * 
 * 
 */

#ifndef SWGResponseInstruction_H_
#define SWGResponseInstruction_H_

#include <QJsonObject>


#include <QList>
#include <QString>

#include "SWGObject.h"

namespace Swagger {

class SWGResponseInstruction: public SWGObject {
public:
    SWGResponseInstruction();
    SWGResponseInstruction(QString* json);
    virtual ~SWGResponseInstruction();
    void init();
    void cleanup();

    QString asJson ();
    QJsonObject* asJsonObject();
    void fromJsonObject(QJsonObject &json);
    SWGResponseInstruction* fromJson(QString &jsonString);

    QString* getText();
    void setText(QString* text);

    QString* getStreetName();
    void setStreetName(QString* street_name);

    double getDistance();
    void setDistance(double distance);

    qint32 getTime();
    void setTime(qint32 time);

    QList<qint32>* getInterval();
    void setInterval(QList<qint32>* interval);

    qint32 getSign();
    void setSign(qint32 sign);

    QString* getAnnotationText();
    void setAnnotationText(QString* annotation_text);

    qint32 getAnnotationImportance();
    void setAnnotationImportance(qint32 annotation_importance);

    qint32 getExitNumber();
    void setExitNumber(qint32 exit_number);

    double getTurnAngle();
    void setTurnAngle(double turn_angle);


    virtual bool isSet() override;

private:
    QString* text;
    bool m_text_isSet;
    
    QString* street_name;
    bool m_street_name_isSet;
    
    double distance;
    bool m_distance_isSet;
    
    qint32 time;
    bool m_time_isSet;
    
    QList<qint32>* interval;
    bool m_interval_isSet;
    
    qint32 sign;
    bool m_sign_isSet;
    
    QString* annotation_text;
    bool m_annotation_text_isSet;
    
    qint32 annotation_importance;
    bool m_annotation_importance_isSet;
    
    qint32 exit_number;
    bool m_exit_number_isSet;
    
    double turn_angle;
    bool m_turn_angle_isSet;
    
};

}

#endif /* SWGResponseInstruction_H_ */
