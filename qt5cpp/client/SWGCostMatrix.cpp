/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGCostMatrix.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGCostMatrix::SWGCostMatrix(QString* json) {
    init();
    this->fromJson(*json);
}

SWGCostMatrix::SWGCostMatrix() {
    init();
}

SWGCostMatrix::~SWGCostMatrix() {
    this->cleanup();
}

void
SWGCostMatrix::init() {
    type = new QString("");
    m_type_isSet = false;
    url = new QString("");
    m_url_isSet = false;
    location_ids = new QList<QString*>();
    m_location_ids_isSet = false;
    data = new SWGCostMatrix_data();
    m_data_isSet = false;
    profile = new QString("");
    m_profile_isSet = false;
}

void
SWGCostMatrix::cleanup() {
    if(type != nullptr) { 
        delete type;
    }
    if(url != nullptr) { 
        delete url;
    }
    if(location_ids != nullptr) { 
        auto arr = location_ids;
        for(auto o: *arr) { 
            delete o;
        }
        delete location_ids;
    }
    if(data != nullptr) { 
        delete data;
    }
    if(profile != nullptr) { 
        delete profile;
    }
}

SWGCostMatrix*
SWGCostMatrix::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGCostMatrix::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&type, pJson["type"], "QString", "QString");
    
    ::Swagger::setValue(&url, pJson["url"], "QString", "QString");
    
    
    ::Swagger::setValue(&location_ids, pJson["location_ids"], "QList", "QString");
    ::Swagger::setValue(&data, pJson["data"], "SWGCostMatrix_data", "SWGCostMatrix_data");
    
    ::Swagger::setValue(&profile, pJson["profile"], "QString", "QString");
    
}

QString
SWGCostMatrix::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGCostMatrix::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    if(type != nullptr && *type != QString("")){
        toJsonValue(QString("type"), type, obj, QString("QString"));
    }
    
    if(url != nullptr && *url != QString("")){
        toJsonValue(QString("url"), url, obj, QString("QString"));
    }
    
    if(location_ids->size() > 0){
        toJsonArray((QList<void*>*)location_ids, obj, "location_ids", "QString");
    }
     
    if((data != nullptr) && (data->isSet())){
        toJsonValue(QString("data"), data, obj, QString("SWGCostMatrix_data"));
    }
    
    if(profile != nullptr && *profile != QString("")){
        toJsonValue(QString("profile"), profile, obj, QString("QString"));
    }

    return obj;
}

QString*
SWGCostMatrix::getType() {
    return type;
}
void
SWGCostMatrix::setType(QString* type) {
    this->type = type;
    this->m_type_isSet = true;
}

QString*
SWGCostMatrix::getUrl() {
    return url;
}
void
SWGCostMatrix::setUrl(QString* url) {
    this->url = url;
    this->m_url_isSet = true;
}

QList<QString*>*
SWGCostMatrix::getLocationIds() {
    return location_ids;
}
void
SWGCostMatrix::setLocationIds(QList<QString*>* location_ids) {
    this->location_ids = location_ids;
    this->m_location_ids_isSet = true;
}

SWGCostMatrix_data*
SWGCostMatrix::getData() {
    return data;
}
void
SWGCostMatrix::setData(SWGCostMatrix_data* data) {
    this->data = data;
    this->m_data_isSet = true;
}

QString*
SWGCostMatrix::getProfile() {
    return profile;
}
void
SWGCostMatrix::setProfile(QString* profile) {
    this->profile = profile;
    this->m_profile_isSet = true;
}


bool 
SWGCostMatrix::isSet(){
    bool isObjectUpdated = false;
    do{
        if(type != nullptr && *type != QString("")){ isObjectUpdated = true; break;}
        if(url != nullptr && *url != QString("")){ isObjectUpdated = true; break;}
        if(location_ids->size() > 0){ isObjectUpdated = true; break;}
        if(data != nullptr && data->isSet()){ isObjectUpdated = true; break;}
        if(profile != nullptr && *profile != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

