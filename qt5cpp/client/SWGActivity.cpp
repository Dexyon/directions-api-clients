/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGActivity.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGActivity::SWGActivity(QString* json) {
    init();
    this->fromJson(*json);
}

SWGActivity::SWGActivity() {
    init();
}

SWGActivity::~SWGActivity() {
    this->cleanup();
}

void
SWGActivity::init() {
    type = new QString("");
    m_type_isSet = false;
    id = new QString("");
    m_id_isSet = false;
    location_id = new QString("");
    m_location_id_isSet = false;
    address = new SWGAddress();
    m_address_isSet = false;
    arr_time = 0L;
    m_arr_time_isSet = false;
    end_time = 0L;
    m_end_time_isSet = false;
    end_date_time = new QString("");
    m_end_date_time_isSet = false;
    arr_date_time = new QString("");
    m_arr_date_time_isSet = false;
    waiting_time = 0L;
    m_waiting_time_isSet = false;
    preparation_time = 0L;
    m_preparation_time_isSet = false;
    distance = 0L;
    m_distance_isSet = false;
    driving_time = 0L;
    m_driving_time_isSet = false;
    load_before = new QList<qint32>();
    m_load_before_isSet = false;
    load_after = new QList<qint32>();
    m_load_after_isSet = false;
}

void
SWGActivity::cleanup() {
    if(type != nullptr) { 
        delete type;
    }
    if(id != nullptr) { 
        delete id;
    }
    if(location_id != nullptr) { 
        delete location_id;
    }
    if(address != nullptr) { 
        delete address;
    }


    if(end_date_time != nullptr) { 
        delete end_date_time;
    }
    if(arr_date_time != nullptr) { 
        delete arr_date_time;
    }






}

SWGActivity*
SWGActivity::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGActivity::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&type, pJson["type"], "QString", "QString");
    
    ::Swagger::setValue(&id, pJson["id"], "QString", "QString");
    
    ::Swagger::setValue(&location_id, pJson["location_id"], "QString", "QString");
    
    ::Swagger::setValue(&address, pJson["address"], "SWGAddress", "SWGAddress");
    
    ::Swagger::setValue(&arr_time, pJson["arr_time"], "qint64", "");
    
    ::Swagger::setValue(&end_time, pJson["end_time"], "qint64", "");
    
    ::Swagger::setValue(&end_date_time, pJson["end_date_time"], "QString", "QString");
    
    ::Swagger::setValue(&arr_date_time, pJson["arr_date_time"], "QString", "QString");
    
    ::Swagger::setValue(&waiting_time, pJson["waiting_time"], "qint64", "");
    
    ::Swagger::setValue(&preparation_time, pJson["preparation_time"], "qint64", "");
    
    ::Swagger::setValue(&distance, pJson["distance"], "qint64", "");
    
    ::Swagger::setValue(&driving_time, pJson["driving_time"], "qint64", "");
    
    
    ::Swagger::setValue(&load_before, pJson["load_before"], "QList", "qint32");
    
    ::Swagger::setValue(&load_after, pJson["load_after"], "QList", "qint32");
}

QString
SWGActivity::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGActivity::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    if(type != nullptr && *type != QString("")){
        toJsonValue(QString("type"), type, obj, QString("QString"));
    }
    
    if(id != nullptr && *id != QString("")){
        toJsonValue(QString("id"), id, obj, QString("QString"));
    }
    
    if(location_id != nullptr && *location_id != QString("")){
        toJsonValue(QString("location_id"), location_id, obj, QString("QString"));
    }
     
    if((address != nullptr) && (address->isSet())){
        toJsonValue(QString("address"), address, obj, QString("SWGAddress"));
    }
    
    if(m_arr_time_isSet){
        obj->insert("arr_time", QJsonValue(arr_time));
    }
    
    if(m_end_time_isSet){
        obj->insert("end_time", QJsonValue(end_time));
    }
    
    if(end_date_time != nullptr && *end_date_time != QString("")){
        toJsonValue(QString("end_date_time"), end_date_time, obj, QString("QString"));
    }
    
    if(arr_date_time != nullptr && *arr_date_time != QString("")){
        toJsonValue(QString("arr_date_time"), arr_date_time, obj, QString("QString"));
    }
    
    if(m_waiting_time_isSet){
        obj->insert("waiting_time", QJsonValue(waiting_time));
    }
    
    if(m_preparation_time_isSet){
        obj->insert("preparation_time", QJsonValue(preparation_time));
    }
    
    if(m_distance_isSet){
        obj->insert("distance", QJsonValue(distance));
    }
    
    if(m_driving_time_isSet){
        obj->insert("driving_time", QJsonValue(driving_time));
    }
    
    if(load_before->size() > 0){
        toJsonArray((QList<void*>*)load_before, obj, "load_before", "");
    }
    
    if(load_after->size() > 0){
        toJsonArray((QList<void*>*)load_after, obj, "load_after", "");
    }

    return obj;
}

QString*
SWGActivity::getType() {
    return type;
}
void
SWGActivity::setType(QString* type) {
    this->type = type;
    this->m_type_isSet = true;
}

QString*
SWGActivity::getId() {
    return id;
}
void
SWGActivity::setId(QString* id) {
    this->id = id;
    this->m_id_isSet = true;
}

QString*
SWGActivity::getLocationId() {
    return location_id;
}
void
SWGActivity::setLocationId(QString* location_id) {
    this->location_id = location_id;
    this->m_location_id_isSet = true;
}

SWGAddress*
SWGActivity::getAddress() {
    return address;
}
void
SWGActivity::setAddress(SWGAddress* address) {
    this->address = address;
    this->m_address_isSet = true;
}

qint64
SWGActivity::getArrTime() {
    return arr_time;
}
void
SWGActivity::setArrTime(qint64 arr_time) {
    this->arr_time = arr_time;
    this->m_arr_time_isSet = true;
}

qint64
SWGActivity::getEndTime() {
    return end_time;
}
void
SWGActivity::setEndTime(qint64 end_time) {
    this->end_time = end_time;
    this->m_end_time_isSet = true;
}

QString*
SWGActivity::getEndDateTime() {
    return end_date_time;
}
void
SWGActivity::setEndDateTime(QString* end_date_time) {
    this->end_date_time = end_date_time;
    this->m_end_date_time_isSet = true;
}

QString*
SWGActivity::getArrDateTime() {
    return arr_date_time;
}
void
SWGActivity::setArrDateTime(QString* arr_date_time) {
    this->arr_date_time = arr_date_time;
    this->m_arr_date_time_isSet = true;
}

qint64
SWGActivity::getWaitingTime() {
    return waiting_time;
}
void
SWGActivity::setWaitingTime(qint64 waiting_time) {
    this->waiting_time = waiting_time;
    this->m_waiting_time_isSet = true;
}

qint64
SWGActivity::getPreparationTime() {
    return preparation_time;
}
void
SWGActivity::setPreparationTime(qint64 preparation_time) {
    this->preparation_time = preparation_time;
    this->m_preparation_time_isSet = true;
}

qint64
SWGActivity::getDistance() {
    return distance;
}
void
SWGActivity::setDistance(qint64 distance) {
    this->distance = distance;
    this->m_distance_isSet = true;
}

qint64
SWGActivity::getDrivingTime() {
    return driving_time;
}
void
SWGActivity::setDrivingTime(qint64 driving_time) {
    this->driving_time = driving_time;
    this->m_driving_time_isSet = true;
}

QList<qint32>*
SWGActivity::getLoadBefore() {
    return load_before;
}
void
SWGActivity::setLoadBefore(QList<qint32>* load_before) {
    this->load_before = load_before;
    this->m_load_before_isSet = true;
}

QList<qint32>*
SWGActivity::getLoadAfter() {
    return load_after;
}
void
SWGActivity::setLoadAfter(QList<qint32>* load_after) {
    this->load_after = load_after;
    this->m_load_after_isSet = true;
}


bool 
SWGActivity::isSet(){
    bool isObjectUpdated = false;
    do{
        if(type != nullptr && *type != QString("")){ isObjectUpdated = true; break;}
        if(id != nullptr && *id != QString("")){ isObjectUpdated = true; break;}
        if(location_id != nullptr && *location_id != QString("")){ isObjectUpdated = true; break;}
        if(address != nullptr && address->isSet()){ isObjectUpdated = true; break;}
        if(m_arr_time_isSet){ isObjectUpdated = true; break;}
        if(m_end_time_isSet){ isObjectUpdated = true; break;}
        if(end_date_time != nullptr && *end_date_time != QString("")){ isObjectUpdated = true; break;}
        if(arr_date_time != nullptr && *arr_date_time != QString("")){ isObjectUpdated = true; break;}
        if(m_waiting_time_isSet){ isObjectUpdated = true; break;}
        if(m_preparation_time_isSet){ isObjectUpdated = true; break;}
        if(m_distance_isSet){ isObjectUpdated = true; break;}
        if(m_driving_time_isSet){ isObjectUpdated = true; break;}
        if(m_load_before_isSet){ isObjectUpdated = true; break;}if(load_before->size() > 0){ isObjectUpdated = true; break;}
        if(m_load_after_isSet){ isObjectUpdated = true; break;}if(load_after->size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

