/**
 * GraphHopper Directions API
 * With the GraphHopper Directions API you get reliable and fast web services for routing and more with world wide coverage. We offer A-to-B routing via the Routing API optionally with turn instructions and elevation data as well as route optimization with various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API. 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGGHRouteResponse.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGGHRouteResponse::SWGGHRouteResponse(QString* json) {
    init();
    this->fromJson(*json);
}

SWGGHRouteResponse::SWGGHRouteResponse() {
    init();
}

SWGGHRouteResponse::~SWGGHRouteResponse() {
    this->cleanup();
}

void
SWGGHRouteResponse::init() {
    paths = new QList<SWGGHRouteResponsePath*>();
    info = new SWGGHResponseInfo();
}

void
SWGGHRouteResponse::cleanup() {
    
    if(paths != nullptr) {
        QList<SWGGHRouteResponsePath*>* arr = paths;
        foreach(SWGGHRouteResponsePath* o, *arr) {
            delete o;
        }
        delete paths;
    }

    if(info != nullptr) {
        delete info;
    }
}

SWGGHRouteResponse*
SWGGHRouteResponse::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGGHRouteResponse::fromJsonObject(QJsonObject &pJson) {
    
    ::Swagger::setValue(&paths, pJson["paths"], "QList", "SWGGHRouteResponsePath");
    
    ::Swagger::setValue(&info, pJson["info"], "SWGGHResponseInfo", "SWGGHResponseInfo");
}

QString
SWGGHRouteResponse::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGGHRouteResponse::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    QJsonArray pathsJsonArray;
    toJsonArray((QList<void*>*)paths, &pathsJsonArray, "paths", "SWGGHRouteResponsePath");
    obj->insert("paths", pathsJsonArray);

    toJsonValue(QString("info"), info, obj, QString("SWGGHResponseInfo"));

    return obj;
}

QList<SWGGHRouteResponsePath*>*
SWGGHRouteResponse::getPaths() {
    return paths;
}
void
SWGGHRouteResponse::setPaths(QList<SWGGHRouteResponsePath*>* paths) {
    this->paths = paths;
}

SWGGHResponseInfo*
SWGGHRouteResponse::getInfo() {
    return info;
}
void
SWGGHRouteResponse::setInfo(SWGGHResponseInfo* info) {
    this->info = info;
}



} /* namespace Swagger */

