/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGGHGeocodingLocation.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGGHGeocodingLocation::SWGGHGeocodingLocation(QString* json) {
    init();
    this->fromJson(*json);
}

SWGGHGeocodingLocation::SWGGHGeocodingLocation() {
    init();
}

SWGGHGeocodingLocation::~SWGGHGeocodingLocation() {
    this->cleanup();
}

void
SWGGHGeocodingLocation::init() {
    point = new SWGGHGeocodingPoint();
    osm_id = new QString("");
    osm_type = new QString("");
    name = new QString("");
    country = new QString("");
    city = new QString("");
    state = new QString("");
    street = new QString("");
    housenumber = new QString("");
    postcode = new QString("");
}

void
SWGGHGeocodingLocation::cleanup() {
    
    if(point != nullptr) {
        delete point;
    }

    if(osm_id != nullptr) {
        delete osm_id;
    }

    if(osm_type != nullptr) {
        delete osm_type;
    }

    if(name != nullptr) {
        delete name;
    }

    if(country != nullptr) {
        delete country;
    }

    if(city != nullptr) {
        delete city;
    }

    if(state != nullptr) {
        delete state;
    }

    if(street != nullptr) {
        delete street;
    }

    if(housenumber != nullptr) {
        delete housenumber;
    }

    if(postcode != nullptr) {
        delete postcode;
    }
}

SWGGHGeocodingLocation*
SWGGHGeocodingLocation::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGGHGeocodingLocation::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&point, pJson["point"], "SWGGHGeocodingPoint", "SWGGHGeocodingPoint");
    ::Swagger::setValue(&osm_id, pJson["osm_id"], "QString", "QString");
    ::Swagger::setValue(&osm_type, pJson["osm_type"], "QString", "QString");
    ::Swagger::setValue(&name, pJson["name"], "QString", "QString");
    ::Swagger::setValue(&country, pJson["country"], "QString", "QString");
    ::Swagger::setValue(&city, pJson["city"], "QString", "QString");
    ::Swagger::setValue(&state, pJson["state"], "QString", "QString");
    ::Swagger::setValue(&street, pJson["street"], "QString", "QString");
    ::Swagger::setValue(&housenumber, pJson["housenumber"], "QString", "QString");
    ::Swagger::setValue(&postcode, pJson["postcode"], "QString", "QString");
}

QString
SWGGHGeocodingLocation::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGGHGeocodingLocation::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    toJsonValue(QString("point"), point, obj, QString("SWGGHGeocodingPoint"));

    toJsonValue(QString("osm_id"), osm_id, obj, QString("QString"));

    toJsonValue(QString("osm_type"), osm_type, obj, QString("QString"));

    toJsonValue(QString("name"), name, obj, QString("QString"));

    toJsonValue(QString("country"), country, obj, QString("QString"));

    toJsonValue(QString("city"), city, obj, QString("QString"));

    toJsonValue(QString("state"), state, obj, QString("QString"));

    toJsonValue(QString("street"), street, obj, QString("QString"));

    toJsonValue(QString("housenumber"), housenumber, obj, QString("QString"));

    toJsonValue(QString("postcode"), postcode, obj, QString("QString"));

    return obj;
}

SWGGHGeocodingPoint*
SWGGHGeocodingLocation::getPoint() {
    return point;
}
void
SWGGHGeocodingLocation::setPoint(SWGGHGeocodingPoint* point) {
    this->point = point;
}

QString*
SWGGHGeocodingLocation::getOsmId() {
    return osm_id;
}
void
SWGGHGeocodingLocation::setOsmId(QString* osm_id) {
    this->osm_id = osm_id;
}

QString*
SWGGHGeocodingLocation::getOsmType() {
    return osm_type;
}
void
SWGGHGeocodingLocation::setOsmType(QString* osm_type) {
    this->osm_type = osm_type;
}

QString*
SWGGHGeocodingLocation::getName() {
    return name;
}
void
SWGGHGeocodingLocation::setName(QString* name) {
    this->name = name;
}

QString*
SWGGHGeocodingLocation::getCountry() {
    return country;
}
void
SWGGHGeocodingLocation::setCountry(QString* country) {
    this->country = country;
}

QString*
SWGGHGeocodingLocation::getCity() {
    return city;
}
void
SWGGHGeocodingLocation::setCity(QString* city) {
    this->city = city;
}

QString*
SWGGHGeocodingLocation::getState() {
    return state;
}
void
SWGGHGeocodingLocation::setState(QString* state) {
    this->state = state;
}

QString*
SWGGHGeocodingLocation::getStreet() {
    return street;
}
void
SWGGHGeocodingLocation::setStreet(QString* street) {
    this->street = street;
}

QString*
SWGGHGeocodingLocation::getHousenumber() {
    return housenumber;
}
void
SWGGHGeocodingLocation::setHousenumber(QString* housenumber) {
    this->housenumber = housenumber;
}

QString*
SWGGHGeocodingLocation::getPostcode() {
    return postcode;
}
void
SWGGHGeocodingLocation::setPostcode(QString* postcode) {
    this->postcode = postcode;
}



} /* namespace Swagger */

