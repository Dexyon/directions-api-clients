=begin comment

GraphHopper Directions API

With the GraphHopper Directions API you get reliable and fast web services for routing and more with world wide coverage. We offer A-to-B routing via the Routing API optionally with turn instructions and elevation data as well as route optimization with various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API. 

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::SwaggerClient::Object::GHRouteResponsePath;

require 5.6.0;
use strict;
use warnings;
use utf8;
use JSON qw(decode_json);
use Data::Dumper;
use Module::Runtime qw(use_module);
use Log::Any qw($log);
use Date::Parse;
use DateTime;

use base ("Class::Accessor", "Class::Data::Inheritable");


#
#A found path
#
# NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
# REF: https://github.com/swagger-api/swagger-codegen
#

=begin comment

GraphHopper Directions API

With the GraphHopper Directions API you get reliable and fast web services for routing and more with world wide coverage. We offer A-to-B routing via the Routing API optionally with turn instructions and elevation data as well as route optimization with various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API. 

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
__PACKAGE__->mk_classdata('attribute_map' => {});
__PACKAGE__->mk_classdata('swagger_types' => {});
__PACKAGE__->mk_classdata('method_documentation' => {}); 
__PACKAGE__->mk_classdata('class_documentation' => {});

# new object
sub new { 
    my ($class, %args) = @_; 

	my $self = bless {}, $class;
	
	foreach my $attribute (keys %{$class->attribute_map}) {
		my $args_key = $class->attribute_map->{$attribute};
		$self->$attribute( $args{ $args_key } );
	}
	
	return $self;
}  

# return perl hash
sub to_hash {
    return decode_json(JSON->new->convert_blessed->encode( shift ));
}

# used by JSON for serialization
sub TO_JSON { 
    my $self = shift;
    my $_data = {};
    foreach my $_key (keys %{$self->attribute_map}) {
        if (defined $self->{$_key}) {
            $_data->{$self->attribute_map->{$_key}} = $self->{$_key};
        }
    }
    return $_data;
}

# from Perl hashref
sub from_hash {
    my ($self, $hash) = @_;

    # loop through attributes and use swagger_types to deserialize the data
    while ( my ($_key, $_type) = each %{$self->swagger_types} ) {
    	my $_json_attribute = $self->attribute_map->{$_key}; 
        if ($_type =~ /^array\[/i) { # array
            my $_subclass = substr($_type, 6, -1);
            my @_array = ();
            foreach my $_element (@{$hash->{$_json_attribute}}) {
                push @_array, $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \@_array;
        } elsif (exists $hash->{$_json_attribute}) { #hash(model), primitive, datetime
            $self->{$_key} = $self->_deserialize($_type, $hash->{$_json_attribute});
        } else {
        	$log->debugf("Warning: %s (%s) does not exist in input hash\n", $_key, $_json_attribute);
        }
    }
  
    return $self;
}

# deserialize non-array data
sub _deserialize {
    my ($self, $type, $data) = @_;
    $log->debugf("deserializing %s with %s",Dumper($data), $type);
        
    if ($type eq 'DateTime') {
        return DateTime->from_epoch(epoch => str2time($data));
    } elsif ( grep( /^$type$/, ('int', 'double', 'string', 'boolean'))) {
        return $data;
    } else { # hash(model)
        my $_instance = eval "WWW::SwaggerClient::Object::$type->new()";
        return $_instance->from_hash($data);
    }
}



__PACKAGE__->class_documentation({description => 'A found path',
                                  class => 'GHRouteResponsePath',
                                  required => [], # TODO
}                                 );

__PACKAGE__->method_documentation({
    'distance' => {
    	datatype => 'double',
    	base_name => 'distance',
    	description => 'The total distance of the route, in meter',
    	format => '',
    	read_only => '',
    		},
    'time' => {
    	datatype => 'int',
    	base_name => 'time',
    	description => 'The total time of the route, in ms',
    	format => '',
    	read_only => '',
    		},
    'ascend' => {
    	datatype => 'double',
    	base_name => 'ascend',
    	description => '',
    	format => '',
    	read_only => '',
    		},
    'descend' => {
    	datatype => 'double',
    	base_name => 'descend',
    	description => 'The total descend (downhill) of the route, in meter',
    	format => '',
    	read_only => '',
    		},
    'points' => {
    	datatype => 'GHResponseCoordinates',
    	base_name => 'points',
    	description => '',
    	format => '',
    	read_only => '',
    		},
    'points_encoded' => {
    	datatype => 'boolean',
    	base_name => 'points_encoded',
    	description => 'Is true if the points are encoded, if not paths[0].points contains the geo json of the path (then order is lon,lat,elevation), which is easier to handle but consumes more bandwidth compared to encoded version',
    	format => '',
    	read_only => '',
    		},
    'bbox' => {
    	datatype => 'ARRAY[double]',
    	base_name => 'bbox',
    	description => 'The bounding box of the route, format &lt;br&gt; minLon, minLat, maxLon, maxLat',
    	format => '',
    	read_only => '',
    		},
    'snapped_waypoints' => {
    	datatype => 'GHResponseCoordinates',
    	base_name => 'snapped_waypoints',
    	description => '',
    	format => '',
    	read_only => '',
    		},
    'instructions' => {
    	datatype => 'GHResponseInstructions',
    	base_name => 'instructions',
    	description => '',
    	format => '',
    	read_only => '',
    		},
});

__PACKAGE__->swagger_types( {
    'distance' => 'double',
    'time' => 'int',
    'ascend' => 'double',
    'descend' => 'double',
    'points' => 'GHResponseCoordinates',
    'points_encoded' => 'boolean',
    'bbox' => 'ARRAY[double]',
    'snapped_waypoints' => 'GHResponseCoordinates',
    'instructions' => 'GHResponseInstructions'
} );

__PACKAGE__->attribute_map( {
    'distance' => 'distance',
    'time' => 'time',
    'ascend' => 'ascend',
    'descend' => 'descend',
    'points' => 'points',
    'points_encoded' => 'points_encoded',
    'bbox' => 'bbox',
    'snapped_waypoints' => 'snapped_waypoints',
    'instructions' => 'instructions'
} );

__PACKAGE__->mk_accessors(keys %{__PACKAGE__->attribute_map});


1;
