/*
 * GraphHopper Directions API
 *
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package graphhopper

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type RoutingApiService service

/* 
RoutingApiService Routing Request
The GraphHopper Routing API allows to calculate route and implement navigation via the turn instructions
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param point Specify multiple points for which the route should be calculated. The order is important. Specify at least two points.
 * @param pointsEncoded IMPORTANT- TODO - currently you have to pass false for the swagger client - Have not found a way to force add a parameter. If &#x60;false&#x60; the coordinates in &#x60;point&#x60; and &#x60;snapped_waypoints&#x60; are returned as array using the order [lon,lat,elevation] for every point. If &#x60;true&#x60; the coordinates will be encoded as string leading to less bandwith usage. You&#39;ll need a special handling for the decoding of this string on the client-side. We provide open source code in [Java](https://github.com/graphhopper/graphhopper/blob/d70b63660ac5200b03c38ba3406b8f93976628a6/web/src/main/java/com/graphhopper/http/WebHelper.java#L43) and [JavaScript](https://github.com/graphhopper/graphhopper/blob/d70b63660ac5200b03c38ba3406b8f93976628a6/web/src/main/webapp/js/ghrequest.js#L139). It is especially important to use no 3rd party client if you set &#x60;elevation&#x3D;true&#x60;!
 * @param key Get your key at graphhopper.com
 * @param optional nil or *RouteGetOpts - Optional Parameters:
 * @param "Locale" (optional.String) -  The locale of the resulting turn instructions. E.g. `pt_PT` for Portuguese or `de` for German
 * @param "Instructions" (optional.Bool) -  If instruction should be calculated and returned
 * @param "Vehicle" (optional.String) -  The vehicle for which the route should be calculated. Other vehicles are foot, small_truck, ...
 * @param "Elevation" (optional.Bool) -  If `true` a third dimension - the elevation - is included in the polyline or in the GeoJson. If enabled you have to use a modified version of the decoding method or set points_encoded to `false`. See the points_encoded attribute for more details. Additionally a request can fail if the vehicle does not support elevation. See the features object for every vehicle.
 * @param "CalcPoints" (optional.Bool) -  If the points for the route should be calculated at all printing out only distance and time.
 * @param "PointHint" (optional.Interface of []string) -  Optional parameter. Specifies a hint for each `point` parameter to prefer a certain street for the closest location lookup. E.g. if there is an address or house with two or more neighboring streets you can control for which street the closest location is looked up.
 * @param "ChDisable" (optional.Bool) -  Use this parameter in combination with one or more parameters of this table
 * @param "Weighting" (optional.String) -  Which kind of 'best' route calculation you need. Other option is `shortest` (e.g. for `vehicle=foot` or `bike`), `short_fastest` if time and distance is expensive e.g. for `vehicle=truck`
 * @param "EdgeTraversal" (optional.Bool) -  Use `true` if you want to consider turn restrictions for bike and motor vehicles. Keep in mind that the response time is roughly 2 times slower.
 * @param "Algorithm" (optional.String) -  The algorithm to calculate the route. Other options are `dijkstra`, `astar`, `astarbi`, `alternative_route` and `round_trip`
 * @param "Heading" (optional.Int32) -  Favour a heading direction for a certain point. Specify either one heading for the start point or as many as there are points. In this case headings are associated by their order to the specific points. Headings are given as north based clockwise angle between 0 and 360 degree. This parameter also influences the tour generated with `algorithm=round_trip` and force the initial direction.
 * @param "HeadingPenalty" (optional.Int32) -  Penalty for omitting a specified heading. The penalty corresponds to the accepted time delay in seconds in comparison to the route without a heading.
 * @param "PassThrough" (optional.Bool) -  If `true` u-turns are avoided at via-points with regard to the `heading_penalty`.
 * @param "Details" (optional.Interface of []string) -  List of additional trip attributes to be returned. Try some of the following: `average_speed`, `street_name`, `edge_id`, `time`, `distance`.
 * @param "RoundTripDistance" (optional.Int32) -  If `algorithm=round_trip` this parameter configures approximative length of the resulting round trip
 * @param "RoundTripSeed" (optional.Int64) -  If `algorithm=round_trip` this parameter introduces randomness if e.g. the first try wasn't good.
 * @param "AlternativeRouteMaxPaths" (optional.Int32) -  If `algorithm=alternative_route` this parameter sets the number of maximum paths which should be calculated. Increasing can lead to worse alternatives.
 * @param "AlternativeRouteMaxWeightFactor" (optional.Int32) -  If `algorithm=alternative_route` this parameter sets the factor by which the alternatives routes can be longer than the optimal route. Increasing can lead to worse alternatives.
 * @param "AlternativeRouteMaxShareFactor" (optional.Int32) -  If `algorithm=alternative_route` this parameter specifies how much alternatives routes can have maximum in common with the optimal route. Increasing can lead to worse alternatives.
 * @param "Avoid" (optional.String) -  comma separate list to avoid certain roads. You can avoid motorway, ferry, tunnel or track
@return RouteResponse
*/

type RouteGetOpts struct {
    Locale optional.String
    Instructions optional.Bool
    Vehicle optional.String
    Elevation optional.Bool
    CalcPoints optional.Bool
    PointHint optional.Interface
    ChDisable optional.Bool
    Weighting optional.String
    EdgeTraversal optional.Bool
    Algorithm optional.String
    Heading optional.Int32
    HeadingPenalty optional.Int32
    PassThrough optional.Bool
    Details optional.Interface
    RoundTripDistance optional.Int32
    RoundTripSeed optional.Int64
    AlternativeRouteMaxPaths optional.Int32
    AlternativeRouteMaxWeightFactor optional.Int32
    AlternativeRouteMaxShareFactor optional.Int32
    Avoid optional.String
}

func (a *RoutingApiService) RouteGet(ctx context.Context, point []string, pointsEncoded bool, key string, localVarOptionals *RouteGetOpts) (RouteResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue RouteResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/route"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("point", parameterToString(point, "multi"))
	if localVarOptionals != nil && localVarOptionals.Locale.IsSet() {
		localVarQueryParams.Add("locale", parameterToString(localVarOptionals.Locale.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Instructions.IsSet() {
		localVarQueryParams.Add("instructions", parameterToString(localVarOptionals.Instructions.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Vehicle.IsSet() {
		localVarQueryParams.Add("vehicle", parameterToString(localVarOptionals.Vehicle.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Elevation.IsSet() {
		localVarQueryParams.Add("elevation", parameterToString(localVarOptionals.Elevation.Value(), ""))
	}
	localVarQueryParams.Add("points_encoded", parameterToString(pointsEncoded, ""))
	if localVarOptionals != nil && localVarOptionals.CalcPoints.IsSet() {
		localVarQueryParams.Add("calc_points", parameterToString(localVarOptionals.CalcPoints.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PointHint.IsSet() {
		localVarQueryParams.Add("point_hint", parameterToString(localVarOptionals.PointHint.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.ChDisable.IsSet() {
		localVarQueryParams.Add("ch.disable", parameterToString(localVarOptionals.ChDisable.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Weighting.IsSet() {
		localVarQueryParams.Add("weighting", parameterToString(localVarOptionals.Weighting.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EdgeTraversal.IsSet() {
		localVarQueryParams.Add("edge_traversal", parameterToString(localVarOptionals.EdgeTraversal.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Algorithm.IsSet() {
		localVarQueryParams.Add("algorithm", parameterToString(localVarOptionals.Algorithm.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Heading.IsSet() {
		localVarQueryParams.Add("heading", parameterToString(localVarOptionals.Heading.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.HeadingPenalty.IsSet() {
		localVarQueryParams.Add("heading_penalty", parameterToString(localVarOptionals.HeadingPenalty.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PassThrough.IsSet() {
		localVarQueryParams.Add("pass_through", parameterToString(localVarOptionals.PassThrough.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Details.IsSet() {
		localVarQueryParams.Add("details", parameterToString(localVarOptionals.Details.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.RoundTripDistance.IsSet() {
		localVarQueryParams.Add("round_trip.distance", parameterToString(localVarOptionals.RoundTripDistance.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RoundTripSeed.IsSet() {
		localVarQueryParams.Add("round_trip.seed", parameterToString(localVarOptionals.RoundTripSeed.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AlternativeRouteMaxPaths.IsSet() {
		localVarQueryParams.Add("alternative_route.max_paths", parameterToString(localVarOptionals.AlternativeRouteMaxPaths.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AlternativeRouteMaxWeightFactor.IsSet() {
		localVarQueryParams.Add("alternative_route.max_weight_factor", parameterToString(localVarOptionals.AlternativeRouteMaxWeightFactor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AlternativeRouteMaxShareFactor.IsSet() {
		localVarQueryParams.Add("alternative_route.max_share_factor", parameterToString(localVarOptionals.AlternativeRouteMaxShareFactor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Avoid.IsSet() {
		localVarQueryParams.Add("avoid", parameterToString(localVarOptionals.Avoid.Value(), ""))
	}
	localVarQueryParams.Add("key", parameterToString(key, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v RouteResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v GhError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
