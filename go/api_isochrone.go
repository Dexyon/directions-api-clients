/*
 * GraphHopper Directions API
 *
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package graphhopper

import (
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"golang.org/x/net/context"
	"encoding/json"
)

// Linger please
var (
	_ context.Context
)

type IsochroneApiService service

/* IsochroneApiService Isochrone Request
The GraphHopper Isochrone API allows calculating an isochrone of a locations means to calculate &#39;a line connecting points at which a vehicle arrives at the same time,&#39; see [Wikipedia](http://en.wikipedia.org/wiki/Isochrone_map). It is also called **reachability** or **walkability**. 
 * @param ctx context.Context for authentication, logging, tracing, etc.
@param point Specify the start coordinate
@param key Get your key at graphhopper.com
@param optional (nil or map[string]interface{}) with one or more of:
    @param "timeLimit" (int32) Specify which time the vehicle should travel. In seconds.
    @param "distanceLimit" (int32) Specify which distance the vehicle should travel. In meter.
    @param "vehicle" (string) Possible vehicles are bike, car, foot and [more](https://graphhopper.com/api/1/docs/supported-vehicle-profiles/)
    @param "buckets" (int32) For how many sub intervals an additional polygon should be calculated.
    @param "reverseFlow" (bool) If &#x60;false&#x60; the flow goes from point to the polygon, if &#x60;true&#x60; the flow goes from the polygon \&quot;inside\&quot; to the point. Example usage for &#x60;false&#x60;&amp;#58; *How many potential customer can be reached within 30min travel time from your store* vs. &#x60;true&#x60;&amp;#58; *How many customers can reach your store within 30min travel time.*
    @param "weighting" (string) Can be fastest or shortest
@return IsochroneResponse*/
func (a *IsochroneApiService) IsochroneGet(ctx context.Context, point string, key string, localVarOptionals map[string]interface{}) (IsochroneResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		successPayload     IsochroneResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/isochrone"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if err := typeCheckParameter(localVarOptionals["timeLimit"], "int32", "timeLimit"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["distanceLimit"], "int32", "distanceLimit"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["vehicle"], "string", "vehicle"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["buckets"], "int32", "buckets"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["reverseFlow"], "bool", "reverseFlow"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["weighting"], "string", "weighting"); err != nil {
		return successPayload, nil, err
	}

	localVarQueryParams.Add("point", parameterToString(point, ""))
	if localVarTempParam, localVarOk := localVarOptionals["timeLimit"].(int32); localVarOk {
		localVarQueryParams.Add("time_limit", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["distanceLimit"].(int32); localVarOk {
		localVarQueryParams.Add("distance_limit", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["vehicle"].(string); localVarOk {
		localVarQueryParams.Add("vehicle", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["buckets"].(int32); localVarOk {
		localVarQueryParams.Add("buckets", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["reverseFlow"].(bool); localVarOk {
		localVarQueryParams.Add("reverse_flow", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["weighting"].(string); localVarOk {
		localVarQueryParams.Add("weighting", parameterToString(localVarTempParam, ""))
	}
	localVarQueryParams.Add("key", parameterToString(key, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return successPayload, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return successPayload, localVarHttpResponse, err
	}
	defer localVarHttpResponse.Body.Close()
	if localVarHttpResponse.StatusCode >= 300 {
		bodyBytes, _ := ioutil.ReadAll(localVarHttpResponse.Body)
		return successPayload, localVarHttpResponse, reportError("Status: %v, Body: %s", localVarHttpResponse.Status, bodyBytes)
	}

	if err = json.NewDecoder(localVarHttpResponse.Body).Decode(&successPayload); err != nil {
		return successPayload, localVarHttpResponse, err
	}

	return successPayload, localVarHttpResponse, err
}
