/* 
 * GraphHopper Directions API
 *
 * With the GraphHopper Directions API you get reliable and fast web services for routing and more with world wide coverage. We offer A-to-B routing via the Routing API optionally with turn instructions and elevation data as well as route optimization with various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API. 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

package graphhopper

import (
	"net/url"
	"strings"
	"encoding/json"
)

type GeocodingApi struct {
	Configuration *Configuration
}

func NewGeocodingApi() *GeocodingApi {
	configuration := NewConfiguration()
	return &GeocodingApi{
		Configuration: configuration,
	}
}

func NewGeocodingApiWithBasePath(basePath string) *GeocodingApi {
	configuration := NewConfiguration()
	configuration.BasePath = basePath

	return &GeocodingApi{
		Configuration: configuration,
	}
}

/**
 * Execute a Geocoding request
 * This endpoint provides forward and reverse geocoding. For more details, review the official documentation at: https://graphhopper.com/api/1/docs/geocoding/ 
 *
 * @param key Get your key at graphhopper.com
 * @param q If you do forward geocoding, then this would be a textual description of the adress you are looking for. If you do reverse geocoding this would be in lat,lon.
 * @param locale Display the search results for the specified locale. Currently French (fr), English (en), German (de) and Italian (it) are supported. If the locale wasn&#39;t found the default (en) is used.
 * @param limit Specify the maximum number of returned results
 * @param reverse Set to true to do a reverse Geocoding request
 * @param point The location bias in the format &#39;latitude,longitude&#39; e.g. point&#x3D;45.93272,11.58803
 * @param provider Can be either, default, nominatim, opencagedata
 * @return *GhGeocodingResponse
 */
func (a GeocodingApi) GeocodeGet(key string, q string, locale string, limit int32, reverse bool, point string, provider string) (*GhGeocodingResponse, *APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Get")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/geocode"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}
	localVarQueryParams.Add("q", a.Configuration.APIClient.ParameterToString(q, ""))
	localVarQueryParams.Add("locale", a.Configuration.APIClient.ParameterToString(locale, ""))
	localVarQueryParams.Add("limit", a.Configuration.APIClient.ParameterToString(limit, ""))
	localVarQueryParams.Add("reverse", a.Configuration.APIClient.ParameterToString(reverse, ""))
	localVarQueryParams.Add("point", a.Configuration.APIClient.ParameterToString(point, ""))
	localVarQueryParams.Add("provider", a.Configuration.APIClient.ParameterToString(provider, ""))
	localVarQueryParams.Add("key", a.Configuration.APIClient.ParameterToString(key, ""))

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	var successPayload = new(GhGeocodingResponse)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "GeocodeGet", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return successPayload, localVarAPIResponse, err
}

