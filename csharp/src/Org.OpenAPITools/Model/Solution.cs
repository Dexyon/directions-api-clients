/* 
 * GraphHopper Directions API
 *
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Solution
    /// </summary>
    [DataContract]
    public partial class Solution :  IEquatable<Solution>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Solution" /> class.
        /// </summary>
        /// <param name="costs">overall costs of solution.</param>
        /// <param name="distance">overall travel distance in meters.</param>
        /// <param name="time">overall transport time in seconds.</param>
        /// <param name="transportTime">overall transport time in seconds.</param>
        /// <param name="maxOperationTime">operation time of the longest route in seconds.</param>
        /// <param name="waitingTime">total waiting time in seconds.</param>
        /// <param name="noVehicles">number of employed vehicles.</param>
        /// <param name="noUnassigned">number of jobs that could not be assigned to final solution.</param>
        /// <param name="routes">An array of routes.</param>
        /// <param name="unassigned">unassigned.</param>
        public Solution(int? costs = default(int?), int? distance = default(int?), long? time = default(long?), long? transportTime = default(long?), long? maxOperationTime = default(long?), long? waitingTime = default(long?), int? noVehicles = default(int?), int? noUnassigned = default(int?), List<Route> routes = default(List<Route>), Object unassigned = default(Object))
        {
            this.Costs = costs;
            this.Distance = distance;
            this.Time = time;
            this.TransportTime = transportTime;
            this.MaxOperationTime = maxOperationTime;
            this.WaitingTime = waitingTime;
            this.NoVehicles = noVehicles;
            this.NoUnassigned = noUnassigned;
            this.Routes = routes;
            this.Unassigned = unassigned;
        }
        
        /// <summary>
        /// overall costs of solution
        /// </summary>
        /// <value>overall costs of solution</value>
        [DataMember(Name="costs", EmitDefaultValue=false)]
        public int? Costs { get; set; }

        /// <summary>
        /// overall travel distance in meters
        /// </summary>
        /// <value>overall travel distance in meters</value>
        [DataMember(Name="distance", EmitDefaultValue=false)]
        public int? Distance { get; set; }

        /// <summary>
        /// overall transport time in seconds
        /// </summary>
        /// <value>overall transport time in seconds</value>
        [DataMember(Name="time", EmitDefaultValue=false)]
        public long? Time { get; set; }

        /// <summary>
        /// overall transport time in seconds
        /// </summary>
        /// <value>overall transport time in seconds</value>
        [DataMember(Name="transport_time", EmitDefaultValue=false)]
        public long? TransportTime { get; set; }

        /// <summary>
        /// operation time of the longest route in seconds
        /// </summary>
        /// <value>operation time of the longest route in seconds</value>
        [DataMember(Name="max_operation_time", EmitDefaultValue=false)]
        public long? MaxOperationTime { get; set; }

        /// <summary>
        /// total waiting time in seconds
        /// </summary>
        /// <value>total waiting time in seconds</value>
        [DataMember(Name="waiting_time", EmitDefaultValue=false)]
        public long? WaitingTime { get; set; }

        /// <summary>
        /// number of employed vehicles
        /// </summary>
        /// <value>number of employed vehicles</value>
        [DataMember(Name="no_vehicles", EmitDefaultValue=false)]
        public int? NoVehicles { get; set; }

        /// <summary>
        /// number of jobs that could not be assigned to final solution
        /// </summary>
        /// <value>number of jobs that could not be assigned to final solution</value>
        [DataMember(Name="no_unassigned", EmitDefaultValue=false)]
        public int? NoUnassigned { get; set; }

        /// <summary>
        /// An array of routes
        /// </summary>
        /// <value>An array of routes</value>
        [DataMember(Name="routes", EmitDefaultValue=false)]
        public List<Route> Routes { get; set; }

        /// <summary>
        /// Gets or Sets Unassigned
        /// </summary>
        [DataMember(Name="unassigned", EmitDefaultValue=false)]
        public Object Unassigned { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Solution {\n");
            sb.Append("  Costs: ").Append(Costs).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  TransportTime: ").Append(TransportTime).Append("\n");
            sb.Append("  MaxOperationTime: ").Append(MaxOperationTime).Append("\n");
            sb.Append("  WaitingTime: ").Append(WaitingTime).Append("\n");
            sb.Append("  NoVehicles: ").Append(NoVehicles).Append("\n");
            sb.Append("  NoUnassigned: ").Append(NoUnassigned).Append("\n");
            sb.Append("  Routes: ").Append(Routes).Append("\n");
            sb.Append("  Unassigned: ").Append(Unassigned).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Solution);
        }

        /// <summary>
        /// Returns true if Solution instances are equal
        /// </summary>
        /// <param name="input">Instance of Solution to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Solution input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Costs == input.Costs ||
                    (this.Costs != null &&
                    this.Costs.Equals(input.Costs))
                ) && 
                (
                    this.Distance == input.Distance ||
                    (this.Distance != null &&
                    this.Distance.Equals(input.Distance))
                ) && 
                (
                    this.Time == input.Time ||
                    (this.Time != null &&
                    this.Time.Equals(input.Time))
                ) && 
                (
                    this.TransportTime == input.TransportTime ||
                    (this.TransportTime != null &&
                    this.TransportTime.Equals(input.TransportTime))
                ) && 
                (
                    this.MaxOperationTime == input.MaxOperationTime ||
                    (this.MaxOperationTime != null &&
                    this.MaxOperationTime.Equals(input.MaxOperationTime))
                ) && 
                (
                    this.WaitingTime == input.WaitingTime ||
                    (this.WaitingTime != null &&
                    this.WaitingTime.Equals(input.WaitingTime))
                ) && 
                (
                    this.NoVehicles == input.NoVehicles ||
                    (this.NoVehicles != null &&
                    this.NoVehicles.Equals(input.NoVehicles))
                ) && 
                (
                    this.NoUnassigned == input.NoUnassigned ||
                    (this.NoUnassigned != null &&
                    this.NoUnassigned.Equals(input.NoUnassigned))
                ) && 
                (
                    this.Routes == input.Routes ||
                    this.Routes != null &&
                    this.Routes.SequenceEqual(input.Routes)
                ) && 
                (
                    this.Unassigned == input.Unassigned ||
                    (this.Unassigned != null &&
                    this.Unassigned.Equals(input.Unassigned))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Costs != null)
                    hashCode = hashCode * 59 + this.Costs.GetHashCode();
                if (this.Distance != null)
                    hashCode = hashCode * 59 + this.Distance.GetHashCode();
                if (this.Time != null)
                    hashCode = hashCode * 59 + this.Time.GetHashCode();
                if (this.TransportTime != null)
                    hashCode = hashCode * 59 + this.TransportTime.GetHashCode();
                if (this.MaxOperationTime != null)
                    hashCode = hashCode * 59 + this.MaxOperationTime.GetHashCode();
                if (this.WaitingTime != null)
                    hashCode = hashCode * 59 + this.WaitingTime.GetHashCode();
                if (this.NoVehicles != null)
                    hashCode = hashCode * 59 + this.NoVehicles.GetHashCode();
                if (this.NoUnassigned != null)
                    hashCode = hashCode * 59 + this.NoUnassigned.GetHashCode();
                if (this.Routes != null)
                    hashCode = hashCode * 59 + this.Routes.GetHashCode();
                if (this.Unassigned != null)
                    hashCode = hashCode * 59 + this.Unassigned.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
