/* 
 * GraphHopper Directions API
 *
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


using NUnit.Framework;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using IO.Swagger.Api;
using IO.Swagger.Model;
using IO.Swagger.Client;
using System.Reflection;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing GHRouteResponsePath
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the model.
    /// </remarks>
    [TestFixture]
    public class GHRouteResponsePathTests
    {
        // TODO uncomment below to declare an instance variable for GHRouteResponsePath
        //private GHRouteResponsePath instance;

        /// <summary>
        /// Setup before each test
        /// </summary>
        [SetUp]
        public void Init()
        {
            // TODO uncomment below to create an instance of GHRouteResponsePath
            //instance = new GHRouteResponsePath();
        }

        /// <summary>
        /// Clean up after each test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of GHRouteResponsePath
        /// </summary>
        [Test]
        public void GHRouteResponsePathInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOfType" GHRouteResponsePath
            //Assert.IsInstanceOfType<GHRouteResponsePath> (instance, "variable 'instance' is a GHRouteResponsePath");
        }

        /// <summary>
        /// Test the property 'Distance'
        /// </summary>
        [Test]
        public void DistanceTest()
        {
            // TODO unit test for the property 'Distance'
        }
        /// <summary>
        /// Test the property 'Time'
        /// </summary>
        [Test]
        public void TimeTest()
        {
            // TODO unit test for the property 'Time'
        }
        /// <summary>
        /// Test the property 'Ascend'
        /// </summary>
        [Test]
        public void AscendTest()
        {
            // TODO unit test for the property 'Ascend'
        }
        /// <summary>
        /// Test the property 'Descend'
        /// </summary>
        [Test]
        public void DescendTest()
        {
            // TODO unit test for the property 'Descend'
        }
        /// <summary>
        /// Test the property 'Points'
        /// </summary>
        [Test]
        public void PointsTest()
        {
            // TODO unit test for the property 'Points'
        }
        /// <summary>
        /// Test the property 'PointsEncoded'
        /// </summary>
        [Test]
        public void PointsEncodedTest()
        {
            // TODO unit test for the property 'PointsEncoded'
        }
        /// <summary>
        /// Test the property 'Bbox'
        /// </summary>
        [Test]
        public void BboxTest()
        {
            // TODO unit test for the property 'Bbox'
        }
        /// <summary>
        /// Test the property 'SnappedWaypoints'
        /// </summary>
        [Test]
        public void SnappedWaypointsTest()
        {
            // TODO unit test for the property 'SnappedWaypoints'
        }
        /// <summary>
        /// Test the property 'Instructions'
        /// </summary>
        [Test]
        public void InstructionsTest()
        {
            // TODO unit test for the property 'Instructions'
        }

    }

}
