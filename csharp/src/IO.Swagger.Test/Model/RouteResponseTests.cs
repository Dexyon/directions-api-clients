/* 
 * GraphHopper Directions API
 *
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


using NUnit.Framework;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using IO.Swagger.Api;
using IO.Swagger.Model;
using IO.Swagger.Client;
using System.Reflection;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing RouteResponse
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the model.
    /// </remarks>
    [TestFixture]
    public class RouteResponseTests
    {
        // TODO uncomment below to declare an instance variable for RouteResponse
        //private RouteResponse instance;

        /// <summary>
        /// Setup before each test
        /// </summary>
        [SetUp]
        public void Init()
        {
            // TODO uncomment below to create an instance of RouteResponse
            //instance = new RouteResponse();
        }

        /// <summary>
        /// Clean up after each test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of RouteResponse
        /// </summary>
        [Test]
        public void RouteResponseInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOfType" RouteResponse
            //Assert.IsInstanceOfType<RouteResponse> (instance, "variable 'instance' is a RouteResponse");
        }

        /// <summary>
        /// Test the property 'Paths'
        /// </summary>
        [Test]
        public void PathsTest()
        {
            // TODO unit test for the property 'Paths'
        }
        /// <summary>
        /// Test the property 'Info'
        /// </summary>
        [Test]
        public void InfoTest()
        {
            // TODO unit test for the property 'Info'
        }

    }

}
