/**
* GraphHopper Directions API
* You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
*
* OpenAPI spec version: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.client.models


/**
 * 
 * @param text A description what the user has to do in order to follow the route. The language depends on the locale parameter.
 * @param street_name The name of the street to turn onto in order to follow the route.
 * @param distance The distance for this instruction, in meter
 * @param time The duration for this instruction, in ms
 * @param interval An array containing the first and the last index (relative to paths[0].points) of the points for this instruction. This is useful to know for which part of the route the instructions are valid.
 * @param sign A number which specifies the sign to show e.g. for right turn etc <br>TURN_SHARP_LEFT = -3<br>TURN_LEFT = -2<br>TURN_SLIGHT_LEFT = -1<br>CONTINUE_ON_STREET = 0<br>TURN_SLIGHT_RIGHT = 1<br>TURN_RIGHT = 2<br>TURN_SHARP_RIGHT = 3<br>FINISH = 4<br>VIA_REACHED = 5<br>USE_ROUNDABOUT = 6
 * @param annotation_text optional - A text describing the instruction in more detail, e.g. like surface of the way, warnings or involved costs.
 * @param annotation_importance optional - 0 stands for INFO, 1 for warning, 2 for costs, 3 for costs and warning
 * @param exit_number optional - Only available for USE_ROUNDABOUT instructions. The count of exits at which the route leaves the roundabout.
 * @param turn_angle optional - Only available for USE_ROUNDABOUT instructions. The radian of the route within the roundabout - 0&lt;r&lt;2*PI for clockwise and -2PI&lt;r&lt;0 for counterclockwise transit. Null if the direction of rotation is undefined.
 */
data class ResponseInstruction (
    /* A description what the user has to do in order to follow the route. The language depends on the locale parameter. */
    val text: kotlin.String? = null,
    /* The name of the street to turn onto in order to follow the route. */
    val street_name: kotlin.String? = null,
    /* The distance for this instruction, in meter */
    val distance: kotlin.Double? = null,
    /* The duration for this instruction, in ms */
    val time: kotlin.Int? = null,
    /* An array containing the first and the last index (relative to paths[0].points) of the points for this instruction. This is useful to know for which part of the route the instructions are valid. */
    val interval: kotlin.Array<kotlin.Int>? = null,
    /* A number which specifies the sign to show e.g. for right turn etc <br>TURN_SHARP_LEFT = -3<br>TURN_LEFT = -2<br>TURN_SLIGHT_LEFT = -1<br>CONTINUE_ON_STREET = 0<br>TURN_SLIGHT_RIGHT = 1<br>TURN_RIGHT = 2<br>TURN_SHARP_RIGHT = 3<br>FINISH = 4<br>VIA_REACHED = 5<br>USE_ROUNDABOUT = 6 */
    val sign: kotlin.Int? = null,
    /* optional - A text describing the instruction in more detail, e.g. like surface of the way, warnings or involved costs. */
    val annotation_text: kotlin.String? = null,
    /* optional - 0 stands for INFO, 1 for warning, 2 for costs, 3 for costs and warning */
    val annotation_importance: kotlin.Int? = null,
    /* optional - Only available for USE_ROUNDABOUT instructions. The count of exits at which the route leaves the roundabout. */
    val exit_number: kotlin.Int? = null,
    /* optional - Only available for USE_ROUNDABOUT instructions. The radian of the route within the roundabout - 0&lt;r&lt;2*PI for clockwise and -2PI&lt;r&lt;0 for counterclockwise transit. Null if the direction of rotation is undefined. */
    val turn_angle: kotlin.Double? = null
) {

}

