/**
* GraphHopper Directions API
* You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
*
* OpenAPI spec version: 1.0.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.swagger.client.apis

import io.swagger.client.models.Response

import io.swagger.client.infrastructure.*

class SolutionApi(basePath: kotlin.String = "https://graphhopper.com/api/1") : ApiClient(basePath) {

    /**
    * Return the solution associated to the jobId
    * This endpoint returns the solution of a large problems. You can fetch it with the job_id, you have been sent. 
    * @param key your API key 
    * @param jobId Request solution with jobId 
    * @return Response
    */
    @Suppress("UNCHECKED_CAST")
    fun getSolution(key: kotlin.String, jobId: kotlin.String) : Response {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("key" to listOf("$key"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/vrp/solution/{jobId}".replace("{"+"jobId"+"}", "$jobId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Response>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Response
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
