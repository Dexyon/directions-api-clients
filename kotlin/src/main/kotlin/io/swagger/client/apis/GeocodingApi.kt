/**
* GraphHopper Directions API
* You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
*
* OpenAPI spec version: 1.0.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.swagger.client.apis

import io.swagger.client.models.GHError
import io.swagger.client.models.GeocodingResponse

import io.swagger.client.infrastructure.*

class GeocodingApi(basePath: kotlin.String = "https://graphhopper.com/api/1") : ApiClient(basePath) {

    /**
    * Execute a Geocoding request
    * This endpoint provides forward and reverse geocoding. For more details, review the official documentation at: https://graphhopper.com/api/1/docs/geocoding/ 
    * @param key Get your key at graphhopper.com 
    * @param q If you do forward geocoding, then this would be a textual description of the address you are looking for (optional)
    * @param locale Display the search results for the specified locale. Currently French (fr), English (en), German (de) and Italian (it) are supported. If the locale wasn&#39;t found the default (en) is used. (optional)
    * @param limit Specify the maximum number of returned results (optional)
    * @param reverse Set to true to do a reverse Geocoding request, see point parameter (optional)
    * @param point The location bias in the format &#39;latitude,longitude&#39; e.g. point&#x3D;45.93272,11.58803 (optional)
    * @param provider Can be either, default, nominatim, opencagedata (optional)
    * @return GeocodingResponse
    */
    @Suppress("UNCHECKED_CAST")
    fun geocodeGet(key: kotlin.String, q: kotlin.String, locale: kotlin.String, limit: kotlin.Int, reverse: kotlin.Boolean, point: kotlin.String, provider: kotlin.String) : GeocodingResponse {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("q" to listOf("$q"), "locale" to listOf("$locale"), "limit" to listOf("$limit"), "reverse" to listOf("$reverse"), "point" to listOf("$point"), "provider" to listOf("$provider"), "key" to listOf("$key"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/geocode",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<GeocodingResponse>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as GeocodingResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
