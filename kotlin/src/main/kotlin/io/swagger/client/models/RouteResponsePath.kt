/**
* GraphHopper Directions API
* You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
*
* OpenAPI spec version: 1.0.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.swagger.client.models

import io.swagger.client.models.ResponseCoordinates
import io.swagger.client.models.ResponseInstructions

/**
 * A found path
 * @param distance The total distance of the route, in meter
 * @param time The total time of the route, in ms
 * @param ascend 
 * @param descend The total descend (downhill) of the route, in meter
 * @param points 
 * @param points_encoded Is true if the points are encoded, if not paths[0].points contains the geo json of the path (then order is lon,lat,elevation), which is easier to handle but consumes more bandwidth compared to encoded version
 * @param bbox The bounding box of the route, format <br> minLon, minLat, maxLon, maxLat
 * @param snapped_waypoints 
 * @param instructions 
 * @param details 
 */
data class RouteResponsePath (
    /* The total distance of the route, in meter */
    val distance: kotlin.Double? = null,
    /* The total time of the route, in ms */
    val time: kotlin.Long? = null,
    val ascend: kotlin.Double? = null,
    /* The total descend (downhill) of the route, in meter */
    val descend: kotlin.Double? = null,
    val points: ResponseCoordinates? = null,
    /* Is true if the points are encoded, if not paths[0].points contains the geo json of the path (then order is lon,lat,elevation), which is easier to handle but consumes more bandwidth compared to encoded version */
    val points_encoded: kotlin.Boolean? = null,
    /* The bounding box of the route, format <br> minLon, minLat, maxLon, maxLat */
    val bbox: kotlin.Array<kotlin.Double>? = null,
    val snapped_waypoints: ResponseCoordinates? = null,
    val instructions: ResponseInstructions? = null,
    val details: kotlin.Any? = null
) {

}

