/**
* GraphHopper Directions API
* You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
*
* OpenAPI spec version: 1.0.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.swagger.client.models

import io.swagger.client.models.Address
import io.swagger.client.models.TimeWindow

/**
 * 
 * @param id Unique identifier of service
 * @param type type of service
 * @param priority priority of service
 * @param name name of service
 * @param address 
 * @param duration duration of service, i.e. time in ms the corresponding activity takes
 * @param preparation_time preparation time of service, e.g. search for a parking space. it only falls due if the location of previous activity differs from this location
 * @param time_windows array of time windows. currently, only a single time window is allowed
 * @param size array of capacity dimensions
 * @param required_skills array of required skills
 * @param allowed_vehicles array of allowed vehicle ids
 */
data class Service (
    /* Unique identifier of service */
    val id: kotlin.String? = null,
    /* type of service */
    val type: Service.Type? = null,
    /* priority of service */
    val priority: kotlin.Int? = null,
    /* name of service */
    val name: kotlin.String? = null,
    val address: Address? = null,
    /* duration of service, i.e. time in ms the corresponding activity takes */
    val duration: kotlin.Long? = null,
    /* preparation time of service, e.g. search for a parking space. it only falls due if the location of previous activity differs from this location */
    val preparation_time: kotlin.Long? = null,
    /* array of time windows. currently, only a single time window is allowed */
    val time_windows: kotlin.Array<TimeWindow>? = null,
    /* array of capacity dimensions */
    val size: kotlin.Array<kotlin.Int>? = null,
    /* array of required skills */
    val required_skills: kotlin.Array<kotlin.String>? = null,
    /* array of allowed vehicle ids */
    val allowed_vehicles: kotlin.Array<kotlin.String>? = null
) {

    /**
    * type of service
    * Values: service,pickup,delivery
    */
    enum class Type(val value: kotlin.Any){
    
        service("service"),
    
        pickup("pickup"),
    
        delivery("delivery");
    
    }

}

