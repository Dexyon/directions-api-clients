/**
* GraphHopper Directions API
* You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
*
* OpenAPI spec version: 1.0.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.swagger.client.models


/**
 * 
 * @param type_id Unique identifier for the vehicle type
 * @param profile Profile of vehicle type
 * @param capacity array of capacity dimensions
 * @param speed_factor speed_factor of vehicle type
 * @param service_time_factor service time factor of vehicle type
 * @param cost_per_meter cost parameter per distance unit, here meter is used
 * @param cost_per_second cost parameter per time unit, here second is used
 * @param cost_per_activation cost parameter vehicle activation, i.e. fixed costs per vehicle
 */
data class VehicleType (
    /* Unique identifier for the vehicle type */
    val type_id: kotlin.String? = null,
    /* Profile of vehicle type */
    val profile: VehicleType.Profile? = null,
    /* array of capacity dimensions */
    val capacity: kotlin.Array<kotlin.Int>? = null,
    /* speed_factor of vehicle type */
    val speed_factor: kotlin.Double? = null,
    /* service time factor of vehicle type */
    val service_time_factor: kotlin.Double? = null,
    /* cost parameter per distance unit, here meter is used */
    val cost_per_meter: kotlin.Double? = null,
    /* cost parameter per time unit, here second is used */
    val cost_per_second: kotlin.Double? = null,
    /* cost parameter vehicle activation, i.e. fixed costs per vehicle */
    val cost_per_activation: kotlin.Double? = null
) {

    /**
    * Profile of vehicle type
    * Values: car,bike,foot,mtb,racingbike,scooter,truck,smallTruck
    */
    enum class Profile(val value: kotlin.Any){
    
        car("car"),
    
        bike("bike"),
    
        foot("foot"),
    
        mtb("mtb"),
    
        racingbike("racingbike"),
    
        scooter("scooter"),
    
        truck("truck"),
    
        smallTruck("small_truck");
    
    }

}

