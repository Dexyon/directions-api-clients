/**
* GraphHopper Directions API
* You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
*
* OpenAPI spec version: 1.0.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.swagger.client.models

import io.swagger.client.models.Route
import io.swagger.client.models.Solution_unassigned

/**
 * 
 * @param costs overall costs of solution
 * @param distance overall travel distance in meters
 * @param time overall transport time in seconds
 * @param transport_time overall transport time in seconds
 * @param max_operation_time operation time of the longest route in seconds
 * @param waiting_time total waiting time in seconds
 * @param service_duration total service time in seconds
 * @param preparation_time total preparation time in seconds
 * @param completion_time total completion time in seconds
 * @param no_vehicles number of employed vehicles
 * @param no_unassigned number of jobs that could not be assigned to final solution
 * @param routes An array of routes
 * @param unassigned 
 */
data class Solution (
    /* overall costs of solution */
    val costs: kotlin.Int? = null,
    /* overall travel distance in meters */
    val distance: kotlin.Int? = null,
    /* overall transport time in seconds */
    val time: kotlin.Long? = null,
    /* overall transport time in seconds */
    val transport_time: kotlin.Long? = null,
    /* operation time of the longest route in seconds */
    val max_operation_time: kotlin.Long? = null,
    /* total waiting time in seconds */
    val waiting_time: kotlin.Long? = null,
    /* total service time in seconds */
    val service_duration: kotlin.Long? = null,
    /* total preparation time in seconds */
    val preparation_time: kotlin.Long? = null,
    /* total completion time in seconds */
    val completion_time: kotlin.Long? = null,
    /* number of employed vehicles */
    val no_vehicles: kotlin.Int? = null,
    /* number of jobs that could not be assigned to final solution */
    val no_unassigned: kotlin.Int? = null,
    /* An array of routes */
    val routes: kotlin.Array<Route>? = null,
    val unassigned: Solution_unassigned? = null
) {

}

