/**
 * GraphHopper Directions API
 * With the GraphHopper Directions API you get reliable and fast web services for routing and more with world wide coverage. We offer A-to-B routing via the Routing API optionally with turn instructions and elevation data as well as route optimization with various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API. 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api

import io.swagger.client.model.GHError
import io.swagger.client.model.GHIsochroneResponse
import io.swagger.client.ApiInvoker
import io.swagger.client.ApiException

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date

import scala.collection.mutable.HashMap

class IsochroneApi(val defBasePath: String = "https://graphhopper.com/api/1",
                        defApiInvoker: ApiInvoker = ApiInvoker) {
  var basePath = defBasePath
  var apiInvoker = defApiInvoker

  def addHeader(key: String, value: String) = apiInvoker.defaultHeaders += key -> value 

  /**
   * Isochrone Request
   * The GraphHopper Isochrone API allows calculating an isochrone of a locations means to calculate &#39;a line connecting points at which a vehicle arrives at the same time,&#39; see [Wikipedia](http://en.wikipedia.org/wiki/Isochrone_map). It is also called **reachability** or **walkability**. 
   * @param point Specify the start coordinate 
   * @param key Get your key at graphhopper.com 
   * @param timeLimit Specify which time the vehicle should travel. In seconds. The maximum depends on the subscribed package. (optional, default to 600)
   * @param vehicle Possible vehicles are bike, car, foot and [more](https://graphhopper.com/api/1/docs/supported-vehicle-profiles/) (optional, default to car)
   * @param buckets For how many sub intervals an additional polygon should be calculated. (optional, default to 1)
   * @param reverseFlow If &#x60;false&#x60; the flow goes from point to the polygon, if &#x60;true&#x60; the flow goes from the polygon \&quot;inside\&quot; to the point. Example usage for &#x60;false&#x60;&amp;#58; *How many potential customer can be reached within 30min travel time from your store* vs. &#x60;true&#x60;&amp;#58; *How many customers can reach your store within 30min travel time.* (optional, default to false)
   * @return GHIsochroneResponse
   */
  def isochroneGet(point: String, key: String, timeLimit: Option[Integer] /* = 600*/, vehicle: Option[String] /* = car*/, buckets: Option[Integer] /* = 1*/, reverseFlow: Option[Boolean] /* = false*/): Option[GHIsochroneResponse] = {
    // create path and map variables
    val path = "/isochrone".replaceAll("\\{format\\}", "json")

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (point == null) throw new Exception("Missing required parameter 'point' when calling IsochroneApi->isochroneGet")

    if (key == null) throw new Exception("Missing required parameter 'key' when calling IsochroneApi->isochroneGet")

    queryParams += "point" -> point.toString
    timeLimit.map(paramVal => queryParams += "time_limit" -> paramVal.toString)
    vehicle.map(paramVal => queryParams += "vehicle" -> paramVal.toString)
    buckets.map(paramVal => queryParams += "buckets" -> paramVal.toString)
    reverseFlow.map(paramVal => queryParams += "reverse_flow" -> paramVal.toString)
    queryParams += "key" -> key.toString
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[GHIsochroneResponse]).asInstanceOf[GHIsochroneResponse])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

}
