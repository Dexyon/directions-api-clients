//
// GHResponseInstruction.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


public class GHResponseInstruction: JSONEncodable {
    /** A description what the user has to do in order to follow the route. The language depends on the locale parameter. */
    public var text: String?
    /** The name of the street to turn onto in order to follow the route. */
    public var streetName: String?
    /** The distance for this instruction, in meter */
    public var distance: Double?
    /** The duration for this instruction, in ms */
    public var time: Int32?
    /** An array containing the first and the last index (relative to paths[0].points) of the points for this instruction. This is useful to know for which part of the route the instructions are valid. */
    public var interval: [Int32]?
    /** A number which specifies the sign to show e.g. for right turn etc &lt;br&gt;TURN_SHARP_LEFT &#x3D; -3&lt;br&gt;TURN_LEFT &#x3D; -2&lt;br&gt;TURN_SLIGHT_LEFT &#x3D; -1&lt;br&gt;CONTINUE_ON_STREET &#x3D; 0&lt;br&gt;TURN_SLIGHT_RIGHT &#x3D; 1&lt;br&gt;TURN_RIGHT &#x3D; 2&lt;br&gt;TURN_SHARP_RIGHT &#x3D; 3&lt;br&gt;FINISH &#x3D; 4&lt;br&gt;VIA_REACHED &#x3D; 5&lt;br&gt;USE_ROUNDABOUT &#x3D; 6 */
    public var sign: Int32?
    /** optional - A text describing the instruction in more detail, e.g. like surface of the way, warnings or involved costs. */
    public var annotationText: String?
    /** optional - 0 stands for INFO, 1 for warning, 2 for costs, 3 for costs and warning */
    public var annotationImportance: Int32?
    /** optional - Only available for USE_ROUNDABOUT instructions. The count of exits at which the route leaves the roundabout. */
    public var exitNumber: Int32?
    /** optional - Only available for USE_ROUNDABOUT instructions. The radian of the route within the roundabout - 0&amp;lt;r&amp;lt;2*PI for clockwise and -2PI&amp;lt;r&amp;lt;0 for counterclockwise transit. Null if the direction of rotation is undefined. */
    public var turnAngle: Double?

    public init() {}

    // MARK: JSONEncodable
    func encodeToJSON() -> AnyObject {
        var nillableDictionary = [String:AnyObject?]()
        nillableDictionary["text"] = self.text
        nillableDictionary["street_name"] = self.streetName
        nillableDictionary["distance"] = self.distance
        nillableDictionary["time"] = self.time?.encodeToJSON()
        nillableDictionary["interval"] = self.interval?.encodeToJSON()
        nillableDictionary["sign"] = self.sign?.encodeToJSON()
        nillableDictionary["annotation_text"] = self.annotationText
        nillableDictionary["annotation_importance"] = self.annotationImportance?.encodeToJSON()
        nillableDictionary["exit_number"] = self.exitNumber?.encodeToJSON()
        nillableDictionary["turn_angle"] = self.turnAngle
        let dictionary: [String:AnyObject] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
