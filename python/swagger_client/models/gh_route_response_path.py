# coding: utf-8

"""
    GraphHopper Directions API

    With the GraphHopper Directions API you get reliable and fast web services for routing and more with world wide coverage. We offer A-to-B routing via the Routing API optionally with turn instructions and elevation data as well as route optimization with various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API. 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GHRouteResponsePath(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, distance=None, time=None, ascend=None, descend=None, points=None, points_encoded=None, bbox=None, snapped_waypoints=None, instructions=None):
        """
        GHRouteResponsePath - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'distance': 'float',
            'time': 'int',
            'ascend': 'float',
            'descend': 'float',
            'points': 'GHResponseCoordinates',
            'points_encoded': 'bool',
            'bbox': 'list[float]',
            'snapped_waypoints': 'GHResponseCoordinates',
            'instructions': 'GHResponseInstructions'
        }

        self.attribute_map = {
            'distance': 'distance',
            'time': 'time',
            'ascend': 'ascend',
            'descend': 'descend',
            'points': 'points',
            'points_encoded': 'points_encoded',
            'bbox': 'bbox',
            'snapped_waypoints': 'snapped_waypoints',
            'instructions': 'instructions'
        }

        self._distance = distance
        self._time = time
        self._ascend = ascend
        self._descend = descend
        self._points = points
        self._points_encoded = points_encoded
        self._bbox = bbox
        self._snapped_waypoints = snapped_waypoints
        self._instructions = instructions

    @property
    def distance(self):
        """
        Gets the distance of this GHRouteResponsePath.
        The total distance of the route, in meter

        :return: The distance of this GHRouteResponsePath.
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """
        Sets the distance of this GHRouteResponsePath.
        The total distance of the route, in meter

        :param distance: The distance of this GHRouteResponsePath.
        :type: float
        """

        self._distance = distance

    @property
    def time(self):
        """
        Gets the time of this GHRouteResponsePath.
        The total time of the route, in ms

        :return: The time of this GHRouteResponsePath.
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """
        Sets the time of this GHRouteResponsePath.
        The total time of the route, in ms

        :param time: The time of this GHRouteResponsePath.
        :type: int
        """

        self._time = time

    @property
    def ascend(self):
        """
        Gets the ascend of this GHRouteResponsePath.

        :return: The ascend of this GHRouteResponsePath.
        :rtype: float
        """
        return self._ascend

    @ascend.setter
    def ascend(self, ascend):
        """
        Sets the ascend of this GHRouteResponsePath.

        :param ascend: The ascend of this GHRouteResponsePath.
        :type: float
        """

        self._ascend = ascend

    @property
    def descend(self):
        """
        Gets the descend of this GHRouteResponsePath.
        The total descend (downhill) of the route, in meter

        :return: The descend of this GHRouteResponsePath.
        :rtype: float
        """
        return self._descend

    @descend.setter
    def descend(self, descend):
        """
        Sets the descend of this GHRouteResponsePath.
        The total descend (downhill) of the route, in meter

        :param descend: The descend of this GHRouteResponsePath.
        :type: float
        """

        self._descend = descend

    @property
    def points(self):
        """
        Gets the points of this GHRouteResponsePath.

        :return: The points of this GHRouteResponsePath.
        :rtype: GHResponseCoordinates
        """
        return self._points

    @points.setter
    def points(self, points):
        """
        Sets the points of this GHRouteResponsePath.

        :param points: The points of this GHRouteResponsePath.
        :type: GHResponseCoordinates
        """

        self._points = points

    @property
    def points_encoded(self):
        """
        Gets the points_encoded of this GHRouteResponsePath.
        Is true if the points are encoded, if not paths[0].points contains the geo json of the path (then order is lon,lat,elevation), which is easier to handle but consumes more bandwidth compared to encoded version

        :return: The points_encoded of this GHRouteResponsePath.
        :rtype: bool
        """
        return self._points_encoded

    @points_encoded.setter
    def points_encoded(self, points_encoded):
        """
        Sets the points_encoded of this GHRouteResponsePath.
        Is true if the points are encoded, if not paths[0].points contains the geo json of the path (then order is lon,lat,elevation), which is easier to handle but consumes more bandwidth compared to encoded version

        :param points_encoded: The points_encoded of this GHRouteResponsePath.
        :type: bool
        """

        self._points_encoded = points_encoded

    @property
    def bbox(self):
        """
        Gets the bbox of this GHRouteResponsePath.
        The bounding box of the route, format <br> minLon, minLat, maxLon, maxLat

        :return: The bbox of this GHRouteResponsePath.
        :rtype: list[float]
        """
        return self._bbox

    @bbox.setter
    def bbox(self, bbox):
        """
        Sets the bbox of this GHRouteResponsePath.
        The bounding box of the route, format <br> minLon, minLat, maxLon, maxLat

        :param bbox: The bbox of this GHRouteResponsePath.
        :type: list[float]
        """

        self._bbox = bbox

    @property
    def snapped_waypoints(self):
        """
        Gets the snapped_waypoints of this GHRouteResponsePath.

        :return: The snapped_waypoints of this GHRouteResponsePath.
        :rtype: GHResponseCoordinates
        """
        return self._snapped_waypoints

    @snapped_waypoints.setter
    def snapped_waypoints(self, snapped_waypoints):
        """
        Sets the snapped_waypoints of this GHRouteResponsePath.

        :param snapped_waypoints: The snapped_waypoints of this GHRouteResponsePath.
        :type: GHResponseCoordinates
        """

        self._snapped_waypoints = snapped_waypoints

    @property
    def instructions(self):
        """
        Gets the instructions of this GHRouteResponsePath.

        :return: The instructions of this GHRouteResponsePath.
        :rtype: GHResponseInstructions
        """
        return self._instructions

    @instructions.setter
    def instructions(self, instructions):
        """
        Sets the instructions of this GHRouteResponsePath.

        :param instructions: The instructions of this GHRouteResponsePath.
        :type: GHResponseInstructions
        """

        self._instructions = instructions

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GHRouteResponsePath):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
